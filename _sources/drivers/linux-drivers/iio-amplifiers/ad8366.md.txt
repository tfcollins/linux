---
wiki-source: https://wiki.analog.com/resources/tools-software/linux-drivers/iio-amplifiers/ad8366
title: HMC1119: 0.25 dB LSB, 7-Bit, Silicon Digital Attenuator, 0.1 GHz to 6.0 GHz
---

AD8366 Dual-Digital Variable Gain Amplifier Linux Driver
========================================================

Supported Devices
-----------------

-   [AD8366](https://www.google.com/search?q=AD8366&btnI=lucky)
-   [ADA4961](https://www.google.com/search?q=ADA4961&btnI=lucky)
-   [ADL5240](https://www.google.com/search?q=ADL5240&btnI=lucky)
-   [ADRF5720](https://www.google.com/search?q=ADRF5720&btnI=lucky)
-   [ADRF5730](https://www.google.com/search?q=ADRF5730&btnI=lucky)
-   [ADRF5731](https://www.google.com/search?q=ADRF5731&btnI=lucky)
-   [HMC271](https://www.google.com/search?q=HMC271&btnI=lucky)
-   [HMC1018A](https://www.google.com/search?q=HMC1018A&btnI=lucky)
-   [HMC1019A](https://www.google.com/search?q=HMC1019A&btnI=lucky)
-   [HMC1119](https://www.google.com/search?q=HMC1119&btnI=lucky)

Evaluation Boards
-----------------

-   [AD8366-EVALZ](https://www.google.com/search?q=AD8366-EVALZ&btnI=lucky)

Description
-----------

This is a Linux industrial I/O ([IIO](/software/linux/docs/iio/iio)) subsystem driver, targeting serial interface VGA/PGA amplifiers.
The industrial I/O subsystem provides a unified framework for drivers for many different types of converters and sensors using a number of different physical interfaces (i2c, spi, etc).
See [IIO](/software/linux/docs/iio/iio) for more information.

Source Code
===========

Status
------

<table>
<thead>
<tr class="header">
<th>Source</th>
<th>Mainlined?</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><a href="https://www.google.com/search?q=drivers/iio/amplifiers/ad8366.c&amp;btnI=lucky">git</a></td>
<td><a href="https://www.google.com/search?q=drivers/iio/amplifiers/ad8366.c&amp;btnI=lucky">Yes</a></td>
</tr>
</tbody>
</table>

Files
-----

<table>
<thead>
<tr class="header">
<th>Function</th>
<th>File</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>driver</td>
<td><a href="https://www.google.com/search?q=drivers/iio/amplifiers/ad8366.c&amp;btnI=lucky">drivers/iio/amplifiers/ad8366.c</a></td>
</tr>
<tr class="even">
<td>Documentation</td>
<td><a href="https://www.google.com/search?q=Documentation/ABI/testing/sysfs-bus-iio&amp;btnI=lucky">Documentation/ABI/testing/sysfs-bus-iio</a></td>
</tr>
</tbody>
</table>

![](page>software/linux/docs/platform_and_bus_model#Declaring SPI slave devices&firstseconly&noeditbtn)

Depending on the IC used, you may need to set the modalias accordingly, matching your part name.
It may also required to adjust max\_speed\_hz. Please consult the datasheet, for maximum spi clock supported by the device in question.

``` {.c}
static struct spi_board_info board_spi_board_info[] __initdata = {
#if defined(CONFIG_AD8366) || defined(CONFIG_AD8366_MODULE)
    {
        .modalias = "ad8366",
        .max_speed_hz = 1000000,     /* max spi clock (SCK) speed in HZ */
        .bus_num = 0,
        .chip_select = 6,
        .platform_data = &ad8366_pdata_lpc, /* spi_driver specific config */
        .mode = SPI_MODE_0, /* optional set SPI_3WIRE */
    },
};
```

``` {.c}
static int __init board_init(void)
{
    [--snip--]

    spi_register_board_info(board_spi_board_info, ARRAY_SIZE(board_spi_board_info));

    [--snip--]

    return 0;
}
arch_initcall(board_init);
```

Example SPI device devicetree initialization
============================================

\*\*Analog Devices AD8366 (and similar) VGAs and DSAs \*\*

**Required properties:**

-   **compatible**: Must be one of:
    -   \"adi,ad8366\",
    -   \"adi,ada4961\",
    -   \"adi,adrf5720\",
    -   \"adi,adrf5730\",
    -   \"adi,adrf5731\",
    -   \"adi,adl5240\",
    -   \"adi,hmc271\",
    -   \"adi,hmc1018a\",
    -   \"adi,hmc1019a\",
    -   \"adi,hmc1119\",
-   **reg**: SPI chip select number for the device
-   **\#address-cells**: Must be set to 1
-   **\#size-cells**: Must be set to 0
-   **spi-max-frequency**: See Documentation/devicetree/bindings/spi/spi-bus.txt
-   **spi-cpha**: See Documentation/devicetree/bindings/spi/spi-bus.txt
-   **spi-cpol**: See Documentation/devicetree/bindings/spi/spi-bus.txt

**Optional properties:**

-   **reset-gpio**: a GPIO spec for the RESET pin (if available).
-   **enable-gpio**: a GPIO spec for the ENABLE or serial interface select pin (S/A) (if available).

**Example:**

``` {.c}
&spi0 {
    status = "okay";

        hmc1018a: hmc1018a@0 {
        #address-cells = <1>;
        #size-cells = <0>;
        compatible = "adi,hmc1018a";
        reg = <0>;
                spi-cpol;
        spi-max-frequency = <1000000>;
    };

        adrf5720: adrf5731@1 {
        #address-cells = <1>;
        #size-cells = <0>;
        compatible = "adi,adrf5731";
        reg = <1>;
                spi-cpol;
        spi-max-frequency = <1000000>;
    };

    vga0_ad8366: ad8366@6 {
        #address-cells = <1>;
        #size-cells = <0>;
        compatible = "adi,ad8366";
        reg = <6>;
        spi-max-frequency = <10000000>;
    };
};
```

Adding Linux driver support
===========================

Configure kernel with \"make menuconfig\" (alternatively use \"make xconfig\" or
\"make qconfig\")

:::{NOTE} <!-- ATTRS: round="" help\="" -->

The AD8366 Driver depends on **CONFIG\_SPI**

:::


```{=markdown}
```
Linux Kernel Configuration
    Device Drivers  --->
        <*>     Industrial I/O support --->
            --- Industrial I/O support
                Amplifiers  --->
                    <*> Analog Devices AD8366 VGA

```
```
Hardware configuration
======================

Driver testing
==============

![iio\_snippets\#iio device files&noheader&firstseconly&noeditbtn](/page>software/linux/docs/iio/iio_snippets#iio device files&noheader&firstseconly&noeditbtn)

:::{NOTE} <!-- ATTRS: box="" bggreen\="" -->
:::{HINT} <!-- ATTRS: info\="" -->
This specifies any shell prompt running on the target
:::

```bash
root:/\> **cd /sys/bus/iio/devices/**
root:/sys/bus/iio/devices\> ls
iio:device0
root:/sys/bus/iio/devices\> **iio:device0**

root:/\> **ls -l**
drwxr-xr-x 2 root root 0 Jan 1 00:00 .
drwxr-xr-x 3 root root 0 Jan 1 00:00 ..
-r\--r\--r\-- 1 root root 4096 Jan 1 00:00 dev
-r\--r\--r\-- 1 root root 4096 Jan 1 00:00 name
-rw-r\--r\-- 1 root root 4096 Jan 1 00:00 out\_voltage0\_hardwaregain
-rw-r\--r\-- 1 root root 4096 Jan 1 00:00 out\_voltage1\_hardwaregain
lrwxrwxrwx 1 root root 0 Jan 1 00:00 subsystem -\> ../../../../../../../../../bus/iio
-rw-r\--r\-- 1 root root 4096 Jan 1 00:00 uevent
```
:::


#### Show device name

:::{NOTE} <!-- ATTRS: box="" bggreen\="" -->
:::{HINT} <!-- ATTRS: info\="" -->
This specifies any shell prompt running on the target
:::

```bash
root:/\> **cd /sys/bus/iio/devices/iio\\:device0/**
root:/\> **cat name**
ad8366
```
:::


#### Set ChannelY Gain

/sys/bus/iio/devices/iio:deviceX/out\_voltageY\_hardwaregain\
Hardware applied gain factor. If shared across all channels,
\<type\>\_hardwaregain is used.

:::{NOTE} <!-- ATTRS: box="" bggreen\="" -->
:::{HINT} <!-- ATTRS: info\="" -->
This specifies any shell prompt running on the target
:::

```bash
root:/\> **cat out\_voltage0\_hardwaregain**
4.500000 dB

root:/\> **echo 10 \> out\_voltage0\_hardwaregain**
root:/\> **cat out\_voltage0\_hardwaregain**
9.813000 dB
```
:::


More Information
================

![iio\_snippets\#iio pointers&noheader&firstseconly&noeditbtn](/page>software/linux/docs/iio/iio_snippets#iio pointers&noheader&firstseconly&noeditbtn)
