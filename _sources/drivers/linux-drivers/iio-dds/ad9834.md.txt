---
wiki-source: https://wiki.analog.com/resources/tools-software/linux-drivers/iio-dds/ad9834
title: AD9838: 11 mW Power, 2.3 V to 5.5 V, Complete DDS
---

# AD9834 IIO Direct Digital Synthesis Linux Driver

### Supported Devices

-   [AD9833](https://analog.com/AD9833)
-   [AD9834](https://analog.com/AD9834)
-   [AD9837](https://analog.com/AD9837)
-   [AD9838](https://analog.com/AD9838)

### Reference Circuits

-   [CN0156](https://analog.com/CN0156)

### Evaluation Boards

-   [EVAL-AD9833SDZ](https://analog.com/EVAL-AD9833SDZ)
-   [EVAL-AD9834SDZ](https://analog.com/EVAL-AD9834SDZ)
-   [EVAL-AD9837SDZ](https://analog.com/EVAL-AD9837SDZ)
-   [EVAL-AD9838SDZ](https://analog.com/EVAL-AD9838SDZ)

### Description

This is a Linux industrial I/O ([IIO](/software/linux/docs/iio/iio)) subsystem driver, targeting serial interface DDS controllers.
The industrial I/O subsystem provides a unified framework for drivers for many different types of converters and sensors using a number of different physical interfaces (i2c, spi, etc).
See [IIO](/software/linux/docs/iio/iio) for more information.

## Source Code

### Status

<table>
<thead>
<tr class="header">
<th>Source</th>
<th>Mainlined?</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><a href="git.linux.org&gt;drivers/staging/iio/frequency/ad9834.c">git</a></td>
<td><a href="git.linux.org&gt;drivers/staging/iio/frequency/ad9834.c">Yes</a></td>
</tr>
</tbody>
</table>

### Files

<table>
<thead>
<tr class="header">
<th>Function</th>
<th>File</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>driver</td>
<td><a href="git.linux.org&gt;drivers/staging/iio/frequency/ad9834.c">drivers/staging/iio/frequency/ad9834.c</a></td>
</tr>
<tr class="even">
<td>include</td>
<td><a href="git.linux.org&gt;drivers/staging/iio/frequency/ad9834.h">drivers/staging/iio/frequency/ad9834.h</a></td>
</tr>
</tbody>
</table>

## Example device-tree

In the example below, it's assumed that **spi0** is the SPI controller to which the AD983X is attached to. Typically, these are defined in the board device-tree where the AD983X is attached to.

``` c

    &spi0 {
        #address-cells = <1>;
        #size-cells = <0>;
        status = "okay";

        ad9833@0{
            #clock-cells = <0>;
            compatible = "adi,ad9833";
            reg = <0>;
            spi-max-frequency = <1000000>;
            spi-cpol;
            clocks = <&osc>;
            vcc-supply = <&vcc>;
        };
    };
```

This example also references a regulator (vcc-supply) and a clock (osc). These can be left out, in which case it's assumed they are somehow hard-wired on the board to a proper voltage supply and clock source.

The **compabtible** string can be any of the following:

-   adi,ad9833
-   adi,ad9834
-   adi,ad9837
-   adi,ad9838

Note that, the *adi,* prefix can be omitted and this still works. It is preferred to be added to avoid any potential collisions with other drivers from other vendors.

However, the voltage supply & clock can be defined via device-tree as well.
See example below:

``` c
    / {
        vcc: fixedregulator@0 {
            compatible = "regulator-fixed";
            regulator-name = "fixed-supply";
            regulator-min-microvolt = <2500000>;
            regulator-max-microvolt = <2500000>;
            regulator-boot-on;
        };

        osc: oscillator {
            #clock-cells = <0>;
            compatible = "fixed-clock";
            clock-frequency = <25000000>;
        };
    };
```

This assumes that the board has the chips & drivers to generate voltages like this & clock frequencies.

## Adding Linux driver support

Configure kernel with "make menuconfig" (alternatively use "make xconfig" or
"make qconfig")

:::{NOTE} <!-- ATTRS: round="" help="" -->

The AD9834 Driver depends on **CONFIG_SPI**

:::


    Linux Kernel Configuration
        Device Drivers  --->
            [*] Staging drivers  --->
                <*>     Industrial I/O support --->
                    --- Industrial I/O support
                    -*-   Enable ring buffer support within IIO
                    -*-     Industrial I/O lock free software ring
                    -*-   Enable triggered sampling support

                          *** Direct Digital Synthesis ***
                    [--snip--]

                    <*>   Analog Devices ad9833/4/ driver

                    [--snip--]

## Hardware configuration

## Driver testing

<!-- CMDS: noheader firstseconly noeditbtn -->
```{include} software_linux_docs_iio_iio_snippets_SUB_iio_device_files.md
```

:::{NOTE} <!-- ATTRS: box="" bggreen="" -->
:::{HINT} <!-- ATTRS: info="" -->
This specifies any shell prompt running on the target
:::

```{code-block} bash
root:/> **cd /sys/bus/iio/devices/**
root:/sys/bus/iio/devices> ls
device0
root:/sys/bus/iio/devices> **cd device0**

root:/sys/devices/platform/bfin-spi.0/spi0.3/device0> **ls -l**
--w------- 1 root root 4096 Jan 3 14:06 dds0_freq0
--w------- 1 root root 4096 Jan 3 14:06 dds0_freq1
-r--r--r-- 1 root root 4096 Jan 3 14:06 dds0_freq_scale
--w------- 1 root root 4096 Jan 3 14:06 dds0_freqsymbol
--w------- 1 root root 4096 Jan 3 14:06 dds0_out0_wavetype
-r--r--r-- 1 root root 4096 Jan 3 14:06 dds0_out0_wavetype_available
--w------- 1 root root 4096 Jan 3 14:06 dds0_out1_enable
--w------- 1 root root 4096 Jan 3 14:06 dds0_out1_wavetype
-r--r--r-- 1 root root 4096 Jan 3 14:06 dds0_out1_wavetype_available
--w------- 1 root root 4096 Jan 3 14:06 dds0_out_enable
--w------- 1 root root 4096 Jan 3 14:06 dds0_phase0
--w------- 1 root root 4096 Jan 3 14:06 dds0_phase1
-r--r--r-- 1 root root 4096 Jan 3 14:06 dds0_phase_scale
--w------- 1 root root 4096 Jan 3 14:06 dds0_phasesymbol
--w------- 1 root root 4096 Jan 3 14:06 dds0_pincontrol_en
-r--r--r-- 1 root root 4096 Jan 3 14:06 name
drwxr-xr-x 2 root root 0 Jan 3 14:06 power
lrwxrwxrwx 1 root root 0 Jan 3 14:06 subsystem -> ../../../../../bus/iio
-rw-r--r-- 1 root root 4096 Jan 3 14:06 uevent
```
:::


##### Show device name

:::{NOTE} <!-- ATTRS: box="" bggreen="" -->
:::{HINT} <!-- ATTRS: info="" -->
This specifies any shell prompt running on the target
:::

```{code-block} bash
root:/sys/devices/platform/bfin-spi.0/spi0.3/device0> **cat name**
ad9834
```
:::


##### Show frequency scale

/sys/bus/iio/devices/.../ddsX_freqY_scale
Scale to be applied to ddsX_freqY in order to obtain the
desired value in Hz. If shared across all frequency registers
Y is not present. It is also possible X is not present if
shared across all channels.

:::{NOTE} <!-- ATTRS: box="" bggreen="" -->
:::{HINT} <!-- ATTRS: info="" -->
This specifies any shell prompt running on the target
:::

```{code-block} bash
root:/sys/devices/platform/bfin-spi.0/spi0.3/device0> **cat dds0_freq_scale**
1
```
:::


##### Set frequency symbol 0/1

/sys/bus/iio/devices/.../ddsX_freqY
Stores frequency into tuning word Y.
There will be more than one ddsX_freqY file, which allows for
pin controlled FSK Frequency Shift Keying
(ddsX_pincontrol_freq_en is active) or the user can control
the desired active tuning word by writing Y to the
ddsX_freqsymbol file.

:::{NOTE} <!-- ATTRS: box="" bggreen="" -->
:::{HINT} <!-- ATTRS: info="" -->
This specifies any shell prompt running on the target
:::

```{code-block} bash
root:/sys/devices/platform/bfin-spi.0/spi0.3/device0> **echo 1000000 > dds0_freq0**
root:/sys/devices/platform/bfin-spi.0/spi0.3/device0> **echo 500000 > dds0_freq0**
```
:::


**freq0** = *ddsX_freq0 * dds0_freq_scale* = 1000000 * 1 = **1 MHz**
**freq1** = *ddsX_freq1 * dds0_freq_scale* = 500000 * 1 = **500 kHz**

##### Show phase scale

/sys/bus/iio/devices/.../ddsX_phaseY_scale
Scale to be applied to ddsX_phaseY in order to obtain the
desired value in rad. If shared across all phase registers
Y is not present. It is also possible X is not present if
shared across all channels.

:::{NOTE} <!-- ATTRS: box="" bggreen="" -->
:::{HINT} <!-- ATTRS: info="" -->
This specifies any shell prompt running on the target
:::

```{code-block} bash
root:/sys/devices/platform/bfin-spi.0/spi0.3/device0> **cat dds0_phase_scale**
0.0015339808
```
:::


##### Set phase symbol 0/1

/sys/bus/iio/devices/.../ddsX_phaseY
Stores phase into Y.
There will be more than one ddsX_phaseY file, which allows for
pin controlled PSK Phase Shift Keying
(ddsX_pincontrol_phase_en is active) or the user can
control the desired phase Y which is added to the phase
accumulator output by writing Y to the en_phase file.

:::{NOTE} <!-- ATTRS: box="" bggreen="" -->
:::{HINT} <!-- ATTRS: info="" -->
This specifies any shell prompt running on the target
:::

```{code-block} bash
root:/sys/devices/platform/bfin-spi.0/spi0.3/device0> **echo 512 > dds0_phase0**
root:/sys/devices/platform/bfin-spi.0/spi0.3/device0> **echo 2048 > dds0_phase0**
```
:::


**phase0** = *dds0_phase0 * ddsX_phaseY_scale* = 512 * 0.0015339808 = **0.7853981696 rad**
**phase1** = *dds0_phase1 * ddsX_phaseY_scale* = 2048 * 0.0015339808 = PI = **3.1415926 rad**

##### List available wavetypes

/sys/bus/iio/devices/.../ddsX_outY_wavetype_available
Lists all available output waveform options.

:::{NOTE} <!-- ATTRS: box="" bggreen="" -->
:::{HINT} <!-- ATTRS: info="" -->
This specifies any shell prompt running on the target
:::

```{code-block} bash
root:/sys/devices/platform/bfin-spi.0/spi0.3/device0> **cat dds0_out0_wavetype_available**
sine triangle
```
:::


##### Set wavetype

/sys/bus/iio/devices/.../ddsX_outY_wavetype
Specifies the output waveform.
(sine, triangle, ramp, square, ...)
For a list of available output waveform options read
available_output_modes.

:::{NOTE} <!-- ATTRS: box="" bggreen="" -->
:::{HINT} <!-- ATTRS: info="" -->
This specifies any shell prompt running on the target
:::

```{code-block} bash
root:/sys/devices/platform/bfin-spi.0/spi0.3/device0> **echo sine > dds0_out0_wavetype**
```
:::


##### Disable FSK/PSK pincontrol

/sys/bus/iio/devices/.../ddsX_pincontrol_en
ddsX_pincontrol_en: Both, the active frequency and phase is
controlled by the respective phase and frequency control inputs.
In case the device in question allows to independent controls,
then there are dedicated files (ddsX_pincontrol_freq_en,
ddsX_pincontrol_phase_en).

:::{NOTE} <!-- ATTRS: box="" bggreen="" -->
:::{HINT} <!-- ATTRS: info="" -->
This specifies any shell prompt running on the target
:::

```{code-block} bash
root:/sys/devices/platform/bfin-spi.0/spi0.3/device0> **echo 0 > dds0_pincontrol_en**
```
:::


##### Enable output 0

/sys/bus/iio/devices/.../ddsX_out_enable
/sys/bus/iio/devices/.../ddsX_outY_enable
ddsX_outY_enable controls signal generation on output Y of
channel X. Y may be suppressed if all channels are
controlled together.

:::{NOTE} <!-- ATTRS: box="" bggreen="" -->
:::{HINT} <!-- ATTRS: info="" -->
This specifies any shell prompt running on the target
:::

```{code-block} bash
root:/sys/devices/platform/bfin-spi.0/spi0.3/device0> **echo 1 > dds0_out_enable**
```
:::


##### Switch between frequency symbol 0/1

/sys/bus/iio/devices/.../ddsX_freqsymbol
Specifies the active output frequency tuning word. The value
corresponds to the Y in ddsX_freqY. To exit this mode the user
can write ddsX_pincontrol_freq_en or ddsX_out_enable file.

:::{NOTE} <!-- ATTRS: box="" bggreen="" -->
:::{HINT} <!-- ATTRS: info="" -->
This specifies any shell prompt running on the target
:::

```{code-block} bash
root:/sys/devices/platform/bfin-spi.0/spi0.3/device0> **echo 1 > dds0_freqsymbol**
root:/sys/devices/platform/bfin-spi.0/spi0.3/device0> **echo 0 > dds0_freqsymbol**
root:/sys/devices/platform/bfin-spi.0/spi0.3/device0>
```
:::


## More Information

<!-- CMDS: noheader firstseconly noeditbtn -->
```{include} software_linux_docs_iio_iio_snippets_SUB_iio_pointers.md
```
