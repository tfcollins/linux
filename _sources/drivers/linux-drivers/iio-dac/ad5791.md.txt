# AD5791 IIO DAC Linux Driver

### Supported Devices

-   [AD5760](adi>AD5760)
-   [AD5780](adi>AD5780)
-   [AD5781](adi>AD5781)
-   [AD5790](adi>AD5790)
-   [AD5791](adi>AD5791)

### Reference Circuits

-   [CN0177](adi>CN0177)
-   [CN0191](adi>CN0191)
-   [CN0200](adi>CN0200)
-   [CN0257](adi>CN0257)
-   [CN0278](adi>CN0278)
-   [CN0318](adi>CN0318)

### Evaluation Boards

-   [EVAL-AD5760SDZ](adi>EVAL-AD5760SDZ)
-   [EVAL-AD5780SDZ](adi>EVAL-AD5780SDZ)
-   [EVAL-AD5781SDZ](adi>EVAL-AD5781SDZ)
-   [EVAL-AD5790SDZ](adi>EVAL-AD5790SDZ)
-   [EVAL-AD5791SDZ](adi>EVAL-AD5791SDZ)

### Description

This is a Linux industrial I/O ([IIO](/software/linux/docs/iio/iio)) subsystem driver, targeting single-channel serial interface DACs.
The industrial I/O subsystem provides a unified framework for drivers for many different types of converters and sensors using a number of different physical interfaces (i2c, spi, etc).
See [IIO](/software/linux/docs/iio/iio) for more information.

## Source Code

### Status

<table>
<thead>
<tr class="header">
<th>Source</th>
<th>Mainlined?</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><a href="git.linux.org&gt;drivers/iio/dac/ad5791.c">git</a></td>
<td><a href="git.linux.org&gt;drivers/iio/dac/ad5791.c">Yes</a></td>
</tr>
</tbody>
</table>

### Files

<table>
<thead>
<tr class="header">
<th>Function</th>
<th>File</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>driver</td>
<td><a href="git.linux.org&gt;drivers/iio/dac/ad5791.c">drivers/iio/dac/ad5791.c</a></td>
</tr>
<tr class="even">
<td>include</td>
<td><a href="git.linux.org&gt;drivers/iio/dac/ad5791.h">drivers/iio/dac/ad5791.h</a></td>
</tr>
</tbody>
</table>

## Example platform device initialization

![](page>software/linux/docs/platform_and_bus_model#Platform Data&noheader&firstseconly&noeditbtn)

The reference voltage may vary between boards and models. The platform_data for the device\'s \"struct device\" holds this information.

``` c
/**
 * struct ad5791_platform_data - platform specific information
 * @vref_pos_mv:    Vdd Positive Analog Supply Volatge (mV)
 * @vref_neg_mv:    Vdd Negative Analog Supply Volatge (mV)
 * @use_rbuf_gain2: ext. amplifier connected in gain of two configuration
 */

struct ad5791_platform_data {
    u16             vref_pos_mv;
    u16             vref_neg_mv;
    bool                use_rbuf_gain2;
};
```

\<WRAP tip\>
This driver supports also an alternative way of specifying the reference voltage, by using the Linux regulator framework.
\</WRAP\>

### Specifying reference voltage via the regulator framework

Below example specifies a 30 Volt reference for the SPI device 3 on SPI-Bus 0. (**spi0.3**)

``` c
#if defined(CONFIG_REGULATOR_FIXED_VOLTAGE) || defined(CONFIG_REGULATOR_FIXED_VOLTAGE_MODULE)
static struct regulator_consumer_supply ad5791_consumer_supplies_vdd[] = {
    REGULATOR_SUPPLY("vdd", "spi0.3"),
};

static struct regulator_init_data stamp_avdd_reg_init_data = {
    .constraints    = {
        .name   = "10V0",
        .valid_ops_mask = REGULATOR_CHANGE_STATUS,
    },
    .consumer_supplies = ad5791_consumer_supplies_vdd,
    .num_consumer_supplies = ARRAY_SIZE(ad5791_consumer_supplies_vdd),
};

static struct fixed_voltage_config stamp_vdd_pdata = {
    .supply_name    = "board+10V0",
    .microvolts = 10000000,
    .gpio       = -EINVAL,
    .enabled_at_boot = 0,
    .init_data  = &stamp_avdd_reg_init_data,
};
static struct platform_device brd_voltage_regulator_vdd = {
    .name       = "reg-fixed-voltage",
    .id     = 0,
    .num_resources  = 0,
    .dev        = {
        .platform_data  = &stamp_vdd_pdata,
    },
};

static struct regulator_consumer_supply ad5791_consumer_supplies_vss[] = {
    REGULATOR_SUPPLY("vss", "spi0.3"),
};

static struct regulator_init_data stamp_avss_reg_init_data = {
    .constraints    = {
        .name   = "-10V0",
        .valid_ops_mask = REGULATOR_CHANGE_STATUS,
    },
    .consumer_supplies = ad5791_consumer_supplies_vss,
    .num_consumer_supplies = ARRAY_SIZE(ad5791_consumer_supplies_vss),
};

static struct fixed_voltage_config stamp_vss_pdata = {
    .supply_name    = "board-10V0",
    .microvolts = 10000000,
    .gpio       = -EINVAL,
    .enabled_at_boot = 0,
    .init_data  = &stamp_avss_reg_init_data,
};
static struct platform_device brd_voltage_regulator_vss = {
    .name       = "reg-fixed-voltage",
    .id     = 1,
    .num_resources  = 0,
    .dev        = {
        .platform_data  = &stamp_vss_pdata,
    },
};
#endif
```

``` c
static struct platform_device *board_devices[] __initdata = {
#if defined(CONFIG_REGULATOR_FIXED_VOLTAGE) || defined(CONFIG_REGULATOR_FIXED_VOLTAGE_MODULE)
    &brd_voltage_regulator_vss,
    &brd_voltage_regulator_vdd,
#endif
};
```

``` c
static int __init board_init(void)
{
    [--snip--]

    platform_add_devices(board_devices, ARRAY_SIZE(board_devices));

    [--snip--]

    return 0;
}
arch_initcall(board_init);
```

![](page>software/linux/docs/platform_and_bus_model#Declaring SPI slave devices&firstseconly&noeditbtn)

Depending on the converter IC used, you may need to set the modalias accordingly, matching your part name.
It may also required to adjust max_speed_hz. Please consult the datasheet, for maximum spi clock supported by the device in question.

``` c
static struct spi_board_info board_spi_board_info[] __initdata = {
#if defined(CONFIG_AD5791) || \
    defined(CONFIG_AD5791
_MODULE)
    {
        /* the modalias must be the same as spi device driver name */
        .modalias = "ad5791", /* Name of spi_driver for this device */
        .max_speed_hz = 1000000,     /* max spi clock (SCK) speed in HZ */
        .bus_num = 0, /* Framework bus number */
        .chip_select = 3, /* Framework chip select */
        .platform_data = &ad5791_pdata,
        .mode = SPI_MODE_3,
    },
#endif
};
```

``` c
static int __init board_init(void)
{
    [--snip--]

    spi_register_board_info(board_spi_board_info, ARRAY_SIZE(board_spi_board_info));

    [--snip--]

    return 0;
}
arch_initcall(board_init);
```

## Adding Linux driver support

Configure kernel with \"make menuconfig\" (alternatively use \"make xconfig\" or
\"make qconfig\")

\<WRAP round help\>
The AD5791 Driver depends on **CONFIG_SPI**
\</WRAP\>

    Linux Kernel Configuration
        Device Drivers  --->
            ...
            <*>     Industrial I/O support --->
                --- Industrial I/O support
                ...
                Digital to analog converters  ---> 
                    ...
                    <*>   Analog Devices AD5760/AD5780/AD5781/AD5790/AD5791 DAC SPI driver
                    ...
                ...
            ...

## Hardware configuration

![ad5791_eval_lr.jpg](/software/driver/linux/ad5791_eval_lr.jpg){width="600" query="?600"}

## Driver testing

![iio_snippets#iio device files&noheader&firstseconly&noeditbtn](/page>software/linux/docs/iio/iio_snippets#iio device files&noheader&firstseconly&noeditbtn)

\<WRAP box bggreen\>\<wrap info\>This specifies any shell prompt running on the target\</wrap\>
\<xterm\>
root:/\> **cd /sys/bus/iio/devices/**
root:/sys/bus/iio/devices\> ls
device0

root:/sys/bus/iio/devices\> **cd device0**

root:/sys/devices/platform/bfin-spi.0/spi0.3/iio:device0\> **ls -l**
drwxr-xr-x 2 root root 0 Jan 4 12:28 .
drwxr-xr-x 3 root root 0 Jan 4 12:28 ..
-r\--r\--r\-- 1 root root 4096 Jan 4 12:28 name
-rw-r\--r\-- 1 root root 4096 Jan 4 12:29 out_voltage0_powerdown
-rw-r\--r\-- 1 root root 4096 Jan 4 12:30 out_voltage0_raw
-rw-r\--r\-- 1 root root 4096 Jan 4 12:28 out_voltage_powerdown_mode
-r\--r\--r\-- 1 root root 4096 Jan 4 12:28 out_voltage_powerdown_mode_available
-r\--r\--r\-- 1 root root 4096 Jan 4 12:28 out_voltage_scale
lrwxrwxrwx 1 root root 0 Jan 4 12:28 subsystem -\> ../../../../../bus/iio
-rw-r\--r\-- 1 root root 4096 Jan 4 12:28 uevent
\</xterm\>\</WRAP\>

##### Show device name

\<WRAP box bggreen\>\<wrap info\>This specifies any shell prompt running on the target\</wrap\>
\<xterm\>
root:/sys/devices/platform/bfin-spi.0/spi0.3/iio:device0\> **cat name**
ad5791
\</xterm\>\</WRAP\>

##### Show scale

**Description:**\
scale to be applied to out_voltage0_raw in order to obtain the measured voltage in millivolts.

\<WRAP box bggreen\>\<wrap info\>This specifies any shell prompt running on the target\</wrap\>
\<xterm\>
root:/sys/devices/platform/bfin-spi.0/spi0.3/iio:device0\> **cat out_voltage_scale**
0.019
\</xterm\>\</WRAP\>

##### Set channel Y output voltage

**Description:**\
/sys/bus/iio/devices/iio:deviceX/out_voltageY_raw\
Raw (unscaled, no bias etc.) output voltage for
channel Y.

\<WRAP box bggreen\>\<wrap info\>This specifies any shell prompt running on the target\</wrap\>
\<xterm\>
root:/sys/devices/platform/bfin-spi.0/spi0.3/iio:device0\> echo 131579 \> out_voltage0_raw
\</xterm\>\</WRAP\>

**U** = *out_voltage0_raw \* out_voltage_scale* = 131579 \* 0.019 = **2500.001 *mV***

\<WRAP box bggreen\>\<wrap info\>This specifies any shell prompt running on the target\</wrap\>
\<xterm\>
root:/sys/devices/platform/bfin-spi.0/spi0.3/iio:device0\> echo -131579 \> out_voltage0_raw
\</xterm\>\</WRAP\>

**U** = *out_voltage0_raw \* out_voltage_scale* = -131579 \* 0.019 = **-2500.001 *mV***

##### List available power down modes

/sys/bus/iio/devices/iio:deviceX/out_voltage_powerdown_mode_available

**Description:**\
Lists all available output power down modes.

\<WRAP box bggreen\>\<wrap info\>This specifies any shell prompt running on the target\</wrap\>
\<xterm\>
root:/sys/devices/platform/bfin-spi.0/spi0.3/iio:device0\> **cat out_voltage_powerdown_mode_available**
6kohm_to_gnd three_state
\</xterm\>\</WRAP\>

##### Set power down mode

/sys/bus/iio/devices/iio:deviceX/out_voltage_powerdown_mode

**Description:**\
Specifies the output power down mode.
DAC output stage is disconnected from the amplifier and\

<table>
<tbody>
<tr class="odd">
<td>6kohm_to_gnd</td>
<td>connected to ground via an 6kOhm resistor</td>
</tr>
<tr class="even">
<td>three_state</td>
<td>left floating</td>
</tr>
</tbody>
</table>

For a list of available output power down options read
out_voltage_powerdown_mode_available.

\<WRAP box bggreen\>\<wrap info\>This specifies any shell prompt running on the target\</wrap\>
\<xterm\>
root:/sys/devices/platform/bfin-spi.0/spi0.3/iio:device0\> **echo three_state \> out_voltage_powerdown_mode**
root:/sys/devices/platform/bfin-spi.0/spi0.3/iio:device0\> **cat out_voltage_powerdown_mode**
three_state
\</xterm\>\</WRAP\>

##### Enable power down mode on output Y

/sys/bus/iio/devices/iio:deviceX/out_voltageY_powerdown

**Description:**\
Writing 1 causes output Y to enter the power down mode specified
by the corresponding out_voltageY_powerdown_mode. Clearing returns to
normal operation. Y may be suppressed if all outputs are
controlled together.

\<WRAP box bggreen\>\<wrap info\>This specifies any shell prompt running on the target\</wrap\>
\<xterm\>
root:/sys/devices/platform/bfin-spi.0/spi0.3/iio:device0\> **echo 1 \> out_voltage0_powerdown**
root:/sys/devices/platform/bfin-spi.0/spi0.3/iio:device0\> **cat out_voltage0_powerdown**
1
root:/sys/devices/platform/bfin-spi.0/spi0.3/iio:device0\> **echo 0 \> out_voltage0_powerdown**
root:/sys/devices/platform/bfin-spi.0/spi0.3/iio:device0\> **cat out_voltage0_powerdown**
0
\</xterm\>\</WRAP\>

## More Information

![iio_snippets#iio pointers&noheader&firstseconly&noeditbtn](/page>software/linux/docs/iio/iio_snippets#iio pointers&noheader&firstseconly&noeditbtn)
