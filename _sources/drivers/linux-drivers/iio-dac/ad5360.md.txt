---
wiki-source: https://wiki.analog.com/resources/tools-software/linux-drivers/iio-dac/ad5360
title: AD5373: 40-Channel, 14-Bit, Serial Input, Voltage-Output DAC
---

AD5360 IIO Multi-Channel DAC Linux Driver
=========================================

Supported Devices
-----------------

-   [AD5360](https://www.google.com/search?q=AD5360&btnI=lucky)
-   [AD5361](https://www.google.com/search?q=AD5361&btnI=lucky)
-   [AD5362](https://www.google.com/search?q=AD5362&btnI=lucky)
-   [AD5363](https://www.google.com/search?q=AD5363&btnI=lucky)
-   [AD5370](https://www.google.com/search?q=AD5370&btnI=lucky)
-   [AD5371](https://www.google.com/search?q=AD5371&btnI=lucky)
-   [AD5372](https://www.google.com/search?q=AD5372&btnI=lucky)
-   [AD5373](https://www.google.com/search?q=AD5373&btnI=lucky)

Evaluation Boards
-----------------

-   [EVAL-AD5360EBZ](https://www.google.com/search?q=EVAL-AD5360EBZ&btnI=lucky)
-   [EVAL-AD5361EBZ](https://www.google.com/search?q=EVAL-AD5361EBZ&btnI=lucky)
-   [EVAL-AD5362EBZ](https://www.google.com/search?q=EVAL-AD5362EBZ&btnI=lucky)
-   [EVAL-AD5363EBZ](https://www.google.com/search?q=EVAL-AD5363EBZ&btnI=lucky)
-   [EVAL-AD5370EBZ](https://www.google.com/search?q=EVAL-AD5370EBZ&btnI=lucky)
-   [EVAL-AD5371EBZ](https://www.google.com/search?q=EVAL-AD5371EBZ&btnI=lucky)
-   [EVAL-AD5372EBZ](https://www.google.com/search?q=EVAL-AD5372EBZ&btnI=lucky)
-   [EVAL-AD5373EBZ](https://www.google.com/search?q=EVAL-AD5373EBZ&btnI=lucky)

Description
-----------

This is a Linux industrial I/O ([IIO](/software/linux/docs/iio/iio)) subsystem driver, targeting multi-channel serial interface DACs.
The industrial I/O subsystem provides a unified framework for drivers for many different types of converters and sensors using a number of different physical interfaces (i2c, spi, etc).
See [IIO](/software/linux/docs/iio/iio) for more information.

Source Code
===========

Status
------

<table>
<thead>
<tr class="header">
<th>Source</th>
<th>Mainlined?</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><a href="https://www.google.com/search?q=drivers/iio/dac/ad5360.c&amp;btnI=lucky">git</a></td>
<td><a href="https://www.google.com/search?q=drivers/iio/dac/ad5360.c&amp;btnI=lucky">Yes</a></td>
</tr>
</tbody>
</table>

Files
-----

<table>
<thead>
<tr class="header">
<th>Function</th>
<th>File</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>driver</td>
<td><a href="https://www.google.com/search?q=drivers/iio/dac/ad5360.c&amp;btnI=lucky">drivers/iio/dac/ad5360.c</a></td>
</tr>
</tbody>
</table>

Example device tree
===================

``` {.c}
    fragment@0 {
        target-path = "/";
        __overlay__ {
            vref0: fixedregulator@0 {
                compatible = "regulator-fixed";
                regulator-name = "fixed-supply0";
                regulator-min-microvolt = <3000000>;
                regulator-max-microvolt = <3000000>;
                regulator-boot-on;
            };
            vref1: fixedregulator@1 {
                compatible = "regulator-fixed";
                regulator-name = "fixed-supply1";
                regulator-min-microvolt = <3000000>;
                regulator-max-microvolt = <3000000>;
                regulator-boot-on;
            };
        };
    };

    fragment@1 {
        target = <&spi0>;
        __overlay__ {
            #address-cells = <1>;
            #size-cells = <0>;
            status = "okay";

            ad5370@0{
                compatible = "adi,ad5370";
                reg = <0>;
                spi-max-frequency = <1000000>;
                spi-cpha;
                vref0-supply = <&vref0>;
                vref1-supply = <&vref1>;
            };
        };
    };
};
```

Example platform device initialization
======================================

Specifying reference voltage via the regulator framework
--------------------------------------------------------

Below example specifies a 2.5 Volt reference for the SPI device 3 on SPI-Bus 0. (**spi0.3**)
In this example all 4 reference voltage are supplied by the same regulator.

Except for the AD5371 devices expect two supplies named \"vref0\" and \"vref1\". The AD5371 expects a third supply named \"vref2\".

``` {.c}
# if defined(CONFIG_REGULATOR_FIXED_VOLTAGE) || defined(CONFIG_REGULATOR_FIXED_VOLTAGE_MODULE)
static struct regulator_consumer_supply ad5360_consumer_supplies[] = {
    REGULATOR_SUPPLY("vref0", "spi0.3"),
    REGULATOR_SUPPLY("vref1", "spi0.3"),
    REGULATOR_SUPPLY("vref2", "spi0.3"),
};

static struct regulator_init_data stamp_avdd_reg_init_data = {
    .constraints    = {
        .name   = "2V5",
        .valid_ops_mask = REGULATOR_CHANGE_STATUS,
    },
    .consumer_supplies = ad5360_consumer_supplies,
    .num_consumer_supplies = ARRAY_SIZE(ad5360_consumer_supplies),
};

static struct fixed_voltage_config stamp_vdd_pdata = {
    .supply_name    = "board-2V5",
    .microvolts = 2500000,
    .gpio       = -EINVAL,
    .enabled_at_boot = 0,
    .init_data  = &stamp_avdd_reg_init_data,
};
static struct platform_device brd_voltage_regulator = {
    .name       = "reg-fixed-voltage",
    .id     = -1,
    .num_resources  = 0,
    .dev        = {
        .platform_data  = &stamp_vdd_pdata,
    },
};
## endif
```

``` {.c}
static struct platform_device *board_devices[] __initdata = {
# if defined(CONFIG_REGULATOR_FIXED_VOLTAGE) || defined(CONFIG_REGULATOR_FIXED_VOLTAGE_MODULE)
    &brd_voltage_regulator
## endif
};
```

``` {.c}
static int __init board_init(void)
{
    [--snip--]

    platform_add_devices(board_devices, ARRAY_SIZE(board_devices));

    [--snip--]

    return 0;
}
arch_initcall(board_init);
```

![](page>software/linux/docs/platform_and_bus_model#Declaring SPI slave devices&firstseconly&noeditbtn)

Depending on the converter IC used, you may need to set the modalias accordingly, matching your part name.
It may also required to adjust max\_speed\_hz. Please consult the datasheet, for maximum spi clock supported by the device in question.

``` {.c}
static struct spi_board_info board_spi_board_info[] __initdata = {
## if defined(CONFIG_AD5360_SPI) || \
    defined(CONFIG_AD5360_SPI_MODULE)
    {
        /* the modalias must be the same as spi device driver name */
        .modalias = "ad5360", /* Name of spi_driver for this device */
        .max_speed_hz = 1000000,     /* max spi clock (SCK) speed in HZ */
        .bus_num = 0, /* Framework bus number */
        .chip_select = 3, /* Framework chip select */
        .mode = SPI_MODE_1,
    },
## endif
};
```

``` {.c}
static int __init board_init(void)
{
    [--snip--]

    spi_register_board_info(board_spi_board_info, ARRAY_SIZE(board_spi_board_info));

    [--snip--]

    return 0;
}
arch_initcall(board_init);
```

Adding Linux driver support
===========================

Configure kernel with \"make menuconfig\" (alternatively use \"make xconfig\" or
\"make qconfig\")

:::{NOTE} <!-- ATTRS: round="" help\="" -->

The AD5360 Driver depends on **CONFIG\_SPI**

:::


```{=markdown}
```
Linux Kernel Configuration
    Device Drivers  --->
        ...
        <*>     Industrial I/O support --->
            --- Industrial I/O support
            ...
            Digital to analog converters  ---> 
                ...
                <*>  Analog Devices Analog Devices AD5360/61/62/63/70/71/73 DAC driver
                ...
            ...
        ...

```
```
Hardware configuration
======================

Driver testing
==============

![iio\_snippets\#iio device files&noheader&firstseconly&noeditbtn](/page>software/linux/docs/iio/iio_snippets#iio device files&noheader&firstseconly&noeditbtn)

:::{NOTE} <!-- ATTRS: box="" bggreen\="" -->
:::{HINT} <!-- ATTRS: info\="" -->
This specifies any shell prompt running on the target
:::

```bash
root:/\> **cd /sys/bus/iio/devices/**
root:/sys/bus/iio/devices\> ls
iio:device0

root:/sys/bus/iio/devices\> **cd iio:device0**

root:/sys/devices/platform/bfin-spi.0/spi0.3/iio:device0\> **ls -l**
-r\--r\--r\-- 1 root root 4096 Jan 2 21:54 dev
-r\--r\--r\-- 1 root root 4096 Jan 2 21:54 name
-rw-r\--r\-- 1 root root 4096 Jan 2 21:54 out\_voltage0\_calibbias
-rw-r\--r\-- 1 root root 4096 Jan 2 21:54 out\_voltage0\_calibscale
-rw-r\--r\-- 1 root root 4096 Jan 2 21:54 out\_voltage0\_offset
-rw-r\--r\-- 1 root root 4096 Jan 2 21:54 out\_voltage0\_raw
-rw-r\--r\-- 1 root root 4096 Jan 2 21:54 out\_voltage0\_scale
-rw-r\--r\-- 1 root root 4096 Jan 2 21:54 out\_voltage10\_calibbias
-rw-r\--r\-- 1 root root 4096 Jan 2 21:54 out\_voltage10\_calibscale
-rw-r\--r\-- 1 root root 4096 Jan 2 21:54 out\_voltage10\_offset
-rw-r\--r\-- 1 root root 4096 Jan 2 21:54 out\_voltage10\_raw
-rw-r\--r\-- 1 root root 4096 Jan 2 21:54 out\_voltage10\_scale
\...
-rw-r\--r\-- 1 root root 4096 Jan 2 21:54 out\_voltage\_powerdown
drwxr-xr-x 2 root root 0 Jan 2 21:54 power
lrwxrwxrwx 1 root root 0 Jan 2 21:54 subsystem -\> ../../../../../bus/iio
-rw-r\--r\-- 1 root root 4096 Jan 2 21:54 uevent
```
:::


##### Show device name

:::{NOTE} <!-- ATTRS: box="" bggreen\="" -->
:::{HINT} <!-- ATTRS: info\="" -->
This specifies any shell prompt running on the target
:::

```bash
root:/sys/devices/platform/bfin-spi.0/spi0.3/iio:device0\> **cat name**
ad5360
```
:::


##### Show scale

**Description:**\
/sys/bus/iio/devices/iio:deviceX/out\_voltageY\_scale\
scale to be applied to out\_voltage0\_raw in order to obtain the measured voltage in millivolts.

:::{NOTE} <!-- ATTRS: box="" bggreen\="" -->
:::{HINT} <!-- ATTRS: info\="" -->
This specifies any shell prompt running on the target
:::

```bash
root:/sys/devices/platform/bfin-spi.0/spi0.3/iio:device0\> **cat out\_voltage0\_scale**
0.038140
```
:::


##### Set channel Y output voltage

**Description:**\
/sys/bus/iio/devices/iio:deviceX/out\_voltageY\_raw\
Raw (unscaled, no bias etc.) output voltage for
channel Y.

:::{NOTE} <!-- ATTRS: box="" bggreen\="" -->
:::{HINT} <!-- ATTRS: info\="" -->
This specifies any shell prompt running on the target
:::

```bash
root:/sys/devices/platform/bfin-spi.0/spi0.3/iio:device0\> **echo 10000 \> out\_voltage0\_raw**
```
:::


**U** = *out\_voltage0\_raw \* out\_voltage0\_scale* = 10000 \* 0,038140 *mV* = **381,14 *mV***

##### Calibrate channel Y gain

**Description:**\
/sys/bus/iio/devices/iio:deviceX/out\_voltageY\_calibscale\
Each channel has an adjustable gain which can be used to calibrate the channel\'s scale and compensate for full-scale errors. The default value is 65535.

If scale calibration is used the following formula can be used calculate the output voltage:
**U** = *( ( out\_voltageY\_raw \* ( out\_voltageY\_calibscale + 1 ) ) / 2\^16 - out\_voltageY\_calibbias ) \* out\_voltageY\_scale*

##### Calibrate channel Y offset

**Description:**\
/sys/bus/iio/devices/iio:deviceX/out\_voltageY\_calibbias\
Each channel has an adjustable offset which can be used to calibrate the channel\'s offset and compensate for zero-scale errors. The default value is 0.

If offset calibration is used the following formula can be used calculate the output voltage:
**U** = *( ( out\_voltageY\_raw \* ( out\_voltageY\_calibscale + 1 ) ) / 2\^16 - out\_voltageY\_calibbias ) \* out\_voltageY\_scale*

##### Enable power down mode for the device

/sys/bus/iio/devices/iio:deviceX/out\_voltage\_powerdown

**Description:**\
Writing 1 causes the device to enter power down mode. Clearing returns to
normal operation.

:::{NOTE} <!-- ATTRS: box="" bggreen\="" -->
:::{HINT} <!-- ATTRS: info\="" -->
This specifies any shell prompt running on the target
:::

```bash
root:/sys/devices/platform/bfin-spi.0/spi0.3/iio:device0\> **echo 1 \> out\_voltage\_powerdown**
root:/sys/devices/platform/bfin-spi.0/spi0.3/iio:device0\> **cat out\_voltage\_powerdown**
1
root:/sys/devices/platform/bfin-spi.0/spi0.3/iio:device0\> **echo 0 \> out\_voltage\_powerdown**
root:/sys/devices/platform/bfin-spi.0/spi0.3/iio:device0\> **cat out\_voltage\_powerdown**
0
```
:::


More Information
================

![iio\_snippets\#iio pointers&noheader&firstseconly&noeditbtn](/page>software/linux/docs/iio/iio_snippets#iio pointers&noheader&firstseconly&noeditbtn)
