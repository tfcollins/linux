---
wiki-source: https://wiki.analog.com/resources/tools-software/linux-drivers/iio-dac/ad5064
title: AD5669R: OCTAL, 16-BIT, I2C Voltage-Output denseDAC with 5 ppm/Â°C On-Chip Reference
---

AD5064 IIO Quad-Channel DAC Linux Driver
========================================

# Supported Devices

-   [AD5024](https://www.google.com/search?q=AD5024&btnI=lucky)
-   [AD5025](https://www.google.com/search?q=AD5025&btnI=lucky)
-   [AD5044](https://www.google.com/search?q=AD5044&btnI=lucky)
-   [AD5045](https://www.google.com/search?q=AD5045&btnI=lucky)
-   [AD5064](https://www.google.com/search?q=AD5064&btnI=lucky)
-   [AD5064-1](https://www.google.com/search?q=AD5064&btnI=lucky)
-   [AD5065](https://www.google.com/search?q=AD5065&btnI=lucky)
-   [AD5625](https://www.google.com/search?q=AD5625&btnI=lucky), (Upstream v4.6+)
-   [AD5625R](https://www.google.com/search?q=AD5625R&btnI=lucky), (Upstream v4.6+)
-   [AD5627](https://www.google.com/search?q=AD5627&btnI=lucky), (Upstream v4.6+)
-   [AD5627R](https://www.google.com/search?q=AD5627R&btnI=lucky), (Upstream v4.6+)
-   [AD5628](https://www.google.com/search?q=AD5628&btnI=lucky)
-   [AD5629R](https://www.google.com/search?q=AD5629R&btnI=lucky)
-   [AD5645R](https://www.google.com/search?q=AD5645R&btnI=lucky), (Upstream v4.6+)
-   [AD5647R](https://www.google.com/search?q=AD5647R&btnI=lucky), (Upstream v4.6+)
-   [AD5648](https://www.google.com/search?q=AD5648&btnI=lucky)
-   [AD5665](https://www.google.com/search?q=AD5665&btnI=lucky), (Upstream v4.6+)
-   [AD5665R](https://www.google.com/search?q=AD5665R&btnI=lucky), (Upstream v4.6+)
-   [AD5666](https://www.google.com/search?q=AD5666&btnI=lucky)
-   [AD5667](https://www.google.com/search?q=AD5667&btnI=lucky), (Upstream v4.6+)
-   [AD5667R](https://www.google.com/search?q=AD5667R&btnI=lucky), (Upstream v4.6+)
-   [AD5668](https://www.google.com/search?q=AD5668&btnI=lucky)
-   [AD5669R](https://www.google.com/search?q=AD5669R&btnI=lucky)
-   [LTC2606](https://www.google.com/search?q=LTC2606&btnI=lucky), (Upstream v4.5+)
-   [LTC2607](https://www.google.com/search?q=LTC2607&btnI=lucky), (Upstream v4.5+)
-   [LTC2609](https://www.google.com/search?q=LTC2609&btnI=lucky), (Upstream v4.5+)
-   [LTC2616](https://www.google.com/search?q=LTC2616&btnI=lucky), (Upstream v4.5+)
-   [LTC2617](https://www.google.com/search?q=LTC2617&btnI=lucky), (Upstream v4.5+)
-   [LTC2619](https://www.google.com/search?q=LTC2619&btnI=lucky), (Upstream v4.5+)
-   [LTC2626](https://www.google.com/search?q=LTC2626&btnI=lucky), (Upstream v4.5+)
-   [LTC2627](https://www.google.com/search?q=LTC2627&btnI=lucky), (Upstream v4.5+)
-   [LTC2629](https://www.google.com/search?q=LTC2629&btnI=lucky), (Upstream v4.5+)

#### Reference Circuits

-   [CN0182](https://www.google.com/search?q=CN0182&btnI=lucky)
-   [CN0183](https://www.google.com/search?q=CN0183&btnI=lucky)

#### Evaluation Boards

-   [EVAL-AD5064EBZ](https://www.google.com/search?q=EVAL-AD5064EBZ&btnI=lucky)
-   [EVAL-AD5064-1EBZ](https://www.google.com/search?q=EVAL-AD5064-1EBZ&btnI=lucky)
-   [EVAL-AD5629RSDZ](https://www.google.com/search?q=EVAL-AD5629RSDZ&btnI=lucky)
-   [EVAL-AD5666EBZ](https://www.google.com/search?q=EVAL-AD5666EBZ&btnI=lucky)
-   [EVAL-AD5668SDRZ](https://www.google.com/search?q=EVAL-AD5668SDRZ&btnI=lucky)
-   [EVAL-AD5668SDCZ](https://www.google.com/search?q=EVAL-AD5668SDCZ&btnI=lucky)
-   [EVAL-AD5669RSDZ](https://www.google.com/search?q=EVAL-AD5669RSDZ&btnI=lucky)
-   PMOD-DA4

#### Description

This is a Linux industrial I/O ([IIO](/software/linux/docs/iio/iio)) subsystem driver, targeting multi-channel serial interface DACs.
The industrial I/O subsystem provides a unified framework for drivers for many different types of converters and sensors using a number of different physical interfaces (i2c, spi, etc).
See [IIO](/software/linux/docs/iio/iio) for more information.

Source Code
-----------

#### Status

<table>
<thead>
<tr class="header">
<th>Source</th>
<th>Mainlined?</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><a href="https://www.google.com/search?q=drivers/iio/dac/ad5064.c&amp;btnI=lucky">git</a></td>
<td><a href="https://www.google.com/search?q=drivers/iio/dac/ad5064.c&amp;btnI=lucky">Yes</a></td>
</tr>
</tbody>
</table>

#### Files

<table>
<thead>
<tr class="header">
<th>Function</th>
<th>File</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>driver</td>
<td><a href="https://www.google.com/search?q=drivers/iio/dac/ad5064.c&amp;btnI=lucky">drivers/iio/dac/ad5064.c</a></td>
</tr>
</tbody>
</table>

Example platform device initialization
--------------------------------------

#### Specifying reference voltage via the regulator framework

Below example specifies a 2.5 Volt reference for the SPI device 3 on SPI-Bus 0. (**spi0.3**)
In this example all 4 reference voltage are supplied by the same regulator.

``` {.c}
## if defined(CONFIG_REGULATOR_FIXED_VOLTAGE) || defined(CONFIG_REGULATOR_FIXED_VOLTAGE_MODULE)
static struct regulator_consumer_supply ad5064_consumer_supplies[] = {
    REGULATOR_SUPPLY("vrefA", "spi0.3"),
    REGULATOR_SUPPLY("vrefB", "spi0.3"),
    REGULATOR_SUPPLY("vrefC", "spi0.3"),
    REGULATOR_SUPPLY("vrefD", "spi0.3"),
};

static struct regulator_init_data stamp_avdd_reg_init_data = {
    .constraints    = {
        .name   = "2V5",
        .valid_ops_mask = REGULATOR_CHANGE_STATUS,
    },
    .consumer_supplies = ad5624_consumer_supplies,
    .num_consumer_supplies = ARRAY_SIZE(ad5624_consumer_supplies),
};

static struct fixed_voltage_config stamp_vdd_pdata = {
    .supply_name    = "board-2V5",
    .microvolts = 2500000,
    .gpio       = -EINVAL,
    .enabled_at_boot = 0,
    .init_data  = &stamp_avdd_reg_init_data,
};
static struct platform_device brd_voltage_regulator = {
    .name       = "reg-fixed-voltage",
    .id     = -1,
    .num_resources  = 0,
    .dev        = {
        .platform_data  = &stamp_vdd_pdata,
    },
};
## endif
```

``` {.c}
static struct platform_device *board_devices[] __initdata = {
## if defined(CONFIG_REGULATOR_FIXED_VOLTAGE) || defined(CONFIG_REGULATOR_FIXED_VOLTAGE_MODULE)
    &brd_voltage_regulator
## endif
};
```

``` {.c}
static int __init board_init(void)
{
    [--snip--]

    platform_add_devices(board_devices, ARRAY_SIZE(board_devices));

    [--snip--]

    return 0;
}
arch_initcall(board_init);
```

![](page>software/linux/docs/platform_and_bus_model#Declaring SPI slave devices&firstseconly&noeditbtn)

Depending on the converter IC used, you may need to set the modalias accordingly, matching your part name.
It may also required to adjust max_speed_hz. Please consult the datasheet, for maximum spi clock supported by the device in question.

``` {.c}
static struct spi_board_info board_spi_board_info[] __initdata = {
## if defined(CONFIG_AD5064_SPI) || 
    defined(CONFIG_AD5064_SPI_MODULE)
    {
        /* the modalias must be the same as spi device driver name */
        .modalias = "ad5064", /* Name of spi_driver for this device */
        .max_speed_hz = 1000000,     /* max spi clock (SCK) speed in HZ */
        .bus_num = 0, /* Framework bus number */
        .chip_select = 3, /* Framework chip select */
        .mode = SPI_MODE_1,
    },
## endif
};
```

``` {.c}
static int __init board_init(void)
{
    [--snip--]

    spi_register_board_info(board_spi_board_info, ARRAY_SIZE(board_spi_board_info));

    [--snip--]

    return 0;
}
arch_initcall(board_init);
```

Adding Linux driver support
---------------------------

Configure kernel with "make menuconfig" (alternatively use "make xconfig" or
"make qconfig")

:::{NOTE} <!-- ATTRS: round="" help="" -->

The AD5064 Driver depends on **CONFIG_SPI**

:::


    Linux Kernel Configuration
        Device Drivers  --->
            ...
            <*>     Industrial I/O support --->
                --- Industrial I/O support
                ...
                Digital to analog converters  ---> 
                    ...
                    <*>  Analog Devices AD5064 and similar multi-channel DAC driver
                    ...
                ...
            ...

Hardware configuration
----------------------

Driver testing
--------------

![iio_snippets#iio device files&noheader&firstseconly&noeditbtn](/page>software/linux/docs/iio/iio_snippets#iio device files&noheader&firstseconly&noeditbtn)

:::{NOTE} <!-- ATTRS: box="" bggreen="" -->
:::{HINT} <!-- ATTRS: info="" -->
This specifies any shell prompt running on the target
:::

```bash
root:/> **cd /sys/bus/iio/devices/**
root:/sys/bus/iio/devices> ls
iio:device0

root:/sys/bus/iio/devices> **cd iio:device0**

root:/sys/devices/platform/bfin-spi.0/spi0.3/iio:device0> **ls -l**
-r--r--r-- 1 root root 4096 Jan 1 03:29 dev
-r--r--r-- 1 root root 4096 Jan 1 03:29 name
-rw-r--r-- 1 root root 4096 Jan 1 03:29 out_voltage0_powerdown
-rw-r--r-- 1 root root 4096 Jan 1 03:29 out_voltage0_powerdown_mode
-rw-r--r-- 1 root root 4096 Jan 1 03:29 out_voltage0_raw
-rw-r--r-- 1 root root 4096 Jan 1 03:29 out_voltage0_scale
-rw-r--r-- 1 root root 4096 Jan 1 03:29 out_voltage1_powerdown
-rw-r--r-- 1 root root 4096 Jan 1 03:29 out_voltage1_powerdown_mode
-rw-r--r-- 1 root root 4096 Jan 1 03:29 out_voltage1_raw
-rw-r--r-- 1 root root 4096 Jan 1 03:29 out_voltage1_scale
-rw-r--r-- 1 root root 4096 Jan 1 03:29 out_voltage2_powerdown
-rw-r--r-- 1 root root 4096 Jan 1 03:29 out_voltage2_powerdown_mode
-rw-r--r-- 1 root root 4096 Jan 1 03:29 out_voltage2_raw
-rw-r--r-- 1 root root 4096 Jan 1 03:29 out_voltage2_scale
-rw-r--r-- 1 root root 4096 Jan 1 03:29 out_voltage3_powerdown
-rw-r--r-- 1 root root 4096 Jan 1 03:29 out_voltage3_powerdown_mode
-rw-r--r-- 1 root root 4096 Jan 1 03:29 out_voltage3_raw
-rw-r--r-- 1 root root 4096 Jan 1 03:29 out_voltage3_scale
-r--r--r-- 1 root root 4096 Jan 1 03:29 out_voltage_powerdown_mode_available
drwxr-xr-x 2 root root 0 Jan 3 16:50 power
lrwxrwxrwx 1 root root 0 Jan 3 16:50 subsystem -> ../../../../../bus/iio
-rw-r--r-- 1 root root 4096 Jan 3 16:50 uevent
```
:::


The number of channels depends on the chip model.

###### Show device name

:::{NOTE} <!-- ATTRS: box="" bggreen="" -->
:::{HINT} <!-- ATTRS: info="" -->
This specifies any shell prompt running on the target
:::

```bash
root:/sys/devices/platform/bfin-spi.0/spi0.3/iio:device0> **cat name**
ad5064
```
:::


###### Show scale

**Description:**
/sys/bus/iio/devices/iio:deviceX/out_voltageY_scale
scale to be applied to out_voltage0_raw in order to obtain the measured voltage in millivolts.

:::{NOTE} <!-- ATTRS: box="" bggreen="" -->
:::{HINT} <!-- ATTRS: info="" -->
This specifies any shell prompt running on the target
:::

```bash
root:/sys/devices/platform/bfin-spi.0/spi0.3/iio:device0> **cat out_voltage0_scale**
0.038140
```
:::


###### Set channel Y output voltage

**Description:**
/sys/bus/iio/devices/iio:deviceX/out_voltageY_raw
Raw (unscaled, no bias etc.) output voltage for
channel Y.

:::{NOTE} <!-- ATTRS: box="" bggreen="" -->
:::{HINT} <!-- ATTRS: info="" -->
This specifies any shell prompt running on the target
:::

```bash
root:/sys/devices/platform/bfin-spi.0/spi0.3/iio:device0> **echo 10000 > out_voltage0_raw**
```
:::


**U** = *out_voltage0_raw * out_voltage0_scale* = 10000 * 0,038140 *mV* = **381,14 *mV***

###### List available power down modes

/sys/bus/iio/devices/iio:deviceX/out_voltage_powerdown_mode_available

**Description:**
Lists all available output power down modes.

:::{NOTE} <!-- ATTRS: box="" bggreen="" -->
:::{HINT} <!-- ATTRS: info="" -->
This specifies any shell prompt running on the target
:::

```bash
root:/sys/devices/platform/bfin-spi.0/spi0.3/iio:device0> **cat out_voltage_powerdown_mode_available**
1kohm_to_gnd 100kohm_to_gnd three_state
```
:::


###### Set power down mode

/sys/bus/iio/devices/iio:deviceX/out_voltage_powerdown_mode

**Description:**
Specifies the output power down mode.
DAC output stage is disconnected from the amplifier and

<table>
<tbody>
<tr class="odd">
<td>1kohm_to_gnd</td>
<td>connected to ground via an 1kOhm resistor</td>
</tr>
<tr class="even">
<td>100kohm_to_gnd</td>
<td>connected to ground via an 100kOhm resistor</td>
</tr>
<tr class="odd">
<td>three_state</td>
<td>left floating</td>
</tr>
</tbody>
</table>

For a list of available output power down options read
out_voltage_powerdown_mode_available.

:::{NOTE} <!-- ATTRS: box="" bggreen="" -->
:::{HINT} <!-- ATTRS: info="" -->
This specifies any shell prompt running on the target
:::

```bash
root:/sys/devices/platform/bfin-spi.0/spi0.3/iio:device0> **echo three_state > out_voltage_powerdown_mode**
root:/sys/devices/platform/bfin-spi.0/spi0.3/iio:device0> **cat out_voltage_powerdown_mode**
three_state
```
:::


###### Enable power down mode on output Y

/sys/bus/iio/devices/iio:deviceX/out_voltageY_powerdown

**Description:**
Writing 1 causes output Y to enter the power down mode specified
by the corresponding out_voltageY_powerdown_mode. Clearing returns to
normal operation.

:::{NOTE} <!-- ATTRS: box="" bggreen="" -->
:::{HINT} <!-- ATTRS: info="" -->
This specifies any shell prompt running on the target
:::

```bash
root:/sys/devices/platform/bfin-spi.0/spi0.3/iio:device0> **echo 1 > out_voltage0_powerdown**
root:/sys/devices/platform/bfin-spi.0/spi0.3/iio:device0> **cat out_voltage0_powerdown**
1
root:/sys/devices/platform/bfin-spi.0/spi0.3/iio:device0> **echo 0 > out_voltage0_powerdown**
root:/sys/devices/platform/bfin-spi.0/spi0.3/iio:device0> **cat out_voltage0_powerdown**
0
```
:::


#### PMOD-DA4

The PMOD-DA4 is a PMOD board made by Digilent Inc. which features the AD5628

The following example shows how to connect the PMOD-DA4 to a Blackfin BF537-STAMP board.

##### Hardware configuration

![](/resources/tools-software/linux-drivers/iio-dac/pmodda4.jpg){width="300"}

<table>
<thead>
<tr class="header">
<th>BF537-STAMP (P9) SPI header</th>
<th></th>
<th>PMOD-DA4</th>
<th></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>PIN</td>
<td>Function</td>
<td>PIN</td>
<td>Function</td>
</tr>
<tr class="even">
<td>2</td>
<td>(+3.3V)</td>
<td>6</td>
<td>VDD</td>
</tr>
<tr class="odd">
<td>5</td>
<td>SPI_MOSI</td>
<td>2</td>
<td>DIN</td>
</tr>
<tr class="even">
<td>8</td>
<td>SPI_SCK</td>
<td>4</td>
<td>SCLK</td>
</tr>
<tr class="odd">
<td>10</td>
<td>SPI_SS</td>
<td>1</td>
<td>SYNC</td>
</tr>
<tr class="even">
<td>20</td>
<td>GND</td>
<td>5</td>
<td>GND</td>
</tr>
</tbody>
</table>

More Information
----------------

![iio_snippets#iio pointers&noheader&firstseconly&noeditbtn](/page>software/linux/docs/iio/iio_snippets#iio pointers&noheader&firstseconly&noeditbtn)
