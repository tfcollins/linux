---
wiki-source: https://wiki.analog.com/resources/tools-software/linux-drivers/iio-dac/ad5504
title: AD5504: High Voltage, Quad Channel 12-Bit Voltage Output DAC
---

AD5504 IIO High Voltage ADC Linux Driver
========================================

Supported Devices
-----------------

-   [AD5504](https://www.google.com/search?q=AD5504&btnI=lucky)
-   [AD5501](https://www.google.com/search?q=AD5501&btnI=lucky)

Reference Circuits
------------------

-   [CN0193](https://www.google.com/search?q=CN0193&btnI=lucky)

Evaluation Boards
-----------------

-   [EVAL-AD5504EBZ](https://www.google.com/search?q=EVAL-AD5504EBZ&btnI=lucky)
-   [EVAL-AD5501EBZ](https://www.google.com/search?q=EVAL-AD5501EBZ&btnI=lucky)

Description
-----------

This is a Linux industrial I/O ([IIO](/software/linux/docs/iio/iio)) subsystem driver, targeting multi-channel serial interface DACs.
The industrial I/O subsystem provides a unified framework for drivers for many different types of converters and sensors using a number of different physical interfaces (i2c, spi, etc).
See [IIO](/software/linux/docs/iio/iio) for more information.

Source Code
===========

Status
------

<table>
<thead>
<tr class="header">
<th>Source</th>
<th>Mainlined?</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><a href="https://www.google.com/search?q=drivers/iio/dac/ad5504.c&amp;btnI=lucky">git</a></td>
<td><a href="https://www.google.com/search?q=drivers/iio/dac/ad5504.c&amp;btnI=lucky">Yes</a></td>
</tr>
</tbody>
</table>

Files
-----

<table>
<thead>
<tr class="header">
<th>Function</th>
<th>File</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>driver</td>
<td><a href="https://www.google.com/search?q=drivers/iio/dac/ad5504.c&amp;btnI=lucky">drivers/iio/dac/ad5504.c</a></td>
</tr>
<tr class="even">
<td>include</td>
<td><a href="https://www.google.com/search?q=drivers/iio/dac/ad5504.h&amp;btnI=lucky">drivers/iio/dac/ad5504.h</a></td>
</tr>
</tbody>
</table>

Example platform device initialization
======================================

![](page>software/linux/docs/platform_and_bus_model#Platform Data&noheader&firstseconly&noeditbtn)

The reference voltage may vary between boards and models. The platform\_data for the device\'s \"struct device\" holds this information.

``` {.c}
static struct ad5504_platform_data ad5504_pdata = {
    .vref_mv = 30000,
};
```

:::{NOTE} <!-- ATTRS: tip\="" -->

This driver supports also an alternative way of specifying the reference voltage, by using the Linux regulator framework.

:::


Specifying reference voltage via the regulator framework
--------------------------------------------------------

Below example specifies a 30 Volt reference for the SPI device 3 on SPI-Bus 0. (**spi0.3**)

``` {.c}
# if defined(CONFIG_REGULATOR_FIXED_VOLTAGE) || defined(CONFIG_REGULATOR_FIXED_VOLTAGE_MODULE)
static struct regulator_consumer_supply ad5504_consumer_supplies[] = {
    REGULATOR_SUPPLY("vcc", "spi0.3"),
};

static struct regulator_init_data stamp_avdd_reg_init_data = {
    .constraints    = {
        .name   = "30V0",
        .valid_ops_mask = REGULATOR_CHANGE_STATUS,
    },
    .consumer_supplies = ad5504_consumer_supplies,
    .num_consumer_supplies = ARRAY_SIZE(ad5504_consumer_supplies),
};

static struct fixed_voltage_config stamp_vdd_pdata = {
    .supply_name    = "board-30V0",
    .microvolts = 30000000,
    .gpio       = -EINVAL,
    .enabled_at_boot = 0,
    .init_data  = &stamp_avdd_reg_init_data,
};
static struct platform_device brd_voltage_regulator = {
    .name       = "reg-fixed-voltage",
    .id     = -1,
    .num_resources  = 0,
    .dev        = {
        .platform_data  = &stamp_vdd_pdata,
    },
};
## endif
```

``` {.c}
static struct platform_device *board_devices[] __initdata = {
# if defined(CONFIG_REGULATOR_FIXED_VOLTAGE) || defined(CONFIG_REGULATOR_FIXED_VOLTAGE_MODULE)
    &brd_voltage_regulator,
## endif
};
```

``` {.c}
static int __init board_init(void)
{
    [--snip--]

    platform_add_devices(board_devices, ARRAY_SIZE(board_devices));

    [--snip--]

    return 0;
}
arch_initcall(board_init);
```

![](page>software/linux/docs/platform_and_bus_model#Declaring SPI slave devices&firstseconly&noeditbtn)

Depending on the converter IC used, you may need to set the modalias accordingly, matching your part name.
It may also required to adjust max\_speed\_hz. Please consult the datasheet, for maximum spi clock supported by the device in question.

``` {.c}
static struct spi_board_info board_spi_board_info[] __initdata = {
## if defined(CONFIG_AD5504) || \
    defined(CONFIG_AD5504_MODULE)
    {
        /* the modalias must be the same as spi device driver name */
        .modalias = "ad5504", /* Name of spi_driver for this device */
        .max_speed_hz = 1000000,     /* max spi clock (SCK) speed in HZ */
        .bus_num = 0, /* Framework bus number */
        .chip_select = 3, /* Framework chip select */
        .mode = SPI_MODE_1,
        .irq = IRQ_PF2,
    },
## endif
};
```

``` {.c}
static int __init board_init(void)
{
    [--snip--]

    spi_register_board_info(board_spi_board_info, ARRAY_SIZE(board_spi_board_info));

    [--snip--]

    return 0;
}
arch_initcall(board_init);
```

Adding Linux driver support
===========================

Configure kernel with \"make menuconfig\" (alternatively use \"make xconfig\" or
\"make qconfig\")

:::{NOTE} <!-- ATTRS: round="" help\="" -->

The AD5504 Driver depends on **CONFIG\_SPI**

:::


```{=markdown}
```
Linux Kernel Configuration
    Device Drivers  --->
        <*>     Industrial I/O support --->
            --- Industrial I/O support

                  *** Digital to analog convertors ***
            [--snip--]
            <*>   Analog Devices AD5504/AD5501 DAC spi driver
            [--snip--]

```
```
Hardware configuration
======================

![ad5504\_eval\_lr.jpg](/software/driver/linux/ad5504_eval_lr.jpg){width="600"}

Driver testing
==============

![iio\_snippets\#iio device files&noheader&firstseconly&noeditbtn](/page>software/linux/docs/iio/iio_snippets#iio device files&noheader&firstseconly&noeditbtn)

:::{NOTE} <!-- ATTRS: box="" bggreen\="" -->
:::{HINT} <!-- ATTRS: info\="" -->
This specifies any shell prompt running on the target
:::

```bash
root:/\> **cd /sys/bus/iio/devices/**
root:/sys/bus/iio/devices\> ls
iio:device0 iio:device0:event0

root:/sys/bus/iio/devices\> **cd iio:device0**

root:/sys/devices/platform/bfin-spi.0/spi0.3/iio:device0\> **ls -l**
-r\--r\--r\-- 1 root root 4096 Jan 3 14:39 name
-rw-r\--r\-- 1 root root 4096 Jan 3 14:39 out\_voltage0\_powerdown
-rw-r\--r\-- 1 root root 4096 Jan 3 14:39 out\_voltage0\_raw
-rw-r\--r\-- 1 root root 4096 Jan 3 14:39 out\_voltage1\_powerdown
-rw-r\--r\-- 1 root root 4096 Jan 3 14:39 out\_voltage1\_raw
-rw-r\--r\-- 1 root root 4096 Jan 3 14:39 out\_voltage2\_powerdown
-rw-r\--r\-- 1 root root 4096 Jan 3 14:39 out\_voltage2\_raw
-rw-r\--r\-- 1 root root 4096 Jan 3 14:39 out\_voltage3\_powerdown
-rw-r\--r\-- 1 root root 4096 Jan 3 14:39 out\_voltage3\_raw
-rw-r\--r\-- 1 root root 4096 Jan 3 14:39 out\_voltage\_powerdown\_mode
-r\--r\--r\-- 1 root root 4096 Jan 3 14:39 out\_voltage\_powerdown\_mode\_available
-r\--r\--r\-- 1 root root 4096 Jan 3 14:39 out\_voltage\_scale
lrwxrwxrwx 1 root root 0 Jan 3 14:39 subsystem -\> ../../../../../bus/iio
-rw-r\--r\-- 1 root root 4096 Jan 3 14:39 uevent
```
:::


##### Show device name

:::{NOTE} <!-- ATTRS: box="" bggreen\="" -->
:::{HINT} <!-- ATTRS: info\="" -->
This specifies any shell prompt running on the target
:::

```bash
root:/sys/devices/platform/bfin-spi.0/spi0.3/iio:device0\> **cat name**
ad5504
```
:::


##### Show scale

**Description:**\
scale to be applied to out\_voltage0\_raw in order to obtain the measured voltage in millivolts.

:::{NOTE} <!-- ATTRS: box="" bggreen\="" -->
:::{HINT} <!-- ATTRS: info\="" -->
This specifies any shell prompt running on the target
:::

```bash
root:/sys/devices/platform/bfin-spi.0/spi0.3/iio:device0\> **cat out\_voltage\_scale**
7.324
```
:::


##### Set channel Y output voltage

**Description:**\
/sys/bus/iio/devices/iio:deviceX/out\_voltageY\_raw\
Raw (unscaled, no bias etc.) output voltage for
channel Y.

:::{NOTE} <!-- ATTRS: box="" bggreen\="" -->
:::{HINT} <!-- ATTRS: info\="" -->
This specifies any shell prompt running on the target
:::

```bash
root:/sys/devices/platform/bfin-spi.0/spi0.3/iio:device0\> echo 1234 \> out0\_raw
```
:::


**U** = *out\_voltage0\_raw \* out\_voltage\_scale* = 1234 \* 7.324 = **9037,816 *mV***

##### List available power down modes

/sys/bus/iio/devices/deviceX/out\_voltage\_powerdown\_mode\_available

**Description:**\
Lists all available output power down modes.

:::{NOTE} <!-- ATTRS: box="" bggreen\="" -->
:::{HINT} <!-- ATTRS: info\="" -->
This specifies any shell prompt running on the target
:::

```bash
root:/sys/devices/platform/bfin-spi.0/spi0.3/iio:device0\> **cat out\_voltage\_powerdown\_mode\_available**
20kohm\_to\_gnd three\_state
```
:::


##### Set power down mode

/sys/bus/iio/devices/iio:deviceX/out\_voltage\_powerdown\_mode

**Description:**\
Specifies the output power down mode.
DAC output stage is disconnected from the amplifier and\

<table>
<tbody>
<tr class="odd">
<td>20kohm_to_gnd</td>
<td>connected to ground via an 20kOhm resistor</td>
</tr>
<tr class="even">
<td>three_state</td>
<td>left floating</td>
</tr>
</tbody>
</table>

For a list of available output power down options read
out\_voltageX\_powerdown\_mode\_available.

:::{NOTE} <!-- ATTRS: box="" bggreen\="" -->
:::{HINT} <!-- ATTRS: info\="" -->
This specifies any shell prompt running on the target
:::

```bash
root:/sys/devices/platform/bfin-spi.0/spi0.3/iio:device0\> **echo three\_state \> out\_voltage\_powerdown\_mode**
root:/sys/devices/platform/bfin-spi.0/spi0.3/iio:device0\> **cat out\_voltage\_powerdown\_mode**
three\_state
```
:::


##### Enable power down mode on output Y

/sys/bus/iio/devices/iio:deviceX/out\_voltageY\_powerdown

**Description:**\
Writing 1 causes output Y to enter the power down mode specified
by the corresponding out\_voltageY\_powerdown\_mode. Clearing returns to
normal operation. Y may be suppressed if all outputs are
controlled together.

:::{NOTE} <!-- ATTRS: box="" bggreen\="" -->
:::{HINT} <!-- ATTRS: info\="" -->
This specifies any shell prompt running on the target
:::

```bash
root:/sys/devices/platform/bfin-spi.0/spi0.3/iio:device0\> **echo 1 \> out\_voltage0\_powerdown**
root:/sys/devices/platform/bfin-spi.0/spi0.3/iio:device0\> **cat out\_voltage0\_powerdown**
1
root:/sys/devices/platform/bfin-spi.0/spi0.3/iio:device0\> **echo 0 \> out\_voltage0\_powerdown**
root:/sys/devices/platform/bfin-spi.0/spi0.3/iio:device0\> **cat out\_voltage0\_powerdown**
0
```
:::


More Information
================

![iio\_snippets\#iio pointers&noheader&firstseconly&noeditbtn](/page>software/linux/docs/iio/iio_snippets#iio pointers&noheader&firstseconly&noeditbtn)
