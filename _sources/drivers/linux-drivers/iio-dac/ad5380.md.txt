---
wiki-source: https://wiki.analog.com/resources/tools-software/linux-drivers/iio-dac/ad5380
title: AD5392: 8-Channel 14-Bit 3 V/5 V Single-Supply Voltage-Output DAC
---

# AD5380 IIO Multi-Channel DAC Linux Driver

#### Supported Devices

-   [AD5380](adi>AD5380)
-   [AD5381](adi>AD5381)
-   [AD5382](adi>AD5382)
-   [AD5383](adi>AD5383)
-   [AD5384](adi>AD5384)
-   [AD5390](adi>AD5390)
-   [AD5391](adi>AD5391)
-   [AD5392](adi>AD5392)

#### Evaluation Boards

-   [EVAL-AD5380EBZ](adi>EVAL-AD5380EBZ)
-   [EVAL-AD5382EBZ](adi>EVAL-AD5382EBZ)
-   [EVAL-AD5390EBZ](adi>EVAL-AD5390EBZ)
-   [EVAL-AD5391EBZ](adi>EVAL-AD5391EBZ)
-   [EVAL-AD5392EBZ](adi>EVAL-AD5392EBZ)

#### Description

This is a Linux industrial I/O ([IIO](/software/linux/docs/iio/iio)) subsystem driver, targeting multi-channel serial interface DACs.
The industrial I/O subsystem provides a unified framework for drivers for many different types of converters and sensors using a number of different physical interfaces (i2c, spi, etc).
See [IIO](/software/linux/docs/iio/iio) for more information.

### Source Code

#### Status

<table>
<thead>
<tr class="header">
<th>Source</th>
<th>Mainlined?</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><a href="git.linux.org&gt;drivers/iio/dac/ad5380.c">git</a></td>
<td><a href="git.linux.org&gt;drivers/iio/dac/ad5380.c">Yes</a></td>
</tr>
</tbody>
</table>

#### Files

<table>
<thead>
<tr class="header">
<th>Function</th>
<th>File</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>driver</td>
<td><a href="git.linux.org&gt;drivers/iio/dac/ad5380.c">drivers/iio/dac/ad5380.c</a></td>
</tr>
</tbody>
</table>

### Example platform device initialization

#### Specifying reference voltage via the regulator framework

The AD538X/AD539X can either use an internal or an external reference voltage. To use an external reference voltage use the regulator framework to provide a regulator supply.
The supply should be called "vref".

Below example specifies a 2.5 Volt reference for the SPI device 3 on SPI-Bus 0. (**spi0.3**)

``` c
## if IS_ENABLED(CONFIG_REGULATOR_FIXED_VOLTAGE)
static struct regulator_consumer_supply ad5380_consumer_supplies[] = {
    REGULATOR_SUPPLY("vref", "spi0.3"),
};

static struct regulator_init_data stamp_avdd_reg_init_data = {
    .constraints    = {
        .name   = "2V5",
        .valid_ops_mask = REGULATOR_CHANGE_STATUS,
    },
    .consumer_supplies = ad5380_consumer_supplies,
    .num_consumer_supplies = ARRAY_SIZE(ad5380_consumer_supplies),
};

static struct fixed_voltage_config stamp_vdd_pdata = {
    .supply_name    = "board-2V5",
    .microvolts = 2500000,
    .gpio       = -EINVAL,
    .enabled_at_boot = 0,
    .init_data  = &stamp_avdd_reg_init_data,
};
static struct platform_device brd_voltage_regulator = {
    .name       = "reg-fixed-voltage",
    .id     = -1,
    .num_resources  = 0,
    .dev        = {
        .platform_data  = &stamp_vdd_pdata,
    },
};
## endif
```

``` c
static struct platform_device *board_devices[] __initdata = {
## if IS_ENABLED(CONFIG_REGULATOR_FIXED_VOLTAGE)
    &brd_voltage_regulator
## endif
};
```

``` c
static int __init board_init(void)
{
    [--snip--]

    platform_add_devices(board_devices, ARRAY_SIZE(board_devices));

    [--snip--]

    return 0;
}
arch_initcall(board_init);
```

![](page>software/linux/docs/platform_and_bus_model#Declaring SPI slave devices&firstseconly&noeditbtn)

Depending on the converter IC used, you may need to set the modalias accordingly, matching your part name.
It may also required to adjust max_speed_hz. Please consult the datasheet, for maximum spi clock supported by the device in question.

``` c
static struct spi_board_info board_spi_board_info[] __initdata = {
## if IS_ENABLED(CONFIG_AD5380)
    {
        /* the modalias must be the same as spi device driver name */
        .modalias = "ad5380-5", /* Name of spi_driver for this device */
        .max_speed_hz = 1000000,     /* max spi clock (SCK) speed in HZ */
        .bus_num = 0, /* Framework bus number */
        .chip_select = 3, /* Framework chip select */
        .mode = SPI_MODE_1,
    },
## endif
};
```

``` c
static int __init board_init(void)
{
    [--snip--]

    spi_register_board_info(board_spi_board_info, ARRAY_SIZE(board_spi_board_info));

    [--snip--]

    return 0;
}
arch_initcall(board_init);
```

![](page>software/linux/docs/platform_and_bus_model#Declaring I2C devices&firstseconly&noeditbtn)

Depending on the converter IC used, you may need to set the modalias accordingly, matching your part name.
:::{NOTE} <!-- ATTRS: round="" help="" -->
The part name needs a -3 or -5 depending on whether a 1.25V or 2.5V internal reference is used. E.g. "ad5380-5" or "ad5391-3".
:::


The I2C device id depends on the AD0 and AD1 pin settings and needs to be set according to your board setup.

<table>
<thead>
<tr class="header">
<th>AD1</th>
<th>AD0</th>
<th>I2C device id</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>0</td>
<td>0x54</td>
</tr>
<tr class="even">
<td>0</td>
<td>1</td>
<td>0x55</td>
</tr>
<tr class="odd">
<td>1</td>
<td>0</td>
<td>0x56</td>
</tr>
<tr class="even">
<td>1</td>
<td>1</td>
<td>0x57</td>
</tr>
</tbody>
</table>

In this example we assume ADDR0=0 and ADDR1=0.

``` c
static struct i2c_board_info __initdata bfin_i2c_board_info[] = {

    [--snip--]
    {
        I2C_BOARD_INFO("a5380", 0x38),
    },
    [--snip--]
}

```

``` c
static int __init stamp_init(void)
{
    [--snip--]
    i2c_register_board_info(0, bfin_i2c_board_info,
                ARRAY_SIZE(bfin_i2c_board_info));
    [--snip--]

    return 0;
}
arch_initcall(board_init);
```

### Adding Linux driver support

Configure kernel with "make menuconfig" (alternatively use "make xconfig" or
"make qconfig")

:::{NOTE} <!-- ATTRS: round="" help="" -->

The AD5380 Driver depends on **CONFIG_SPI_MASTER** or **CONFIG_I2C**

:::


    Linux Kernel Configuration
        Device Drivers  --->
            ...
            <*>     Industrial I/O support --->
                --- Industrial I/O support
                ...
                Digital to analog converters  ---> 
                    ...
                    <*>  Analog Devices AD5380/81/82/83/84/90/91/92 DAC driver
                    ...
                ...
            ...

### Hardware configuration

### Driver testing

![iio_snippets#iio device files&noheader&firstseconly&noeditbtn](/page>software/linux/docs/iio/iio_snippets#iio device files&noheader&firstseconly&noeditbtn)

:::{NOTE} <!-- ATTRS: box="" bggreen="" -->
:::{HINT} <!-- ATTRS: info="" -->
This specifies any shell prompt running on the target
:::

```bash
root:/> **cd /sys/bus/iio/devices/**
root:/sys/bus/iio/devices> ls
iio:device0

root:/sys/bus/iio/devices> **cd iio:device0**

root:/sys/devices/platform/bfin-spi.0/spi0.3/iio:device0> **ls -l**
-r--r--r-- 1 root root 4096 Jan 2 21:54 dev
-r--r--r-- 1 root root 4096 Jan 2 21:54 name
-rw-r--r-- 1 root root 4096 Jan 2 21:54 out_voltage0_calibbias
-rw-r--r-- 1 root root 4096 Jan 2 21:54 out_voltage0_calibscale
-rw-r--r-- 1 root root 4096 Jan 2 21:54 out_voltage0_raw
-rw-r--r-- 1 root root 4096 Jan 2 21:54 out_voltage10_calibbias
-rw-r--r-- 1 root root 4096 Jan 2 21:54 out_voltage10_calibscale
-rw-r--r-- 1 root root 4096 Jan 2 21:54 out_voltage10_raw
...
-rw-r--r-- 1 root root 4096 Jan 3 21:54 out_voltage9_calibbias
-rw-r--r-- 1 root root 4096 Jan 3 21:54 out_voltage9_calibscale
-rw-r--r-- 1 root root 4096 Jan 3 21:54 out_voltage9_raw
-rw-r--r-- 1 root root 4096 Jan 2 21:54 out_voltage_powerdown
-rw-r--r-- 1 root root 4096 Jan 3 21:54 out_voltage_powerdown_mode
-r--r--r-- 1 root root 4096 Jan 3 21:54 out_voltage_powerdown_mode_available
-rw-r--r-- 1 root root 4096 Jan 3 21:54 out_voltage_scale
drwxr-xr-x 2 root root 0 Jan 2 21:54 power
lrwxrwxrwx 1 root root 0 Jan 2 21:54 subsystem -> ../../../../../bus/iio
-rw-r--r-- 1 root root 4096 Jan 2 21:54 uevent
```
:::


###### Show device name

:::{NOTE} <!-- ATTRS: box="" bggreen="" -->
:::{HINT} <!-- ATTRS: info="" -->
This specifies any shell prompt running on the target
:::

```bash
root:/sys/devices/platform/bfin-spi.0/spi0.3/iio:device0> **cat name**
ad5380
```
:::


###### Show scale

**Description:**
/sys/bus/iio/devices/iio:deviceX/out_scale_raw
scale to be applied to out_voltageY_raw in order to obtain the measured voltage in millivolts.

:::{NOTE} <!-- ATTRS: box="" bggreen="" -->
:::{HINT} <!-- ATTRS: info="" -->
This specifies any shell prompt running on the target
:::

```bash
root:/sys/devices/platform/bfin-spi.0/spi0.3/iio:device0> **cat out_voltage_scale**
0.305000
```
:::


###### Set channel Y output voltage

**Description:**
/sys/bus/iio/devices/iio:deviceX/out_voltageY_raw
Raw (unscaled, no bias etc.) output voltage for
channel Y.

:::{NOTE} <!-- ATTRS: box="" bggreen="" -->
:::{HINT} <!-- ATTRS: info="" -->
This specifies any shell prompt running on the target
:::

```bash
root:/sys/devices/platform/bfin-spi.0/spi0.3/iio:device0> **echo 10000 > out_voltage0_raw**
```
:::


**U** = *out_voltage0_raw * out_voltage0_scale* = 10000 * 0,305000 *mV* = **305,00 *mV***

###### Calibrate channel Y gain

**Description:**
/sys/bus/iio/devices/iio:deviceX/out_voltageY_calibscale
Each channel has an adjustable gain which can be used to calibrate the channel's scale and compensate for full-scale errors. The default value is 16382. The minimum value is 0, the maximum value is 16383.

If scale calibration is used the following formula can be used calculate the output voltage:
**U** = *( ( out_voltageY_raw * ( out_voltageY_calibscale + 2) ) / 2^14 + out_voltageY_calibbias ) * out_voltageY_scale*

###### Calibrate channel Y offset

**Description:**
/sys/bus/iio/devices/iio:deviceX/out_voltageY_calibbias
Each channel has an adjustable offset which can be used to calibrate the channel's offset and compensate for zero-scale errors. The default value is 0. The minimum value is -8192, the maximum value is 8191.

If offset calibration is used the following formula can be used calculate the output voltage:
**U** = *( ( out_voltageY_raw * ( out_voltageY_calibscale + 2 ) ) / 2^14 + out_voltageY_calibbias ) * out_voltageY_scale*

###### Enable power down mode for the device

/sys/bus/iio/devices/iio:deviceX/out_voltage_powerdown

**Description:**
Writing 1 causes the device to enter power down mode. Clearing returns to
normal operation.

:::{NOTE} <!-- ATTRS: box="" bggreen="" -->
:::{HINT} <!-- ATTRS: info="" -->
This specifies any shell prompt running on the target
:::

```bash
root:/sys/devices/platform/bfin-spi.0/spi0.3/iio:device0> **echo 1 > out_voltage_powerdown**
root:/sys/devices/platform/bfin-spi.0/spi0.3/iio:device0> **cat out_voltage_powerdown**
1
root:/sys/devices/platform/bfin-spi.0/spi0.3/iio:device0> **echo 0 > out_voltage_powerdown**
root:/sys/devices/platform/bfin-spi.0/spi0.3/iio:device0> **cat out_voltage_powerdown**
0
```
:::


###### List available power down modes

/sys/bus/iio/devices/iio:deviceX/out_voltage_powerdown_mode_available

**Description:**
Lists all available output power down modes.

:::{NOTE} <!-- ATTRS: box="" bggreen="" -->
:::{HINT} <!-- ATTRS: info="" -->
This specifies any shell prompt running on the target
:::

```bash
root:/sys/devices/platform/bfin-spi.0/spi0.3/iio:device0> **cat out_voltage_powerdown_mode_available**
100kohm_to_gnd three_state
```
:::


###### Set power down mode

/sys/bus/iio/devices/iio:deviceX/out_voltage_powerdown_mode

**Description:**
Specifies the output power down mode.
DAC output stage is disconnected from the amplifier and

<table>
<tbody>
<tr class="odd">
<td>100kohm_to_gnd</td>
<td>connected to ground via an 100kOhm resistor</td>
</tr>
<tr class="even">
<td>three_state</td>
<td>left floating</td>
</tr>
</tbody>
</table>

For a list of available output power down options read
out_voltage_powerdown_mode_available.

:::{NOTE} <!-- ATTRS: box="" bggreen="" -->
:::{HINT} <!-- ATTRS: info="" -->
This specifies any shell prompt running on the target
:::

```bash
root:/sys/devices/platform/bfin-spi.0/spi0.3/iio:device0> **echo three_state > out_voltage_powerdown_mode**
root:/sys/devices/platform/bfin-spi.0/spi0.3/iio:device0> **cat out_voltage_powerdown_mode**
three_state
```
:::


### More Information

![iio_snippets#iio pointers&noheader&firstseconly&noeditbtn](/page>software/linux/docs/iio/iio_snippets#iio pointers&noheader&firstseconly&noeditbtn)
