---
wiki-source: https://wiki.analog.com/resources/tools-software/linux-drivers/iio-inertial-measurement-units/adis16475
title: ADIS16460: Compact, Precision, Six Degrees of Freedom Inertial Sensor
---

# ADIS16475 IIO Inertial Measurement Unit Linux Driver

### Supported Devices

-   [ADIS16465](https://analog.com/ADIS16465)
-   [ADIS16467](https://analog.com/ADIS16467)
-   [ADIS16470](https://analog.com/ADIS16470)
-   [ADIS16475](https://analog.com/ADIS16475)
-   [ADIS16477](https://analog.com/ADIS16477)
-   [ADIS16500](https://analog.com/ADIS16500)
-   [ADIS16505](https://analog.com/ADIS16505)
-   [ADIS16507](https://analog.com/ADIS16507)

### Evaluation Boards

-   [ADIS16IMU4/PCBZ](https://analog.com/EVAL-ADIS16IMU4)
-   [EVAL-ADIS2](https://analog.com/EVAL-ADIS2)
-   [ADIS16470/PCB](https://analog.com/EVAL-ADIS16470)
-   [ADIS16475-x/PCB](https://analog.com/EVAL-ADIS16475)
-   [ADIS16477-x/PCB](https://analog.com/EVAL-ADIS16477)

### Description

This is a Linux industrial I/O ([IIO](/software/linux/docs/iio/iio)) subsystem driver, targeting serial interface Inertial Measurement Units (IMU).
The industrial I/O subsystem provides a unified framework for drivers for many different types of converters and sensors using a number of different physical interfaces (i2c, spi, etc).
See [IIO](/software/linux/docs/iio/iio) for more information.

## Source Code

### Status

<table>
<thead>
<tr class="header">
<th>Source</th>
<th>Mainlined?</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><a href="https://github.com/analogdevicesinc/linux/main?drivers/iio/imu/adis16475.c">git</a></td>
<td><a href="git.linux.org&gt;drivers/iio/imu/adis16475.c">yes</a></td>
</tr>
</tbody>
</table>

### Files

<table>
<thead>
<tr class="header">
<th>Function</th>
<th>File</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>driver</td>
<td><a href="https://github.com/analogdevicesinc/linux/main?drivers/iio/imu/adis16475.c">drivers/iio/imu/adis16475.c</a></td>
</tr>
</tbody>
</table>

### Devicetree

Analog Devices ADIS16475 and similar IMUs

#### Required properties for the ADIS16475:

-   compatible: Must be one of
    -   "adi,adis16465-1"
    -   "adi,adis16465-2"
    -   "adi,adis16465-3"
    -   "adi,adis16467-1"
    -   "adi,adis16467-2"
    -   "adi,adis16467-3"
    -   "adi,adis16470"
    -   "adi,adis16475-1"
    -   "adi,adis16475-2"
    -   "adi,adis16475-3"
    -   "adi,adis16477-1"
    -   "adi,adis16477-2"
    -   "adi,adis16477-3"
    -   "adi,adis16500"
    -   "adi,adis16505-1"
    -   "adi,adis16505-2"
    -   "adi,adis16505-3"
    -   "adi,adis16507-1"
    -   "adi,adis16507-2"
    -   "adi,adis16507-3"

```{=html}
<!-- -->
```
-   reg: SPI chip select number for the device
-   spi-cpha: See Documentation/devicetree/bindings/spi/spi-bus.txt
-   spi-cpol: See Documentation/devicetree/bindings/spi/spi-bus.txt
-   interrupts: interrupt mapping for IRQ, accepted values are:

```{=html}
<!-- -->
```
       * IRQF_TRIGGER_RISING
       * IRQF_TRIGGER_FALLING

#### Optional properties

-   reset-gpios: must be the device tree identifier of the RESET pin. As the line is active low, it should be marked GPIO_ACTIVE_LOW.
-   spi-max-frequency: Max SPI frequency to use see: Documentation/devicetree/bindings/spi/spi-bus.txt. The maximum supported value is 2MHz.
-   clocks: phandle to the external clock. Should be set according to "clock-names". If this field is left empty, the internal clock is used.
-   clock-names: The name of the external clock to be used. Valid values are:

```{=html}
<!-- -->
```
        * sync: This mode is the same as internal clock mode with one exception, the SYNC pin pulses when the internal processor collects data from the inertial sensors. The clock-frequency must be:
           * 1900 to 2100 Hz.
        * direct-sync: In this mode, the signal of SYNC pin directly controls the sample clock. In this mode, the processor collects gyroscope data samples on the rising edge of the clock and it collects accelerometer data samples on both rising and falling edge of the clock. The clock-frequency must be:
           * 1900 to 2100 Hz.
        * scaled-sync: This mode is useful when synchronizing the data processing with a PPS signal from a global positioning system (GPS) receiver or with a synchronization signal from a video processing system. The clock-frequency must be:
            * 1 to 128 Hz.
        * pulse-sync: In this mode, the processor only collects accelerometer samples on the leading edge of the clock, which enables the use of narrow pulse width in the clock signal. The clock-frequency must be:
            * 1000 to 2100 Hz.
            * This mode is not supported by the adis1650x devices.
    * adi,scaled-output-hz: This property must be present if the clock mode is **scaled-sync** through clock-names property. In this mode, the input clock can have a range of 1Hz to 128HZ which must be scaled to originate an allowable sample rate. The frequency must be:
        * 1900 to 2100 Hz.
    * adi,burst32-enable: In this mode, a burst reading contains calibrated gyroscope and accelerometer data in 32-bit format. This mode is only supported by adis1650x devices!

#### Example

        imu@0 {
                   compatible = "adi,adis16475-3";
                   reg = <0>;
                   spi-cpha;
                   spi-cpol;
                   spi-max-frequency = <2000000>;
                   interrupts = <4 IRQ_TYPE_EDGE_RISING>;
                   interrupt-parent = <&gpio>;
           };

For more supported devicetree properties take a look to [dt-bindings](https://github.com/analogdevicesinc/linux/main?Documentation/devicetree/bindings/iio/imu/adi,adis16475.yaml).

## Adding Linux driver support

Configure kernel with "make menuconfig" (alternatively use "make xconfig" or
"make qconfig")

:::{NOTE} <!-- ATTRS: round="" help="" -->

The adis16475 driver depends on **CONFIG_SPI_MASTER**

:::


    Linux Kernel Configuration
        Device Drivers  --->
            <*>     Industrial I/O support --->
                --- Industrial I/O support
                [*]   Enable buffer support within IIO
                -*-     Industrial I/O buffering based on kfifo
                -*-   Enable triggered sampling support
                [--snip--]
                Inertial measurement units  ---> 
                    [--snip--]
                    <*> Analog Devices ADIS16475 and similar IMU driver
                    [--snip--]

## Hardware configuration

The evaluation kits simplify the process of connecting an IMU to an embedded processor system using a 16-pin, 1mm ribbon cable. For a detailed description check the links (on the beginning of the page) for the appropriated evaluation kit.
Here is an example of basic connection from one ADIS device interface connector to the host:(microprocessor):

    DEVICE          HOST MICROPROCESSOR
    * DR   ———————> IRQ GPIO
    * CS   <——————— SPI_SEL
    * SCLK <——————— SPI_SCLK
    * DIN  <——————— SPI_MOSI
    * DOUT ———————> SPI_MISO

<!-- CMDS: noheader firstseconly noeditbtn -->
```{include} software_linux_docs_iio_iio_snippets_SUB_iio_device_files.md
```

:::{NOTE} <!-- ATTRS: top="" tip="" round="" box="" 60%="" -->
**TIP:**
An example program which uses the interface can be found here:

-   [IIO Oscilloscope](/resources/tools-software/linux-software/iio_oscilloscope)


:::

:::{NOTE} <!-- ATTRS: box="" bggreen="" -->
:::{HINT} <!-- ATTRS: info="" -->
This specifies any shell prompt running on the target
:::

```{code-block} bash
root:/> **cd /sys/bus/iio/devices/**
root:/sys/bus/iio/devices> **ls**
iio:device0 trigger0

root:/sys/bus/iio/devices> **cd iio:device0**
root:/sys/bus/iio/devices/iio:device0> **ls -l**
total 0
drwxr-xr-x 2 root root 0 Jul 12 10:17 buffer
-rw-r--r-- 1 root root 4096 Jul 12 10:17 current_timestamp_clock
-r--r--r-- 1 root root 4096 Jul 12 10:17 dev
-rw-r--r-- 1 root root 4096 Jul 12 10:17 filter_low_pass_3db_frequency
-rw-r--r-- 1 root root 4096 Jul 12 10:17 in_accel_scale
-rw-r--r-- 1 root root 4096 Jul 12 10:17 in_accel_x_calibbias
-rw-r--r-- 1 root root 4096 Jul 12 10:17 in_accel_x_raw
-rw-r--r-- 1 root root 4096 Jul 12 10:17 in_accel_y_calibbias
-rw-r--r-- 1 root root 4096 Jul 12 10:17 in_accel_y_raw
-rw-r--r-- 1 root root 4096 Jul 12 10:17 in_accel_z_calibbias
-rw-r--r-- 1 root root 4096 Jul 12 10:17 in_accel_z_raw
-rw-r--r-- 1 root root 4096 Jul 12 10:17 in_anglvel_scale
-rw-r--r-- 1 root root 4096 Jul 12 10:17 in_anglvel_x_calibbias
-rw-r--r-- 1 root root 4096 Jul 12 10:17 in_anglvel_x_raw
-rw-r--r-- 1 root root 4096 Jul 12 10:17 in_anglvel_y_calibbias
-rw-r--r-- 1 root root 4096 Jul 12 10:17 in_anglvel_y_raw
-rw-r--r-- 1 root root 4096 Jul 12 10:17 in_anglvel_z_calibbias
-rw-r--r-- 1 root root 4096 Jul 12 10:17 in_anglvel_z_raw
-rw-r--r-- 1 root root 4096 Jul 12 10:17 in_temp0_raw
-rw-r--r-- 1 root root 4096 Jul 12 10:17 in_temp0_scale
-r--r--r-- 1 root root 4096 Jul 12 10:17 name
lrwxrwxrwx 1 root root 0 Jul 12 10:17 of_node -> ../../../../../../../../firmware/devicetree/base/soc/spi@7e204000/adis16475@0
drwxr-xr-x 2 root root 0 Jul 12 10:17 power
-rw-r--r-- 1 root root 4096 Jul 12 10:17 sampling_frequency
drwxr-xr-x 2 root root 0 Jul 12 10:17 scan_elements
lrwxrwxrwx 1 root root 0 Jul 12 10:17 subsystem -> ../../../../../../../../bus/iio
drwxr-xr-x 2 root root 0 Jul 12 10:17 trigger
-rw-r--r-- 1 root root 4096 Jul 12 10:17 uevent

root:/sys/bus/iio/devices/iio:device0>
```
:::


### ADIS16475 device attributes

For a detailed description please see:
[Documentation/ABI/testing/sysfs-bus-iio](https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/Documentation/ABI/testing/sysfs-bus-iio)

<table>
<thead>
<tr class="header">
<th>3-Axis Accelerometer related device files</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>in_accel_scale</td>
<td>Scale for the accelerometer channels.</td>
</tr>
<tr class="even">
<td>in_accel_x_calibbias</td>
<td>Calibration offset for the X-axis accelerometer channel.</td>
</tr>
<tr class="odd">
<td>in_accel_x_raw</td>
<td>Raw X-axis accelerometer channel value.</td>
</tr>
<tr class="even">
<td>in_accel_y_calibbias</td>
<td>Calibration offset for the Y-axis accelerometer channel.</td>
</tr>
<tr class="odd">
<td>in_accel_y_raw</td>
<td>Raw Y-axis accelerometer channel value.</td>
</tr>
<tr class="even">
<td>in_accel_z_calibbias</td>
<td>Calibration offset for the Z-axis accelerometer channel.</td>
</tr>
<tr class="odd">
<td>in_accel_z_raw</td>
<td>Raw Z-axis accelerometer channel value.</td>
</tr>
<tr class="even">
<td>3-Axis Gyro related device files</td>
<td>Description</td>
</tr>
<tr class="odd">
<td>in_anglvel_scale</td>
<td>Scale for the gyroscope channels.</td>
</tr>
<tr class="even">
<td>in_anglvel_x_calibbias</td>
<td>Calibration offset for the X-axis gyroscope channel.</td>
</tr>
<tr class="odd">
<td>in_anglvel_x_raw</td>
<td>Raw X-axis gyroscope channel value.</td>
</tr>
<tr class="even">
<td>in_anglvel_y_calibbias</td>
<td>Calibration offset for the Y-axis gyroscope channel.</td>
</tr>
<tr class="odd">
<td>in_anglvel_y_raw</td>
<td>Raw Y-axis gyroscope channel value.</td>
</tr>
<tr class="even">
<td>in_anglvel_z_calibbias</td>
<td>Calibration offset for the Z-axis gyroscope channel.</td>
</tr>
<tr class="odd">
<td>in_anglvel_z_raw</td>
<td>Raw Z-axis gyroscope channel value.</td>
</tr>
<tr class="even">
<td>Temperature sensor related files</td>
<td>Description</td>
</tr>
<tr class="odd">
<td>in_temp0_raw</td>
<td>Raw temperature channel value.</td>
</tr>
<tr class="even">
<td>in_temp0_scale</td>
<td>Scale for the temperature sensor channel.</td>
</tr>
<tr class="odd">
<td>Miscellaneous device files</td>
<td>Description</td>
</tr>
<tr class="even">
<td>name</td>
<td>Name of the IIO device.</td>
</tr>
<tr class="odd">
<td>sampling_frequency</td>
<td>Currently selected sample rate.</td>
</tr>
<tr class="even">
<td>filter_low_pass_3db_frequency</td>
<td>Bandwidth for the accelerometer and gyroscope channels.</td>
</tr>
<tr class="odd">
<td>burst_mode_enable</td>
<td>Enables reading of the data with a SPI burst read.</td>
</tr>
</tbody>
</table>

#### Show device name

:::{NOTE} <!-- ATTRS: box="" bggreen="" -->
:::{HINT} <!-- ATTRS: info="" -->
This specifies any shell prompt running on the target
:::

```{code-block} bash
root:/sys/bus/iio/devices/iio:device0> **cat name**
adis16477-1
```
:::


#### Set sampling frequency

The sampling frequency of the device can be set by writing the desired value to the `sampling_frequency` file. The driver will automatically round up to the nearest supported sampling frequency.

**Example:**
:::{NOTE} <!-- ATTRS: box="" bggreen="" -->
:::{HINT} <!-- ATTRS: info="" -->
This specifies any shell prompt running on the target
:::

```{code-block} bash
root:/sys/bus/iio/devices/iio:device0> **cat sampling_frequency**
2000.000000
pi@raspberrypi:/s
root:/sys/bus/iio/devices/iio:device0> **echo 1000 > sampling_frequency**
root:/sys/bus/iio/devices/iio:device0> **cat sampling_frequency**
1000.000000
```
:::


#### Show channel value

A channel value can be read from its `_raw` attribute. The value returned by the `_raw` attribute is the raw value as reported by the device. To get the processed value of the channel in a standardized unit add the channels `_offset` attribute to the `_raw` value and multiply the result by `_scale` attribute. If no `_offset` attribute is present assume 0 for the offset.

`processed value = (raw + offset) * scale`

The units by the IIO framework are:

-   Acceleration: Meter per Second squared
-   Angular velocity: Rad per second
-   Temperature: milli Degree Celsius

**Example:**
:::{NOTE} <!-- ATTRS: box="" bggreen="" -->
:::{HINT} <!-- ATTRS: info="" -->
This specifies any shell prompt running on the target
:::

```{code-block} bash
root:/sys/bus/iio/devices/iio:device0> **cat in_accel_z_raw**
52612913
root:/sys/bus/iio/devices/iio:device0> **cat in_accel_scale**
0.000000187
```
:::


`Z-axis acceleration = in_accel_z_raw * in_accel_scale = 52612913 * 0.000000187 m/s^2 = 9.838 m/s^2`

#### Set gyro and accel bandwidth

The gyro and accel bandwidth can be set by writing the desired value to the `filter_low_pass_3db_frequency` attribute. The driver will automatically round up to the nearest supported bandwidth.

**Example:**
:::{NOTE} <!-- ATTRS: box="" bggreen="" -->
:::{HINT} <!-- ATTRS: info="" -->
This specifies any shell prompt running on the target
:::

```{code-block} bash
root:/sys/bus/iio/devices/iio:device0> **cat filter_low_pass_3db_frequency**
720.000000
root:/sys/bus/iio/devices/iio:device0> **echo 360 > filter_low_pass_3db_frequency**
root:/sys/bus/iio/devices/iio:device0> **cat filter_low_pass_3db_frequency**
360.000000
```
:::


### Trigger management

:::{NOTE} <!-- ATTRS: round="" help="" -->

This driver only supports it's own default trigger source **adis16477-1-dev0**

:::


:::{NOTE} <!-- ATTRS: box="" bggreen="" -->
:::{HINT} <!-- ATTRS: info="" -->
This specifies any shell prompt running on the target
:::

```{code-block} bash
root:/sys/bus/iio/devices/iio:device0> **cat trigger/current_trigger**
adis16477-1-dev0
```
:::


### Buffer management

:::{NOTE} <!-- ATTRS: box="" bggreen="" -->
:::{HINT} <!-- ATTRS: info="" -->
This specifies any shell prompt running on the target
:::

```{code-block} bash
root:/sys/bus/iio/devices/iio:device0/buffer> **ls**
**data_available** **enable** **length** **watermark**
```
:::


<!-- CMDS: noheader firstseconly noeditbtn -->
```{include} software_linux_docs_iio_iio_snippets_SUB_Buffer_management.md
```

:::{NOTE} <!-- ATTRS: box="" bggreen="" -->
:::{HINT} <!-- ATTRS: info="" -->
This specifies any shell prompt running on the target
:::

```{code-block} bash
root:/sys/bus/iio/devices/iio:device0/scan_elements> **ls -l**
total 0
-rw-r--r-- 1 root root 4096 Jul 12 10:17 in_accel_x_en
-r--r--r-- 1 root root 4096 Jul 12 10:17 in_accel_x_index
-r--r--r-- 1 root root 4096 Jul 12 10:17 in_accel_x_type
-rw-r--r-- 1 root root 4096 Jul 12 10:17 in_accel_y_en
-r--r--r-- 1 root root 4096 Jul 12 10:17 in_accel_y_index
-r--r--r-- 1 root root 4096 Jul 12 10:17 in_accel_y_type
-rw-r--r-- 1 root root 4096 Jul 12 10:17 in_accel_z_en
-r--r--r-- 1 root root 4096 Jul 12 10:17 in_accel_z_index
-r--r--r-- 1 root root 4096 Jul 12 10:17 in_accel_z_type
-rw-r--r-- 1 root root 4096 Jul 12 10:17 in_anglvel_x_en
-r--r--r-- 1 root root 4096 Jul 12 10:17 in_anglvel_x_index
-r--r--r-- 1 root root 4096 Jul 12 10:17 in_anglvel_x_type
-rw-r--r-- 1 root root 4096 Jul 12 10:17 in_anglvel_y_en
-r--r--r-- 1 root root 4096 Jul 12 10:17 in_anglvel_y_index
-r--r--r-- 1 root root 4096 Jul 12 10:17 in_anglvel_y_type
-rw-r--r-- 1 root root 4096 Jul 12 10:17 in_anglvel_z_en
-r--r--r-- 1 root root 4096 Jul 12 10:17 in_anglvel_z_index
-r--r--r-- 1 root root 4096 Jul 12 10:17 in_anglvel_z_type
-rw-r--r-- 1 root root 4096 Jul 12 10:17 in_flags0_en
-r--r--r-- 1 root root 4096 Jul 12 10:17 in_flags0_index
-r--r--r-- 1 root root 4096 Jul 12 10:17 in_flags0_type
-rw-r--r-- 1 root root 4096 Jul 12 10:17 in_flags1_crc_en
-r--r--r-- 1 root root 4096 Jul 12 10:17 in_flags1_crc_index
-r--r--r-- 1 root root 4096 Jul 12 10:17 in_flags1_crc_type
-rw-r--r-- 1 root root 4096 Jul 12 10:17 in_temp0_en
-r--r--r-- 1 root root 4096 Jul 12 10:17 in_temp0_index
-r--r--r-- 1 root root 4096 Jul 12 10:17 in_temp0_type
-rw-r--r-- 1 root root 4096 Jul 12 10:17 in_timestamp_en
-r--r--r-- 1 root root 4096 Jul 12 10:17 in_timestamp_index
-r--r--r-- 1 root root 4096 Jul 12 10:17 in_timestamp_type
root:/sys/bus/iio/devices/iio:device0/scan_elements>
```
:::


From the above list, note the following 2 elements:

-   in_flags0_*: This element refers to diagnostics data (register DIAG_STAT) related to the device.
-   in_flags1_crc_*: This element refers to crc validation of the received burst data. When set to 1, the data is **likely** invalid.

<note warning>Both this elements are relevant only when **burst_mode_enable** is set</note>

<!-- CMDS: noheader firstseconly noeditbtn -->
```{include} software_linux_docs_iio_iio_snippets_SUB_Typical_ADC_scan_elements.md
```

## More Information

<!-- CMDS: noheader firstseconly noeditbtn -->
```{include} software_linux_docs_iio_iio_snippets_SUB_iio_pointers.md
```
