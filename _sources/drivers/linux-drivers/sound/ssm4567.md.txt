---
wiki-source: https://wiki.analog.com/resources/tools-software/linux-drivers/sound/ssm4567
title: SSM4567: Digital 2.5 W, 5.1 V, Boost Class-D Audio Amplifier with Output Sensing
---

# SSM4567 Audio Amplifier Linux Driver

### Supported Devices

-   [SSM4567](https://analog.com/SSM4567)

### Evaluation Boards

-   [EVAL-SSM4567Z](https://analog.com/EVAL-SSM4567Z)

## Source Code

#### Status

<table>
<thead>
<tr class="header">
<th>Source</th>
<th>Mainlined?</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><a href="https://github.com/analogdevicesinc/linux/ssm4329?sound/soc/codecs/ssm4567.c">git</a></td>
<td><a href="git.linux.org&gt;sound/soc/codecs/ssm4567.c">yes</a></td>
</tr>
</tbody>
</table>

#### Files

<table>
<thead>
<tr class="header">
<th>Function</th>
<th>File</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>driver</td>
<td><a href="https://github.com/analogdevicesinc/linux/asoc-ssm4329?sound/soc/codecs/ssm4567.c">sound/soc/codecs/ssm4567.c</a></td>
</tr>
<tr class="even">
<td>include</td>
<td><a href="https://github.com/analogdevicesinc/linux/asoc-ssm4329?sound/soc/codecs/ssm4567.h">sound/soc/codecs/ssm4567.h</a></td>
</tr>
</tbody>
</table>

## Example device initialization

<!-- CMDS: noheader firstseconly noeditbtn -->
```{include} software_linux_docs_platform_and_bus_model_SUB_Platform_Data.md
```

<!-- CMDS: firstseconly noeditbtn -->
```{include} software_linux_docs_platform_and_bus_model_SUB_Declaring_I2C_devices.md
```

The I2C address of the SSM4567 depends on the setting of the ADDR pin.

<table>
<thead>
<tr class="header">
<th>ADDR</th>
<th>I2C Address</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>0x34</td>
</tr>
<tr class="even">
<td>1</td>
<td>0x35</td>
</tr>
</tbody>
</table>

``` c
static struct i2c_board_info __initdata bfin_i2c_board_info[] = {

    [--snip--]
    {
        I2C_BOARD_INFO("ssm4567", 0x34),
    },
    [--snip--]
}

```

``` c
static int __init stamp_init(void)
{
    [--snip--]
    i2c_register_board_info(0, bfin_i2c_board_info,
                ARRAY_SIZE(bfin_i2c_board_info));
    [--snip--]

    return 0;
}
arch_initcall(board_init);
```

### Devicetree

    i2s: i2c@41600000 {
        compatible = "...;
        ...

        #size-cells = <0>;
        #address-cells = <1>;
                
        ssm4567: ssm4567@34 {
            compatible = "adi,ssm4567";
            reg = <0x34>;
        };
    };

### ASoC DAPM Widgets

<table>
<thead>
<tr class="header">
<th>Name</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>OUT</td>
<td>Class-D Amplifier Output</td>
</tr>
</tbody>
</table>

### ALSA Controls

<table>
<thead>
<tr class="header">
<th>Name</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>DAC High Pass Filter Switch</td>
<td>Enables/Disables the high-pass filter for the DAC</td>
</tr>
<tr class="even">
<td>DAC Low Power Switch</td>
<td>Enables/Disables low-power mode of the DAC</td>
</tr>
<tr class="odd">
<td>Master Playback Volume</td>
<td>Digital output volume control.</td>
</tr>
<tr class="even">
<td>Low-EMI Switch</td>
<td>Enables/Disables low EMI mode.</td>
</tr>
<tr class="odd">
<td>Limiter Mode</td>
<td>Mode the output limiter is using.</td>
</tr>
<tr class="even">
<td>Limiter Attack Rate</td>
<td>Attack rate of the output limiter.</td>
</tr>
<tr class="odd">
<td>Limiter Release Rate</td>
<td>Release rate of the output limiter.</td>
</tr>
<tr class="even">
<td>Limiter Attack Threshold</td>
<td>Attack threshold for the output limiter.</td>
</tr>
<tr class="odd">
<td>Amplifier Boost Switch</td>
<td>Enables/Disables the output amplifier booster</td>
</tr>
</tbody>
</table>

### DAI configuration

The amplifier driver registers one DAIs, one for each serial port. The DAI is named **"ssm4567-hifi"**

#### Supported DAI formats

<table>
<thead>
<tr class="header">
<th>Name</th>
<th>Supported by driver</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>SND_SOC_DAIFMT_I2S</td>
<td>yes</td>
<td>I2S mode</td>
</tr>
<tr class="even">
<td>SND_SOC_DAIFMT_RIGHT_J</td>
<td>no</td>
<td>Right Justified mode</td>
</tr>
<tr class="odd">
<td>SND_SOC_DAIFMT_LEFT_J</td>
<td>yes</td>
<td>Left Justified mode</td>
</tr>
<tr class="even">
<td>SND_SOC_DAIFMT_DSP_A</td>
<td>yes</td>
<td>data MSB after FRM LRC</td>
</tr>
<tr class="odd">
<td>SND_SOC_DAIFMT_DSP_B</td>
<td>yes</td>
<td>data MSB during FRM LRC</td>
</tr>
<tr class="even">
<td>SND_SOC_DAIFMT_AC97</td>
<td>no</td>
<td>AC97 mode</td>
</tr>
<tr class="odd">
<td>SND_SOC_DAIFMT_PDM</td>
<td>yes</td>
<td>Pulse density modulation</td>
</tr>
<tr class="even">
<td></td>
<td></td>
<td></td>
</tr>
<tr class="odd">
<td>SND_SOC_DAIFMT_NB_NF</td>
<td>yes</td>
<td>Normal bit- and frameclock</td>
</tr>
<tr class="even">
<td>SND_SOC_DAIFMT_NB_IF</td>
<td>yes</td>
<td>Normal bitclock, inverted frameclock</td>
</tr>
<tr class="odd">
<td>SND_SOC_DAIFMT_IB_NF</td>
<td>yes</td>
<td>Inverted frameclock, normal bitclock</td>
</tr>
<tr class="even">
<td>SND_SOC_DAIFMT_IB_IF</td>
<td>yes</td>
<td>Inverted bit- and frameclock</td>
</tr>
<tr class="odd">
<td></td>
<td></td>
<td></td>
</tr>
<tr class="even">
<td>SND_SOC_DAIFMT_CBM_CFM</td>
<td>no</td>
<td>Codec bit- and frameclock master</td>
</tr>
<tr class="odd">
<td>SND_SOC_DAIFMT_CBS_CFM</td>
<td>no</td>
<td>Codec bitclock slave, frameclock master</td>
</tr>
<tr class="even">
<td>SND_SOC_DAIFMT_CBM_CFS</td>
<td>no</td>
<td>Codec bitclock master, frameclock slave</td>
</tr>
<tr class="odd">
<td>SND_SOC_DAIFMT_CBS_CFS</td>
<td>yes</td>
<td>Codec bit- and frameclock slave</td>
</tr>
</tbody>
</table>

#### TDM configuration

If you want to use the SSM4567 in TDM mode you can configure it using snd_soc_dai_set_tdm_slot() from you ASoC board driver.

The following restrictions apply to the parameters of snd_soc_dai_set_tdm_slot().

-   **tx_mask** specifies the output channel mapping for the serial port. This must either be 0, or the same as rx_mask.
-   **rx_mask** specifies the input channel mapping for the serial port. There must be exactly one bit set in this mask which selects the slot that is used.
-   **slots** should be between 1 and 8
-   **width** must be either 32, 48, 64

Example:

``` c
static int ssm4567_link_init(struct snd_soc_pcm_runtime *rtd)
{
    int ret;

    ret = snd_soc_dai_set_tdm_slot(rtd->codec_dai, 0x01, 0x01, 8, 32);
    if (ret < 0)
        return ret;

    return 0;
}

static struct snd_soc_dai_link ssm4567_dai_link = {
    ...,
    .init = ssm4567_link_init,
};
```

#### Example DAI configuration

``` c
static const struct snd_soc_dapm_widget ssm4567_zed_widgets[] = {
    SND_SOC_DAPM_SPK("Speaker", NULL),
};

static const struct snd_soc_dapm_route ssm4567_zed_routes[] = {
    { "Speaker", NULL, "OUT" },
};

static struct snd_soc_dai_link ssm4567_zed_dai_link = {
    .name = "ssm4567",
    .stream_name = "ssm4567",
    .codec_dai_name = "ssm4567-hifi",
    .dai_fmt = SND_SOC_DAIFMT_DSP_A |
            SND_SOC_DAIFMT_NB_NF |
            SND_SOC_DAIFMT_CBS_CFS,
    .init = ssm4567_zed_init,
};

static struct snd_soc_card ssm4567_zed_card = {
    .name = "ZED SSM4567",
    .owner = THIS_MODULE,
    .dai_link = &zed_ssm4567_dai_link,
    .num_links = 1,
    .dapm_widgets = zed_ssm4567_widgets,
    .num_dapm_widgets = ARRAY_SIZE(zed_ssm4567_widgets),
    .dapm_routes = zed_ssm4567_routes,
    .num_dapm_routes = ARRAY_SIZE(zed_ssm4567_routes),
    .fully_routed = true,
};
```

#### Multi SSM4567 Example configuration

This example shows how to setup a ASoC board driver for a system with two SSM4567, one driving the left speaker and the other driving the right speaker. In this example the left SSM4567 is at I2C address 0x34 (ADDR=0) and the right SSM4567 is at I2S address 0x35 (ADDR=1).

Note support for multiple CODECs on a single DAI link requires Linux v3.17 or higher.

``` c
static int ssm4567_link_init(struct snd_soc_pcm_runtime *rtd)
{
    int ret;

    /* Slot 0 for left */
    ret = snd_soc_dai_set_tdm_slot(rtd->codec_dais[0], 0x01, 0x01, 2, 32);
    if (ret < 0)
        return ret;

    /* Slot 2 for right */
    ret = snd_soc_dai_set_tdm_slot(rtd->codec_dais[1], 0x02, 0x02, 2, 32);
    if (ret < 0)
        return ret;

    return 0;
}

static const struct snd_soc_dapm_widget ssm4567_zed_widgets[] = {
    SND_SOC_DAPM_SPK("Left Speaker", NULL),
    SND_SOC_DAPM_SPK("Right Speaker", NULL),
};

static const struct snd_soc_dapm_route ssm4567_zed_routes[] = {
    { "Left Speaker", NULL, "Left OUT" },
    { "Right Speaker", NULL, "Right OUT" },
};

static const snd_soc_dai_link_component ssm4567_zed_codec_components[] = {
    { /* Left */
        .name = "ssm4567.0-0034",
        .codec_dai_name = "ssm4567-hifi",
    },
    { /* Right */
        .name = "ssm4567.0-0035",
        .codec_dai_name = "ssm4567-hifi",
    },

};

/* Assign prefix to avoid name conflicts */
static const struct snd_soc_codec_conf ssm4567_zed_codec_conf[] = {
    {
        .dev_name = "ssm4567.0-0034",
        .name_prefix = "Left",
    },
    {
        .dev_name = "ssm4567.0-0035",
        .name_prefix = "Right",
    },
};

static struct snd_soc_dai_link ssm4567_zed_dai_link = {
    .name = "ssm4567",
    .stream_name = "ssm4567",

    .codecs = ssm4567_zed_codec_components,
    .num_codecs = ARRAY_SIZE(ssm4567_zed_codec_components),
    .codec_conf = ssm4567_zed_codec_conf,
    .num_configs = ARRAY_SIZE(ssm4567_zed_codec_conf),

    .dai_fmt = SND_SOC_DAIFMT_DSP_A |
        SND_SOC_DAIFMT_NB_NF |
        SND_SOC_DAIFMT_CBS_CFS,
    .init = ssm4567_link_init,
};

static struct snd_soc_card ssm4567_zed_card = {
    .name = "ZED SSM4567",
    .owner = THIS_MODULE,
    .dai_link = &zed_ssm4567_dai_link,
    .num_links = 1,
    .dapm_widgets = zed_ssm4567_widgets,
    .num_dapm_widgets = ARRAY_SIZE(zed_ssm4567_widgets),
    .dapm_routes = zed_ssm4567_routes,
    .num_dapm_routes = ARRAY_SIZE(zed_ssm4567_routes),
    .fully_routed = true,
};
```

### More information

-    [SSM4329 Linux Driver](SSM4329)

<!-- CMDS: noheader firstseconly noeditbtn -->
```{include} resources_tools-software_linux-drivers_need_help_SUB_need_help.md
```
