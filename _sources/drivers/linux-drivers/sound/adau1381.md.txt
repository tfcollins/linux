---
wiki-source: https://wiki.analog.com/resources/tools-software/linux-drivers/sound/adau1381
title: ADAU1781: SigmaDSP Low-noise Stereo Audio Codec for Portable Applications
---

ADAU1781 Sound CODEC Linux Driver
=================================

# Supported Devices

-   [ADAU1381](https://www.google.com/search?q=ADAU1381&btnI=lucky)
-   [ADAU1781](https://www.google.com/search?q=ADAU1781&btnI=lucky)

#### Evaluation Boards

-   [EVAL-ADAU1381Z](https://www.google.com/search?q=EVAL-ADAU1381Z&btnI=lucky)
-   [EVAL-ADAU1781Z](https://www.google.com/search?q=EVAL-ADAU1781Z&btnI=lucky)

Source Code
-----------

###### Status

<table>
<thead>
<tr class="header">
<th>Source</th>
<th>Mainlined?</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><a href="https://www.google.com/search?q=sound/soc/codecs/adau1781.c&amp;btnI=lucky">git</a></td>
<td><a href="https://www.google.com/search?q=sound/soc/codecs/adau1781.c&amp;btnI=lucky">git</a></td>
</tr>
</tbody>
</table>

###### Files

<table>
<thead>
<tr class="header">
<th>Function</th>
<th>File</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>driver</td>
<td><a href="https://www.google.com/search?q=sound/soc/codecs/adau1781.c&amp;btnI=lucky">sound/soc/codecs/adau1781.c</a></td>
</tr>
<tr class="even">
<td>driver</td>
<td><a href="https://www.google.com/search?q=sound/soc/codecs/adau17x1.c&amp;btnI=lucky">sound/soc/codecs/adau17x1.c</a></td>
</tr>
<tr class="odd">
<td>include</td>
<td><a href="https://www.google.com/search?q=sound/soc/codecs/adau1781.h&amp;btnI=lucky">sound/soc/codecs/adau1781.h</a></td>
</tr>
<tr class="even">
<td>include</td>
<td><a href="https://www.google.com/search?q=include/sound/adau17x1.h&amp;btnI=lucky">include/sound/adau17x1.h</a></td>
</tr>
</tbody>
</table>

Example device initialization
-----------------------------

![](page>software/linux/docs/platform_and_bus_model#Platform Data&noheader&firstseconly&noeditbtn)

##### I2C

![](page>software/linux/docs/platform_and_bus_model#Declaring I2C devices&firstseconly&noeditbtn)

The I2C device id depends on the ADDR0 and ADDR1 pin settings and needs to be set according to your board setup.

<table>
<thead>
<tr class="header">
<th>ADDR1</th>
<th>ADDR0</th>
<th>I2C device id</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>0</td>
<td>0x38</td>
</tr>
<tr class="even">
<td>0</td>
<td>1</td>
<td>0x39</td>
</tr>
<tr class="odd">
<td>1</td>
<td>0</td>
<td>0x3a</td>
</tr>
<tr class="even">
<td>1</td>
<td>1</td>
<td>0x3b</td>
</tr>
</tbody>
</table>

In this example we assume ADDR0=0 and ADDR1=0.

``` {.c}
static struct i2c_board_info __initdata bfin_i2c_board_info[] = {

    [--snip--]
    {
        I2C_BOARD_INFO("adau1781", 0x38),
    },
    [--snip--]
}

```

``` {.c}
static int __init stamp_init(void)
{
    [--snip--]
    i2c_register_board_info(0, bfin_i2c_board_info,
                ARRAY_SIZE(bfin_i2c_board_info));
    [--snip--]

    return 0;
}
arch_initcall(board_init);
```

#### ASoC DAPM Widgets

<table>
<thead>
<tr class="header">
<th>Name</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>AOUTL</td>
<td>Left Lineout Amplifier</td>
</tr>
<tr class="even">
<td>AOUTR</td>
<td>Right Lineout Amplifier</td>
</tr>
<tr class="odd">
<td>SP</td>
<td>Speaker Amplifier</td>
</tr>
<tr class="even">
<td>BEEP</td>
<td>Beep Signal Input</td>
</tr>
<tr class="odd">
<td>LMIC</td>
<td>Left Microphone Input or Digital Microphone Input 1</td>
</tr>
<tr class="even">
<td>RMIC</td>
<td>Right Microphone Input or Digital Microphone Input 2</td>
</tr>
<tr class="odd">
<td>MICBIAS</td>
<td>Bias Voltage for Electret Microphone</td>
</tr>
</tbody>
</table>

#### ALSA Controls

<table>
<thead>
<tr class="header">
<th>Name</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>ADC High Pass Filter Switch</td>
<td>Enable/Disable ADC high-pass-filter</td>
</tr>
<tr class="even">
<td>Playback De-emphasis</td>
<td>Enable/Disable Playback de-empahsis</td>
</tr>
<tr class="odd">
<td>Capture Boost</td>
<td>Mixer amplifier bias boost<br />
Valid values: "Normal operation", "Boost Level 1", "Boost Level 2", "Boost Level 3"</td>
</tr>
<tr class="even">
<td>Mic Bias Mode</td>
<td>Microphone bias.<br />
Valid values: "Normal operation", "High performance"</td>
</tr>
<tr class="odd">
<td>DAC Mono Stereo</td>
<td>DAC mono mode.<br />
Valid values: "Stereo", "Mono Left Channel (L+R)", "Mono Right Channel (L+R)", "Mono (L+R)"</td>
</tr>
<tr class="even">
<td>DSP Bypass Capture Switch</td>
<td>Bypass DSP on the capture path and send ADC data directly to the serial ports</td>
</tr>
<tr class="odd">
<td>DSP Bypass Playback Switch</td>
<td>Bypass DSP on the playback path and send serial port data directly to the DACs</td>
</tr>
<tr class="even">
<td>Digital Capture Volume</td>
<td>Digital volume attenuation for input from either the ADC or the digital microphone input.</td>
</tr>
<tr class="odd">
<td>Digital Playback Volume</td>
<td>Digital volume attenuation for output from the DAC</td>
</tr>
<tr class="even">
<td>Beep Capture Volume</td>
<td>Beep input signal gain</td>
</tr>
<tr class="odd">
<td>Beep Capture Switch</td>
<td>Mute/Unmute Beep input signal</td>
</tr>
<tr class="even">
<td>PGA Capture Volume</td>
<td>Analog Microphone input PGA Gain</td>
</tr>
<tr class="odd">
<td>PGA Capture Switch</td>
<td>Mute/Unmute Analog Microphone input</td>
</tr>
<tr class="even">
<td>Lineout Playback Switch</td>
<td>Mute/Unmute Lineout</td>
</tr>
<tr class="odd">
<td>Beep ZC Switch</td>
<td>Enable Beep Zero Cross Detection</td>
</tr>
<tr class="even">
<td>Mono Playback Switch</td>
<td>Mute/Unmute Mono(Speaker) output</td>
</tr>
<tr class="odd">
<td>Mono Playback Volume</td>
<td>Mono(Speaker) output gain</td>
</tr>
<tr class="even">
<td>ADC Bias</td>
<td>ADC bias.<br />
Valid values: "Normal operation", "Extreme powersaving", "Enhanced performance", "Power saving"</td>
</tr>
<tr class="odd">
<td>DAC Bias</td>
<td>DAC bias.<br />
Valid values: "Normal operation", "Extreme powersaving", "Enhanced performance", "Power saving"</td>
</tr>
<tr class="even">
<td>Capture Bias</td>
<td>Record path bias.<br />
Valid values: "Normal operation", "Extreme powersaving", "Enhanced performance", "Power saving"</td>
</tr>
<tr class="odd">
<td>Playback Bias</td>
<td>Playback path bias.<br />
Valid values: "Normal operation", "Extreme powersaving", "Enhanced performance", "Power saving"</td>
</tr>
<tr class="even">
<td>Speaker Bias</td>
<td>Headphone bias.<br />
Valid values: "Normal operation", "Enhanced performance", "Power saving"</td>
</tr>
<tr class="odd">
<td>Mono Mixer Left Switch</td>
<td>Mix Left DAC signal into the Mono Mixer</td>
</tr>
<tr class="even">
<td>Mono Mixer Right Switch</td>
<td>Mix Right DAC signal into the Mono Mixer</td>
</tr>
<tr class="odd">
<td>Mono Mixer Beep Playback Volume</td>
<td>Beep signal gain into the Mono Mixer</td>
</tr>
<tr class="even">
<td>Right Lineout Mixer Switch</td>
<td>Mix Right DAC signal into the Right Lineout Mixer</td>
</tr>
<tr class="odd">
<td>Right Lineout Mixer Beep Playback Volume</td>
<td>Beep signal gain into the Right Lineout Mixer</td>
</tr>
<tr class="even">
<td>Left Lineout Mixer Switch</td>
<td>Mix Left DAC signal into the Left Lineout Mixer</td>
</tr>
<tr class="odd">
<td>Left Lineout Mixer Beep Playback Volume</td>
<td>Beep signal gain into the Left Lineout Mixer</td>
</tr>
</tbody>
</table>

#### PLL configuration

The ADAU1781 features one PLL:

``` {.c}
enum adau17x1_pll {
    ADAU17X1_PLL
};
```

The PLL input signal is the MCLK signal.

``` {.c}
enum adau1xx1_pll_src {
    ADAU1XX1_PLL_SRC_MCLK,
};
```

(The input frequency must configured to be between 8000000 and 27000000 Hz (8MHz - 27MHz). The output frequency must be configured to be between 45158000 and 49152000. Configuring the PLL with other input or output frequency will fail.)

The PLL runs at 1024 times the base sample rate. So for a 48000 Hz based sample rate you'd normally choose 49152000 Hz for the PLL output frequncey and for a 44100 Hz based sample rate 45158400 Hz.

#### DAI configuration

The codec driver registers one DAI: **adau-hifi**

##### Supported DAI formats

<table>
<thead>
<tr class="header">
<th>Name</th>
<th>Supported by driver</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>SND_SOC_DAIFMT_I2S</td>
<td>yes</td>
<td>I2S mode</td>
</tr>
<tr class="even">
<td>SND_SOC_DAIFMT_RIGHT_J</td>
<td>yes</td>
<td>Right Justified mode</td>
</tr>
<tr class="odd">
<td>SND_SOC_DAIFMT_LEFT_J</td>
<td>yes</td>
<td>Left Justified mode</td>
</tr>
<tr class="even">
<td>SND_SOC_DAIFMT_DSP_A</td>
<td>yes</td>
<td>data MSB after FRM LRC</td>
</tr>
<tr class="odd">
<td>SND_SOC_DAIFMT_DSP_B</td>
<td>yes</td>
<td>data MSB during FRM LRC</td>
</tr>
<tr class="even">
<td>SND_SOC_DAIFMT_AC97</td>
<td>no</td>
<td>AC97 mode</td>
</tr>
<tr class="odd">
<td>SND_SOC_DAIFMT_PDM</td>
<td>no</td>
<td>Pulse density modulation</td>
</tr>
<tr class="even">
<td></td>
<td></td>
<td></td>
</tr>
<tr class="odd">
<td>SND_SOC_DAIFMT_NB_NF</td>
<td>yes</td>
<td>Normal bit- and frameclock</td>
</tr>
<tr class="even">
<td>SND_SOC_DAIFMT_NB_IF</td>
<td>yes</td>
<td>Normal bitclock, inverted frameclock</td>
</tr>
<tr class="odd">
<td>SND_SOC_DAIFMT_IB_NF</td>
<td>yes</td>
<td>Inverted frameclock, normal bitclock</td>
</tr>
<tr class="even">
<td>SND_SOC_DAIFMT_IB_IF</td>
<td>yes</td>
<td>Inverted bit- and frameclock</td>
</tr>
<tr class="odd">
<td></td>
<td></td>
<td></td>
</tr>
<tr class="even">
<td>SND_SOC_DAIFMT_CBM_CFM</td>
<td>yes</td>
<td>Codec bit- and frameclock master</td>
</tr>
<tr class="odd">
<td>SND_SOC_DAIFMT_CBS_CFM</td>
<td>no</td>
<td>Codec bitclock slave, frameclock master</td>
</tr>
<tr class="even">
<td>SND_SOC_DAIFMT_CBM_CFS</td>
<td>no</td>
<td>Codec bitclock master, frameclock slave</td>
</tr>
<tr class="odd">
<td>SND_SOC_DAIFMT_CBS_CFS</td>
<td>yes</td>
<td>Codec bit- and frameclock slave</td>
</tr>
</tbody>
</table>

##### DAI sysclk

The DAIs can either use the PLL or the MCLK signal as source.

When using the PLL the DAIs rate should be set to the rate of the PLL. When using MCLK the rate should be set to frequency of the external MCLK signal.

``` {.c}
enum adau17x1_clk_src {
    ADAU17X1_CLK_SRC_MCLK,
    ADAU17X1_CLK_SRC_PLL,
};
```

When using the MCLK as the DAI source it is possible to use an internal prescaler to divide the signals frequency. Valid divider values are 1, 2, 3 and 4.

Example clock divider configuration:

``` {.c}
    ret = snd_soc_dai_set_clkdiv(codec_dai, 0, 4);
```

##### Example DAI configuration

``` {.c}
static int bfin_eval_adau1x81_hw_params(struct snd_pcm_substream *substream,
    struct snd_pcm_hw_params *params)
{
    struct snd_soc_pcm_runtime *rtd = substream->private_data;
    struct snd_soc_dai *cpu_dai = rtd->cpu_dai;
    struct snd_soc_dai *codec_dai = rtd->codec_dai;
    int pll_rate;
    int ret;

    ret = snd_soc_dai_set_fmt(cpu_dai, SND_SOC_DAIFMT_I2S |
            SND_SOC_DAIFMT_NB_NF | SND_SOC_DAIFMT_CBM_CFM);
    if (ret)
        return ret;

    ret = snd_soc_dai_set_fmt(codec_dai, SND_SOC_DAIFMT_I2S |
            SND_SOC_DAIFMT_NB_NF | SND_SOC_DAIFMT_CBM_CFM);
    if (ret)
        return ret;

    switch (params_rate(params)) {
    case 48000:
    case 8000:
    case 12000:
    case 16000:
    case 24000:
    case 32000:
        pll_rate = 48000 * 1024;
        break;
    case 44100:
    case 7350:
    case 11025:
    case 14700:
    case 22050:
    case 29400:
        pll_rate = 44100 * 1024;
        break;
    default:
        return -EINVAL;
    }

    ret = snd_soc_dai_set_pll(codec_dai, ADAU17X1_PLL,
            ADAU17X1_PLL_SRC_MCLK, 12288000, pll_rate);
    if (ret)
        return ret;

    ret = snd_soc_dai_set_sysclk(codec_dai, ADAU17X1_CLK_SRC_PLL, pll_rate,
            SND_SOC_CLOCK_IN);

    return ret;
}


static struct snd_soc_ops bfin_eval_adau1x81_ops = {
    .hw_params = bfin_eval_adau1x81_hw_params,
};

static struct snd_soc_dai_link bfin_eval_adau1x81_dai = {
    .name = "adau1x81",
    .stream_name = "ADAU1X81", 
    .cpu_dai_name = "bfin-i2s.0", 
    .codec_dai_name = "adau-hifi",
    .platform_name = "bfin-i2s-pcm-audio",
    .codec_name = "adau1781.0-0038",
    .ops = &bfin_eval_adau1x81_ops,
};
```

#### TDM configuration

The ADAU1381 and ADAU1781 chips have basic TDM support.

-   The number of slots can be either 2, 4 or 8.
-   The slot width can be 32, 64, 48, 128 or 256
-   The slot mask must be either 0x03 (slot 0 and 1), 0x0c (slot 2 and 3), 0x30 (slot 4 and 5), 0xc0 (slot 6 and 7)

Example TDM configuration:

``` {.c}
    ret = snd_soc_dai_set_tdm_slot(codec_dai, 0x30, 0x0c, 8, 64);
```

ADAU1X81 evaluation board driver
--------------------------------

There is no dedicated Blackfin STAMP evaluation board for the ADAU1381/ADAU1781. During test and driver development we used the [EVAL-ADAU1381Z](https://www.google.com/search?q=EVAL-ADAU1381Z&btnI=lucky)/[EVAL-ADAU1781Z](https://www.google.com/search?q=EVAL-ADAU1781Z&btnI=lucky) board.

It can be easily wired to the Blackfin STAMP SPORT header.

#### Source

###### Status

<table>
<thead>
<tr class="header">
<th>Source</th>
<th>Mainlined?</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><a href="https://www.google.com/search?q=sound/soc/blackfin/bfin-eval-adau1x81.c&amp;btnI=lucky">git</a></td>
<td><a href="https://www.google.com/search?q=sound/soc/blackfin/bfin-eval-adau1x81.c&amp;btnI=lucky">yes</a></td>
</tr>
</tbody>
</table>

###### Files

<table>
<thead>
<tr class="header">
<th>Function</th>
<th>File</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>driver</td>
<td><a href="https://www.google.com/search?q=sound/soc/blackfin/bfin-eval-adau1x81.c&amp;btnI=lucky">sound/soc/blackfin/bfin-eval-adau1x81.c</a></td>
</tr>
</tbody>
</table>

#### Kernel configuration

    Device Drivers  --->
    [*] I2C support  --->
    [*]   I2C Hardware Bus support  --->
    ***     I2C system bus drivers (mostly embedded / system-on-chip) ***
    <*>       Blackfin TWI I2C support
    (100)     Blackfin TWI I2C clock (kHz)

Enable ALSA SoC evaluation board driver:

    Device Drivers  --->
    <M> Sound card support  --->
    <M>   Advanced Linux Sound Architecture  --->
    <M>     ALSA for SoC audio support  --->
    <M>       Support for the EVAL-ADAU1X81 boards on Blackfin eval boards

#### Hardware configuration

Connect the STAMP SPORT 0 port (P6) to the EVAL-ADAU1X81 Control port(J1) and Serial Data Interface(J4) headers.

Note that the SPORT has separate signals for the capture and playback clocks, while the ADAU1381/ADAU1781 uses the same clock signals for both, so the EVAL-ADAU1X81 clock signal pins need to be connected to two STAMP pins each.

<table>
<thead>
<tr class="header">
<th>STAMP pin</th>
<th>EVAL-ADAU1X81 pin</th>
<th>Function</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>P6-26 (SPORT 0 - PJ2_SCL)</td>
<td>J1-1</td>
<td>I2C SCL</td>
</tr>
<tr class="even">
<td>P6-24 (SPORT 0 - PJ3_SDA)</td>
<td>J1-3</td>
<td>I2C SDA</td>
</tr>
<tr class="odd">
<td>P6-6 (SPORT 0 - PJ9_TSCLK0), P6-16 (SPORT 0 - PJ6_RSCLK0)</td>
<td>J4-7</td>
<td>BCLK</td>
</tr>
<tr class="even">
<td>P6-11 (SPORT 0 - PJ10_TFS0), P6-7 (SPORT 0 - PJ7_RFS0)</td>
<td>J4-5</td>
<td>LRCLK</td>
</tr>
<tr class="odd">
<td>P6-8 (SPORT 0 - PJ8_DR0PRI)</td>
<td>J4-9</td>
<td>Captrue data</td>
</tr>
<tr class="even">
<td>P6-14 (SPORT 0 - PJ11_DT0PRI</td>
<td>J4-11</td>
<td>Playback data</td>
</tr>
<tr class="odd">
<td>P6-33</td>
<td>J4-2</td>
<td>GND</td>
</tr>
</tbody>
</table>

#### Driver testing

Load the driver and make sure the sound card is properly instantiated.

:::{NOTE} <!-- ATTRS: box="" bggreen="" -->
:::{HINT} <!-- ATTRS: info="" -->
This specifies any shell prompt running on the target
:::

```bash
root:/> modprobe snd-bf5xx-i2s
root:/> modprobe snd-soc-bf5xx-i2s
root:/> modprobe snd-soc-adau1781
root:/> modprobe snd-soc-bfin-eval-adau1x81
bfin-i2s bfin-i2s.0: dma rx:3 tx:4, err irq:45, regs:ffc00800
dma_alloc_init: dma_page @ 0x02791000 - 256 pages at 0x03f00000
asoc: adau-hifi <-> bfin-i2s.0 mapping ok
ALSA device list:

    #0: bfin-eval-adau1x81

```

:::


:::{NOTE} <!-- ATTRS: box="" bggreen="" -->
:::{HINT} <!-- ATTRS: info="" -->
This specifies any shell prompt running on the target
:::

```bash
root:/> modprobe snd-pcm-oss
root:/> tone
TONE: generating sine wave at 1000 Hz...

root:/> arecord -f cd | aplay
Recording WAVE 'stdin' : Signed 16 bit Little Endian, Rate 44100 Hz, Stereo
Playing WAVE 'stdin' : Signed 16 bit Little Endian, Rate 44100 Hz, Stereo
```

:::


#### More information

-   [SigmaStudio](resources/tools-software/sigmastudio)
-   [SigmaDSP Firmware Utility for Linux](resources/tools-software/linux-software/sigmadsp_genfirmware)
-   [SigmaStudio Network Utility for Linux](resources/tools-software/linux-software/sigmatcp)

![](page>resources/tools-software/linux-drivers/need_help#need help&noheader&firstseconly&noeditbtn)
