---
wiki-source: https://wiki.analog.com/resources/tools-software/linux-drivers/sound/ad1835a
title: AD1839A: 2 ADC, 6 DAC 96 kHz, 24-Bit Sigma Delta Codec
---

# AD1836 Sound CODEC Linux Driver

### Supported devices

-   [AD1835A](https://analog.com/AD1835A)
-   [AD1836A](https://analog.com/AD1836A)
-   [AD1838A](https://analog.com/AD1838A)
-   [AD1837A](https://analog.com/AD1837A)
-   [AD1839A](https://analog.com/AD1839A)

### Evaluation Boards

-   [AD1836AZ-DBRD](https://analog.com/AD1836AZ-DBRD)

## Source Code

#### Status

<table>
<thead>
<tr class="header">
<th>Source</th>
<th>Mainline?</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><a href="git.linux.org&gt;sound/soc/codecs/ad1836.c">git</a></td>
<td><a href="git.linux.org&gt;sound/soc/codecs/ad1836.c">Yes</a></td>
</tr>
</tbody>
</table>

#### Files

<table>
<thead>
<tr class="header">
<th>Function</th>
<th>File</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>driver</td>
<td><a href="git.linux.org&gt;sound/soc/codecs/ad1836.c">sound/soc/codecs/ad1836.c</a></td>
</tr>
<tr class="even">
<td>include</td>
<td><a href="git.linux.org&gt;sound/soc/codecs/ad1836.h">sound/soc/codecs/ad1836.h</a></td>
</tr>
</tbody>
</table>

## Example device initialization

<!-- CMDS: firstseconly noeditbtn -->
```{include} software_linux_docs_platform_and_bus_model_SUB_Declaring_SPI_slave_devices.md
```

You need to set the modalias of your SPI info according to your codec. Valid values are "ad1835", "ad1836", "ad1837", "ad1838" and "ad1839". You'll also have to adjust bus_num and chip_select according to your board setup.

``` c
static struct spi_board_info board_spi_board_info[] __initdata = {
    [--snip--]
    {
        .modalias = "ad1836",
        .max_speed_hz = 3125000,     /* max spi clock (SCK) speed in HZ */
        .bus_num = 0,
        .chip_select = 4, /* CS, change it for your board */
        .mode = SPI_MODE_3,
    },
    [--snip--]
};
```

``` c
static int __init board_init(void)
{
    [--snip--]

    spi_register_board_info(board_spi_board_info, ARRAY_SIZE(board_spi_board_info));

    [--snip--]

    return 0;
}
arch_initcall(board_init);
```

### ASoC DAPM Widgets

<table>
<thead>
<tr class="header">
<th>Name</th>
<th>Description</th>
<th>Model</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>DAC1OUT</td>
<td>DAC Channel1 Output</td>
<td>AD1835A, AD1836A, AD1838A</td>
</tr>
<tr class="even">
<td>DAC2OUT</td>
<td>DAC Channel2 Output</td>
<td>AD1835A, AD1836A, AD1838A</td>
</tr>
<tr class="odd">
<td>DAC3OUT</td>
<td>DAC Channel3 Output</td>
<td>AD1835A, AD1836A, AD1838A</td>
</tr>
<tr class="even">
<td>DAC4OUT</td>
<td>DAC Channel4 Output</td>
<td>AD1835A</td>
</tr>
<tr class="odd">
<td>ADC1IN</td>
<td>ADC Channel1 Input</td>
<td>AD1835A, AD1836A, AD1838A</td>
</tr>
<tr class="even">
<td>ADC2IN</td>
<td>ADC Channel2 Input</td>
<td>AD1836A</td>
</tr>
</tbody>
</table>

### ALSA Controls

<table>
<thead>
<tr class="header">
<th>Name</th>
<th>Description</th>
<th>Model</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>ADC High Pass Filter Switch</td>
<td>Enable/Disable ADC high-pass filter</td>
<td>AD1835A, AD1836A, AD1838A</td>
</tr>
<tr class="even">
<td>Playback Deemphasis</td>
<td>Select playback de-emphasis. Possible Values: "None", "44.1kHz", "32kHz", "48kHz"</td>
<td>AD1835A, AD1836A, AD1838A</td>
</tr>
<tr class="odd">
<td>DAC1 Playback Volume</td>
<td>DAC Channel 1 volume</td>
<td>AD1835A, AD1836A, AD1838A</td>
</tr>
<tr class="even">
<td>DAC2 Playback Volume</td>
<td>DAC Channel 2 volume</td>
<td>AD1835A, AD1836A, AD1838A</td>
</tr>
<tr class="odd">
<td>DAC3 Playback Volume</td>
<td>DAC Channel 3 volume</td>
<td>AD1835A, AD1836A, AD1838A</td>
</tr>
<tr class="even">
<td>DAC4 Playback Volume</td>
<td>DAC Channel 4 volume</td>
<td>AD1835A</td>
</tr>
<tr class="odd">
<td>DAC1 Playback Switch</td>
<td>Mute/Unmute DAC Channel 1</td>
<td>AD1835A, AD1836A, AD1838A</td>
</tr>
<tr class="even">
<td>DAC2 Playback Switch</td>
<td>Mute/Unmute DAC Channel 2</td>
<td>AD1835A, AD1836A, AD1838A</td>
</tr>
<tr class="odd">
<td>DAC3 Playback Switch</td>
<td>Mute/Unmute DAC Channel 3</td>
<td>AD1835A, AD1836A, AD1838A</td>
</tr>
<tr class="even">
<td>DAC4 Playback Switch</td>
<td>Mute/Unmute DAC Channel 4</td>
<td>AD1835A</td>
</tr>
<tr class="odd">
<td>ADC1 Capture Switch</td>
<td>Mute/Unmute ADC Channel1</td>
<td>AD1835A, AD1836A, AD1838A</td>
</tr>
<tr class="even">
<td>ADC2 Capture Switch</td>
<td>Mute/Unmute ADC Channel2</td>
<td>AD1836A</td>
</tr>
<tr class="odd">
<td>ADC2 Capture Volume</td>
<td>Gain for ADC Channel 2</td>
<td>AD1836A</td>
</tr>
</tbody>
</table>

### DAI Configuration

The CODEC driver registers one DAI named depending on the chip model used.

<table>
<thead>
<tr class="header">
<th>DAI name</th>
<th>Model</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>"ad1835-hifi"</td>
<td>AD1835, AD1837</td>
</tr>
<tr class="even">
<td>"ad1836-hifi"</td>
<td>AD1836</td>
</tr>
<tr class="odd">
<td>"ad1838-hifi"</td>
<td>AD1838, AD1839</td>
</tr>
</tbody>
</table>

#### Supported DAI formats

<table>
<thead>
<tr class="header">
<th>Name</th>
<th>Supported by driver</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>SND_SOC_DAIFMT_I2S</td>
<td>no</td>
<td>I2S mode</td>
</tr>
<tr class="even">
<td>SND_SOC_DAIFMT_RIGHT_J</td>
<td>no</td>
<td>Right Justified mode</td>
</tr>
<tr class="odd">
<td>SND_SOC_DAIFMT_LEFT_J</td>
<td>no</td>
<td>Left Justified mode</td>
</tr>
<tr class="even">
<td>SND_SOC_DAIFMT_DSP_A</td>
<td>yes</td>
<td>data MSB after FRM LRC</td>
</tr>
<tr class="odd">
<td>SND_SOC_DAIFMT_DSP_B</td>
<td>no</td>
<td>data MSB during FRM LRC</td>
</tr>
<tr class="even">
<td>SND_SOC_DAIFMT_AC97</td>
<td>no</td>
<td>AC97 mode</td>
</tr>
<tr class="odd">
<td>SND_SOC_DAIFMT_PDM</td>
<td>no</td>
<td>Pulse density modulation</td>
</tr>
<tr class="even">
<td></td>
<td></td>
<td></td>
</tr>
<tr class="odd">
<td>SND_SOC_DAIFMT_NB_NF</td>
<td>no</td>
<td>Normal bit- and frameclock</td>
</tr>
<tr class="even">
<td>SND_SOC_DAIFMT_NB_IF</td>
<td>no</td>
<td>Normal bitclock, inverted frameclock</td>
</tr>
<tr class="odd">
<td>SND_SOC_DAIFMT_IB_NF</td>
<td>no</td>
<td>Inverted frameclock, normal bitclock</td>
</tr>
<tr class="even">
<td>SND_SOC_DAIFMT_IB_IF</td>
<td>yes</td>
<td>Inverted bit- and frameclock</td>
</tr>
<tr class="odd">
<td></td>
<td></td>
<td></td>
</tr>
<tr class="even">
<td>SND_SOC_DAIFMT_CBM_CFM</td>
<td>yes</td>
<td>Codec bit- and frameclock master</td>
</tr>
<tr class="odd">
<td>SND_SOC_DAIFMT_CBS_CFM</td>
<td>no</td>
<td>Codec bitclock slave, frameclock master</td>
</tr>
<tr class="even">
<td>SND_SOC_DAIFMT_CBM_CFS</td>
<td>no</td>
<td>Codec bitclock master, frameclock slave</td>
</tr>
<tr class="odd">
<td>SND_SOC_DAIFMT_CBS_CFS</td>
<td>no</td>
<td>Codec bit- and frameclock slave</td>
</tr>
</tbody>
</table>

#### Example DAI Configuration

``` c
static int bf5xx_ad1836_hw_params(struct snd_pcm_substream *substream,
    struct snd_pcm_hw_params *params)
{
    struct snd_soc_pcm_runtime *rtd = substream->private_data;
    struct snd_soc_dai *cpu_dai = rtd->cpu_dai;
    struct snd_soc_dai *codec_dai = rtd->codec_dai;
    int ret;

    /* set cpu DAI configuration */
    ret = snd_soc_dai_set_fmt(cpu_dai, SND_SOC_DAIFMT_DSP_A |
        SND_SOC_DAIFMT_IB_IF | SND_SOC_DAIFMT_CBM_CFM);
    if (ret < 0)
        return ret;

    /* set codec DAI configuration */
    ret = snd_soc_dai_set_fmt(codec_dai, SND_SOC_DAIFMT_DSP_A |
        SND_SOC_DAIFMT_IB_IF | SND_SOC_DAIFMT_CBM_CFM);
    if (ret < 0)
        return ret;

    return 0;
}

static struct snd_soc_ops bf5xx_ad1836_ops = {
    .hw_params = bf5xx_ad1836_hw_params,
};

static struct snd_soc_dai_link bf5xx_ad1836_dai = {
    .name = "ad1836",
    .stream_name = "AD1836",
    .cpu_dai_name = "bfin-tdm.0",
    .codec_dai_name = "ad1836-hifi",
    .platform_name = "bfin-tdm-pcm-audio",
    .codec_name = "spi0.4",
    .ops = &bf5xx_ad1836_ops,
};
```

## AD1836 evaluation board driver

### Adding Kernel Support - As a module

To add support for the built-in codec AD183X of BF5XX to the kernel build system, a few things must be enabled properly for things to work.The configuration is as following:

    Linux Kernel Configuration
      Device Drivers  ---> 
        Sound  ---> 
          <M> Sound card support
            Advanced Linux Sound Architecture  --->
              <M> Advanced Linux Sound Architecture
              < > Sequencer support
              <M> OSS Mixer API 
              <M> OSS PCM (digital audio) API
              <M>   ALSA for SoC audio support  --->
                  <M>   SoC I2S(TDM mode) Audio for the ADI BF5xx chip
                  <M>   SoC AD183X Audio support for BF5xx                      

Doing this will create modules (outside the kernel). The modules will be inserted automatically when it is needed. You can also build sound driver into kernel.

#### Testing the built in kernel driver

If audio is configured as modules, skip this section. If audio is built into kernel and you have booted the kernel, there are a few things to check to ensure audio is working:

1.  Check the boot messages to see if you have booted the correct kernel. During kernel boot, it should print out:

```{=html}
<!-- -->
```
          Advanced Linux Sound Architecture Driver Version 1.0.12rc1 (Thu Jun 22 13:55:50 2006 UTC).
          ASoC version 0.13.1
          dma rx:3 tx:4, err irq:45, regs:
          asoc: AD183X <-> bf5xx-tdm mapping ok
          ALSA device list:
            #0: bf5xx_ad183x (AD183X)

#### Testing the audio module

    root:/> modprobe snd-ad183x
    dma rx:3 tx:4, err irq:45, regs:ffc00800
    asoc: AD183X <-> bf5xx-tdm mapping ok
    root:/> modprobe snd-pcm-oss
    root:/> lsmod
    Module                  Size  Used by
    snd_pcm_oss            28414  0
    snd_mixer_oss          10215  1 snd_pcm_oss
    snd_ad183x               801  0
    snd_bf5xx_tdm           1857  1 snd_ad183x
    snd_soc_ad183x          8033  1 snd_ad183x
    snd_soc_bf5xx_tdm       2157  1 snd_ad183x
    snd_soc_bf5xx_sport     9392  2 snd_bf5xx_tdm,snd_soc_bf5xx_tdm
    snd_soc_core           33839  4 snd_ad183x,snd_bf5xx_tdm,snd_soc_ad183x,snd_soc_bf5xx_tdm
    snd_pcm                44936  3 snd_pcm_oss,snd_bf5xx_tdm,snd_soc_core
    snd_page_alloc          2753  1 snd_pcm
    snd_timer              12412  1 snd_pcm
    snd                    32171  5 snd_pcm_oss,snd_mixer_oss,snd_soc_core,snd_pcm,snd_timer
    input_core             15713  1 snd
    soundcore               3591  1 snd

    root:~> tone
    TONE: generating sine wave at 1000 Hz...

### Driver testing

1.  Check the output

```{code-block} bash
root:~> **tone**
TONE: generating sine wave at 1000 Hz...
```
You should hear something out of the headphone Jack.

1.  Check and set the audio mixer:

```{code-block} bash
root:/> amixer
Simple mixer control 'Playback Deemphasis',0

    Capabilities: enum
    Items: 'None' '44.1kHz' '32kHz' '48kHz'
    Item0: '48kHz'

Simple mixer control 'ADC High Pass Filter',0

    Capabilities: pswitch pswitch-joined
    Playback channels: Mono
    Mono: Playback [on]

Simple mixer control 'ADC1',0

    Capabilities: pswitch
    Playback channels: Front Left - Front Right
    Mono:
    Front Left: Playback [on]
    Front Right: Playback [on]

Simple mixer control 'ADC2',0

    Capabilities: pswitch
    Playback channels: Front Left - Front Right
    Mono:
    Front Left: Playback [on]
    Front Right: Playback [on]

Simple mixer control 'DAC1',0

    Capabilities: volume pswitch
    Playback channels: Front Left - Front Right
    Capture channels: Front Left - Front Right
    Limits: 0 - 1023
    Front Left: 1023 [100%] Playback [on]
    Front Right: 1023 [100%] Playback [on]

Simple mixer control 'DAC2',0

    Capabilities: volume pswitch
    Playback channels: Front Left - Front Right
    Capture channels: Front Left - Front Right
    Limits: 0 - 1023
    Front Left: 1023 [100%] Playback [on]
    Front Right: 1023 [100%] Playback [on]

Simple mixer control 'DAC3',0

    Capabilities: volume pswitch
    Playback channels: Front Left - Front Right
    Capture channels: Front Left - Front Right
    Limits: 0 - 1023
    Front Left: 1023 [100%] Playback [on]
    Front Right: 1023 [100%] Playback [on]

root:/> amixer sset 'DAC3' 200
Simple mixer control 'DAC3',0

    Capabilities: volume pswitch
    Playback channels: Front Left - Front Right
    Capture channels: Front Left - Front Right
    Limits: 0 - 1023
    Front Left: 200 [20%] Playback [on]
    Front Right: 200 [20%] Playback [on]

```

    Also you can run "alsamixer" to get graphic configuration interface, OSS-based "mixer" can work too.
    - Check to make sure mp3s work (assuming you have built mp3play),
      - The first step is to download a mp3 file onto the platform. The ''wget'' command assumes that networking is properly configured (you have an IP number, the default gateway is set, and DNS servers can be accessed), and working. ```{code-block} bashroot:/> **cd /var**

root:/var> **wget <http://www.radiocrazy.com/shows/A/AbbottCostello/ABCOWhosOnFirstclip.mp3>**
```

      - Next, play it with mp3play: ```{code-block} bashroot:/var> **mp3play ABCOWhosOnFirstclip.mp3**```
    - You can play it in one step with: ```{code-block} bashroot:~> **mp3play http://www.radiocrazy.com/shows/A/AbbottCostello/ABCOWhosOnFirstclip.mp3**

http://www.radiocrazy.com/shows/A/AbbottCostello/ABCOWhosOnFirstclip.mp3: MPEG2-III (0 ms)
```

1.  Optionally check to make sure the mic and headphone are working properly: ```{code-block} bash

root:~> **arecord -d 10 test.wav**
Recording WAVE "test.wav" : Unsigned 8 bit, Rate 8000 Hz, Mono
root:~> **aplay test.wav**
``` This should record 10 seconds of whatever is on the Line, and then play it back over the output.

1.  You should also be able to do a "talkthrough", and hear on the speakers anything you put on the line. ```{code-block} bashroot:~> **arecord | aplay**```
