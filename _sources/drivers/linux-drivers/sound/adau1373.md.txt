---
wiki-source: https://wiki.analog.com/resources/tools-software/linux-drivers/sound/adau1373
title: ADAU1373: Low Power Codec with Speaker and Headphone Amplifier
---

ADAU1373 Sound CODEC Linux Driver
=================================

Supported Devices
-----------------

-   [ADAU1373](https://www.google.com/search?q=ADAU1373&btnI=lucky)

Evaluation Boards
-----------------

-   [EVAL-ADAU1373Z](https://www.google.com/search?q=EVAL-ADAU1373Z&btnI=lucky)

Source Code
-----------

# Status

<table>
<thead>
<tr class="header">
<th>Source</th>
<th>Mainlined?</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><a href="https://www.google.com/search?q=sound/soc/codecs/adau1373.c&amp;btnI=lucky">git</a></td>
<td><a href="https://www.google.com/search?q=sound/soc/codecs/adau1373.c&amp;btnI=lucky">Yes</a></td>
</tr>
</tbody>
</table>

##### Files

<table>
<thead>
<tr class="header">
<th>Function</th>
<th>File</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>driver</td>
<td><a href="https://www.google.com/search?q=sound/soc/codecs/adau1373.c&amp;btnI=lucky">sound/soc/codecs/adau1373.c</a></td>
</tr>
<tr class="even">
<td>include</td>
<td><a href="https://www.google.com/search?q=sound/soc/codecs/adau1373.h&amp;btnI=lucky">sound/soc/codecs/adau1373.h</a></td>
</tr>
<tr class="odd">
<td>include</td>
<td><a href="https://www.google.com/search?q=include/sound/adau1373.h&amp;btnI=lucky">include/sound/adau1373.h</a></td>
</tr>
</tbody>
</table>

Example device initialization
-----------------------------

![](page>software/linux/docs/platform_and_bus_model#Platform Data&noheader&firstseconly&noeditbtn)

#### I2C

![](page>software/linux/docs/platform_and_bus_model#Declaring I2C devices&firstseconly&noeditbtn)

``` {.c}
static struct i2c_board_info __initdata bfin_i2c_board_info[] = {

    [--snip--]
    {
        I2C_BOARD_INFO("adau1373", 0x1a),
    },
    [--snip--]
}

```

``` {.c}
static int __init stamp_init(void)
{
    [--snip--]
    i2c_register_board_info(0, bfin_i2c_board_info,
                ARRAY_SIZE(bfin_i2c_board_info));
    [--snip--]

    return 0;
}
arch_initcall(board_init);
```

ASoC DAPM Widgets
-----------------

<table>
<thead>
<tr class="header">
<th>Name</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>AIN1L</td>
<td>Left Channel Input 1</td>
</tr>
<tr class="even">
<td>AIN1R</td>
<td>Right Channel Input 1</td>
</tr>
<tr class="odd">
<td>AIN2L</td>
<td>Left Channel Input 2</td>
</tr>
<tr class="even">
<td>AIN2R</td>
<td>Right Channel Input 2</td>
</tr>
<tr class="odd">
<td>AIN3L</td>
<td>Left Channel Input 3</td>
</tr>
<tr class="even">
<td>AIN3R</td>
<td>Right Channel Input 3</td>
</tr>
<tr class="odd">
<td>AIN4L</td>
<td>Left Channel Input 4</td>
</tr>
<tr class="even">
<td>AIN4R</td>
<td>Right Channel Input 4</td>
</tr>
<tr class="odd">
<td>DMIC1DAT</td>
<td>Serial Data Input Digital Microphone 1 and 2</td>
</tr>
<tr class="even">
<td>DMIC2DAT</td>
<td>Serial Data Input Digital Microphone 3 and 4</td>
</tr>
<tr class="odd">
<td>LOUT1L</td>
<td>Left Channel Line Output 1</td>
</tr>
<tr class="even">
<td>LOUT1R</td>
<td>Right Channel Line Output 1</td>
</tr>
<tr class="odd">
<td>LOUT2L</td>
<td>Left Channel Line Output 2</td>
</tr>
<tr class="even">
<td>LOUT2R</td>
<td>Right Channel Line Output 2</td>
</tr>
<tr class="odd">
<td>HPL</td>
<td>Left Headphone Output</td>
</tr>
<tr class="even">
<td>HPR</td>
<td>Right Headphone Output</td>
</tr>
<tr class="odd">
<td>SPKL</td>
<td>Left Speaker Output</td>
</tr>
<tr class="even">
<td>SPKR</td>
<td>Right Speaker Output</td>
</tr>
<tr class="odd">
<td>EP</td>
<td>Eearpiece Output</td>
</tr>
<tr class="even">
<td>MICBIAS1</td>
<td>Micbias 1 supply</td>
</tr>
<tr class="odd">
<td>MICBIAS2</td>
<td>Micbias 2 supply</td>
</tr>
</tbody>
</table>

ALSA Controls
-------------

<table>
<thead>
<tr class="header">
<th>Name</th>
<th>Description</th>
<th>Configuration</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>AIF1 Capture Volume</td>
<td>Digital Audio Interface A Recording Volume</td>
<td></td>
</tr>
<tr class="even">
<td>AIF2 Capture Volume</td>
<td>Digital Audio Interface B Recording Volume</td>
<td></td>
</tr>
<tr class="odd">
<td>AIF3 Capture Volume</td>
<td>Digital Audio Interface C Recording Volume</td>
<td></td>
</tr>
<tr class="even">
<td>ADC Capture Volume</td>
<td>ADC Recording Volume</td>
<td></td>
</tr>
<tr class="odd">
<td>DMIC Capture Volume</td>
<td>DMIC Recording Volume</td>
<td></td>
</tr>
<tr class="even">
<td>Input 1 Capture Volume</td>
<td>Input 1 Gain</td>
<td></td>
</tr>
<tr class="odd">
<td>Input 2 Capture Volume</td>
<td>Input 2 Gain</td>
<td></td>
</tr>
<tr class="even">
<td>Input 3 Capture Volume</td>
<td>Input 3 Gain</td>
<td></td>
</tr>
<tr class="odd">
<td>Input 4 Capture Volume</td>
<td>Input 4 Gain</td>
<td></td>
</tr>
<tr class="even">
<td>Input 1 Boost Capture Volume</td>
<td>Input 1 ADC Boost (+20dB)</td>
<td></td>
</tr>
<tr class="odd">
<td>Input 2 Boost Capture Volume</td>
<td>Input 2 ADC Boost (+20dB)</td>
<td></td>
</tr>
<tr class="even">
<td>Input 3 Boost Capture Volume</td>
<td>Input 3 ADC Boost (+20dB)</td>
<td></td>
</tr>
<tr class="odd">
<td>Input 4 Boost Capture Volume</td>
<td>Input 4 ADC Boost (+20dB)</td>
<td></td>
</tr>
<tr class="even">
<td>AIF1 Playback Volume</td>
<td>Digital Audio Interface A Playback Datapath Volume</td>
<td></td>
</tr>
<tr class="odd">
<td>AIF2 Playback Volume</td>
<td>Digital Audio Interface B Playback Datapath Volume</td>
<td></td>
</tr>
<tr class="even">
<td>AIF3 Playback Volume</td>
<td>Digital Audio Interface C Playback Datapath Volume</td>
<td></td>
</tr>
<tr class="odd">
<td>DAC1 Playback Volume</td>
<td>DAC1 Playback Volume</td>
<td></td>
</tr>
<tr class="even">
<td>DAC2 Playback Volume</td>
<td>DAC2 Playback Volume</td>
<td></td>
</tr>
<tr class="odd">
<td>Lineout1 Playback Volume</td>
<td>Lineout 1 Volume</td>
<td></td>
</tr>
<tr class="even">
<td>Lineout2 Playback Volume</td>
<td>Lineout 2 Volume</td>
<td>Single-ended lineout</td>
</tr>
<tr class="odd">
<td>Speaker Playback Volume</td>
<td>Speaker Out Volume</td>
<td></td>
</tr>
<tr class="even">
<td>Headphone Playback Volume</td>
<td>Heaphone Out Volume</td>
<td></td>
</tr>
<tr class="odd">
<td>Earpiece Playback Volume</td>
<td>Earpiece Amplifier Gain</td>
<td></td>
</tr>
<tr class="even">
<td>AIF1 Boost Playback Volume</td>
<td>Digital Audio Interface A Playback Gain (+6dB)</td>
<td></td>
</tr>
<tr class="odd">
<td>AIF2 Boost Playback Volume</td>
<td>Digital Audio Interface B Playback Gain (+6dB)</td>
<td></td>
</tr>
<tr class="even">
<td>AIF3 Boost Playback Volume</td>
<td>Digital Audio Interface C Playback Gain (+6dB)</td>
<td></td>
</tr>
<tr class="odd">
<td>AIF1 Boost Capture Volume</td>
<td>Digital Audio Interface C Recording Gain (+6dB)</td>
<td></td>
</tr>
<tr class="even">
<td>AIF2 Boost Capture Volume</td>
<td>Digital Audio Interface C Recording Gain (+6dB)</td>
<td></td>
</tr>
<tr class="odd">
<td>AIF3 Boost Capture Volume</td>
<td>Digital Audio Interface C Recording Gain (+6dB)</td>
<td></td>
</tr>
<tr class="even">
<td>ADC Boost Capture Volume</td>
<td>ADC Recording Gain (+6dB)</td>
<td></td>
</tr>
<tr class="odd">
<td>DMIC Boost Capture Volume</td>
<td>DMIC Recording Gain (+6dB)</td>
<td></td>
</tr>
<tr class="even">
<td>DAC1 Boost Playback Volume</td>
<td>DAC1 Playback Gain (+6dB)</td>
<td></td>
</tr>
<tr class="odd">
<td>DAC2 Boost Playback Volume</td>
<td>DAC1 Playback Gain (+6dB)</td>
<td></td>
</tr>
<tr class="even">
<td>Speaker Boost Playback Volume</td>
<td>Speaker Output Gain</td>
<td></td>
</tr>
<tr class="odd">
<td>Lineout1 LR Mux</td>
<td>Lineout1 Left-Right Mux (Mono Stereo Control)<br />
Valid values: "Mute", "Right Channel (L+R)", "Left Channel (L+R)", "Stereo"</td>
<td></td>
</tr>
<tr class="even">
<td>Lineout2 LR Mux</td>
<td>Lineout2 Left-Right Mux (Mono Stereo Control)<br />
Valid values: "Mute", "Right Channel (L+R)", "Left Channel (L+R)", "Stereo"</td>
<td>Single-ended lineout</td>
</tr>
<tr class="odd">
<td>Speaker LR Mux</td>
<td>Speaker Left-Right Mux (Mono Stereo Control)<br />
Valid values: "Mute", "Right Channel (L+R)", "Left Channel (L+R)", "Stereo"</td>
<td></td>
</tr>
<tr class="even">
<td>HPF Cutoff</td>
<td>High-pass-filter cutoff frequency.<br />
Valid values: "3.7Hz", "50Hz", "100Hz", ... steps of 50Hz ..., "800Hz"</td>
<td></td>
</tr>
<tr class="odd">
<td>HPF Switch</td>
<td>Enable/Disable High-pass-filter</td>
<td></td>
</tr>
<tr class="even">
<td>HPF Channel</td>
<td>Hight-pass-filter channel.<br />
Valid values: "Channel1", "Channel2", "Channel3", "Channel4", "Channel5"</td>
<td></td>
</tr>
<tr class="odd">
<td>Bass HPF Cutoff</td>
<td>Bass High-pass-filter cutoff frequency.<br />
Valid values: "158Hz", "232Hz", "347Hz", "520Hz"</td>
<td></td>
</tr>
<tr class="even">
<td>Bass Clip Level Threshold</td>
<td>Signal Extend Density (Clip Level). Overdrive level for bass enhancement.<br />
Valid values: "0.125", "0.250", "0.370", "0.500", "0.625", "0.750", "0.875"</td>
<td></td>
</tr>
<tr class="odd">
<td>Bass LPF Cutoff</td>
<td>Bass Low-pass-filter cutoff frequency.<br />
Valid values: "801Hz", "1001Hz"</td>
<td></td>
</tr>
<tr class="even">
<td>Bass Playback Switch</td>
<td>Enable/Disable Bass Enhancement</td>
<td></td>
</tr>
<tr class="odd">
<td>Bass Playback Volume</td>
<td>Bass Enhancement Gain</td>
<td></td>
</tr>
<tr class="even">
<td>Bass Channel</td>
<td>Bass Enhancement Channel.<br />
Valid values: "Channel1", "Channel2", "Channel3", "Channel4", "Channel5"</td>
<td></td>
</tr>
<tr class="odd">
<td>3D Freq</td>
<td>3D Enhancement cutoff frequency (relative to the sampling rate).<br />
Valid values: "No 3D", "0.03125 fs", "0.04583 fs", "0.075 fs", "0.11458 fs", "0.16875 fs", "0.27083 fs"</td>
<td></td>
</tr>
<tr class="even">
<td>3D Level</td>
<td>3D Enhancement effect level.<br />
Valid values: "0%", "6.67%", "13.33%", "20%", "26.67%", "33.33%", "40%", "46.67%", "53.33%",<br />
"60%", "66.67%", "73.33%", "80%", "86.67", "93.33%", "100%"</td>
<td></td>
</tr>
<tr class="odd">
<td>3D Playback Switch</td>
<td>Enable/Disable 3D Enhancement</td>
<td></td>
</tr>
<tr class="even">
<td>3D Playback Volume</td>
<td>3D Enhancement Gain</td>
<td></td>
</tr>
<tr class="odd">
<td>3D Channel</td>
<td>3D Enhancement Channel.<br />
Valid values: "Channel1", "Channel2", "Channel3", "Channel4", "Channel5"</td>
<td></td>
</tr>
<tr class="even">
<td>Zero Cross Switch</td>
<td>Enable/Disable Zero-Cross-Detection for volume updates</td>
<td></td>
</tr>
<tr class="odd">
<td>DRC1 Channel</td>
<td>Dynamic Range Control 1 Channel.<br />
Valid values: "Channel1", "Channel2", "Channel3", "Channel4", "Channel5"</td>
<td></td>
</tr>
<tr class="even">
<td>DRC2 Channel</td>
<td>Dynamic Range Control 2 Channel.<br />
Valid values: "Channel1", "Channel2", "Channel3", "Channel4", "Channel5"</td>
<td></td>
</tr>
<tr class="odd">
<td>DRC3 Channel</td>
<td>Dynamic Range Control 3 Channel.<br />
Valid values: "Channel1", "Channel2", "Channel3", "Channel4", "Channel5"</td>
<td></td>
</tr>
</tbody>
</table>

PLL Configuration
-----------------

The ADAU1373 features two PLLs:

``` {.c}
enum adau1373_pll {
    ADAU1373_PLL1 = 0,
    ADAU1373_PLL2 = 1,
};
```

Each PLLs input frequency can be selected from a variety of signals:

``` {.c}
enum adau1373_pll_src {
    ADAU1373_PLL_SRC_MCLK1 = 0,
    ADAU1373_PLL_SRC_BCLK1 = 1,
    ADAU1373_PLL_SRC_BCLK2 = 2,
    ADAU1373_PLL_SRC_BCLK3 = 3,
    ADAU1373_PLL_SRC_LRCLK1 = 4,
    ADAU1373_PLL_SRC_LRCLK2 = 5,
    ADAU1373_PLL_SRC_LRCLK3 = 6,
    ADAU1373_PLL_SRC_GPIO1 = 7,
    ADAU1373_PLL_SRC_GPIO2 = 8,
    ADAU1373_PLL_SRC_GPIO3 = 9,
    ADAU1373_PLL_SRC_GPIO4 = 10,
    ADAU1373_PLL_SRC_MCLK2 = 11,
};
```

The input frequency must configured to be between 7813 and 27000000 Hz. The output frequency must be configured to be between 45158000 and 49152000. Configuring the PLL with other input or output frequency will fail.

The PLL runs at 1024 times the base sample rate. So for a 48000 Hz based sample rate you\'d normally choose 49152000 Hz for the PLL output frequncey and for a 44100 Hz based sample rate 45158400 Hz.

DAI configuration
-----------------

The codec driver registers three DAIs:

-   \"adau1373-aif1\" (Digital Audio Interface A)
-   \"adau1373-aif2\" (Digital Audio Interface B)
-   \"adau1373-aif3\" (Digital Audio Interface C)

#### Supported DAI formats

<table>
<thead>
<tr class="header">
<th>Name</th>
<th>Supported by driver</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>SND_SOC_DAIFMT_I2S</td>
<td>yes</td>
<td>I2S mode</td>
</tr>
<tr class="even">
<td>SND_SOC_DAIFMT_RIGHT_J</td>
<td>yes</td>
<td>Right Justified mode</td>
</tr>
<tr class="odd">
<td>SND_SOC_DAIFMT_LEFT_J</td>
<td>yes</td>
<td>Left Justified mode</td>
</tr>
<tr class="even">
<td>SND_SOC_DAIFMT_DSP_A</td>
<td>no</td>
<td>data MSB after FRM LRC</td>
</tr>
<tr class="odd">
<td>SND_SOC_DAIFMT_DSP_B</td>
<td>yes</td>
<td>data MSB during FRM LRC</td>
</tr>
<tr class="even">
<td>SND_SOC_DAIFMT_AC97</td>
<td>no</td>
<td>AC97 mode</td>
</tr>
<tr class="odd">
<td>SND_SOC_DAIFMT_PDM</td>
<td>no</td>
<td>Pulse density modulation</td>
</tr>
<tr class="even">
<td></td>
<td></td>
<td></td>
</tr>
<tr class="odd">
<td>SND_SOC_DAIFMT_NB_NF</td>
<td>yes</td>
<td>Normal bit- and frameclock</td>
</tr>
<tr class="even">
<td>SND_SOC_DAIFMT_NB_IF</td>
<td>yes</td>
<td>Normal bitclock, inverted frameclock</td>
</tr>
<tr class="odd">
<td>SND_SOC_DAIFMT_IB_NF</td>
<td>yes</td>
<td>Inverted frameclock, normal bitclock</td>
</tr>
<tr class="even">
<td>SND_SOC_DAIFMT_IB_IF</td>
<td>yes</td>
<td>Inverted bit- and frameclock</td>
</tr>
<tr class="odd">
<td></td>
<td></td>
<td></td>
</tr>
<tr class="even">
<td>SND_SOC_DAIFMT_CBM_CFM</td>
<td>yes</td>
<td>Codec bit- and frameclock master</td>
</tr>
<tr class="odd">
<td>SND_SOC_DAIFMT_CBS_CFM</td>
<td>no</td>
<td>Codec bitclock slave, frameclock master</td>
</tr>
<tr class="even">
<td>SND_SOC_DAIFMT_CBM_CFS</td>
<td>no</td>
<td>Codec bitclock master, frameclock slave</td>
</tr>
<tr class="odd">
<td>SND_SOC_DAIFMT_CBS_CFS</td>
<td>yes</td>
<td>Codec bit- and frameclock slave</td>
</tr>
</tbody>
</table>

#### DAI sysclk

The DAIs can either use PLL1 or PLL2 as source. When configuring a DAI its rate should be set to the rate of the source PLL.

``` {.c}
enum adau1373_clk_src {
    ADAU1373_CLK_SRC_PLL1 = 0,
    ADAU1373_CLK_SRC_PLL2 = 1,
};
```

#### Example DAI configuration

``` {.c}
static int bfin_eval_adau1373_hw_params(struct snd_pcm_substream *substream,
    struct snd_pcm_hw_params *params)
{
    struct snd_soc_pcm_runtime *rtd = substream->private_data;
    struct snd_soc_dai *cpu_dai = rtd->cpu_dai;
    struct snd_soc_dai *codec_dai = rtd->codec_dai;
    int ret;
    int pll_rate;

    ret = snd_soc_dai_set_fmt(cpu_dai, SND_SOC_DAIFMT_I2S |
            SND_SOC_DAIFMT_NB_NF | SND_SOC_DAIFMT_CBM_CFM);
    if (ret)
        return ret;

    ret = snd_soc_dai_set_fmt(codec_dai, SND_SOC_DAIFMT_I2S |
            SND_SOC_DAIFMT_NB_NF | SND_SOC_DAIFMT_CBM_CFM);
    if (ret)
        return ret;

    switch (params_rate(params)) {
    case 48000:
    case 8000:
    case 12000:
    case 16000:
    case 24000:
    case 32000:
        pll_rate = 48000 * 1024;
        break;
    case 44100:
    case 7350:
    case 11025:
    case 14700:
    case 22050:
    case 29400:
        pll_rate = 44100 * 1024;
        break;
    default:
        return -EINVAL;
    }

    ret = snd_soc_dai_set_pll(codec_dai, ADAU1373_PLL1,
            ADAU1373_PLL_SRC_MCLK1, 12288000, pll_rate);
    if (ret)
        return ret;

    ret = snd_soc_dai_set_sysclk(codec_dai, ADAU1373_CLK_SRC_PLL1, pll_rate,
            SND_SOC_CLOCK_IN);

    return ret;
}

static int bfin_eval_adau1373_codec_init(struct snd_soc_pcm_runtime *rtd)
{
    struct snd_soc_dai *codec_dai = rtd->codec_dai;
    unsigned int pll_rate = 48000 * 1024;
    int ret;

    ret = snd_soc_dai_set_pll(codec_dai, ADAU1373_PLL1,
            ADAU1373_PLL_SRC_MCLK1, 12288000, pll_rate);
    if (ret)
        return ret;

    ret = snd_soc_dai_set_sysclk(codec_dai, ADAU1373_CLK_SRC_PLL1, pll_rate,
            SND_SOC_CLOCK_IN);

    return ret;
}
static struct snd_soc_ops bfin_eval_adau1373_ops = {
    .hw_params = bfin_eval_adau1373_hw_params,
};

static struct snd_soc_dai_link bfin_eval_adau1373_dai = {
    .name = "adau1373",
    .stream_name = "adau1373",
    .cpu_dai_name = "bfin-i2s.0",
    .codec_dai_name = "adau1373-aif1",
    .platform_name = "bfin-i2s-pcm-audio",
    .codec_name = "adau1373.0-001a",
    .ops = &bfin_eval_adau1373_ops,
    .init = bfin_eval_adau1373_codec_init,
};
```

ADAU1373 evaluation board driver
================================

There is no dedicated Blackfin STAMP evaluation board for the ADAU1373. During test and driver development we used the [EVAL-ADAU1373](https://www.google.com/search?q=EVAL-ADAU1373&btnI=lucky) board.

It can be easily wired to the Blackfin STAMP SPORT header.

Source
------

# Status

<table>
<thead>
<tr class="header">
<th>Source</th>
<th>Mainlined?</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><a href="https://www.google.com/search?q=sound/soc/blackfin/bfin-eval-adau1373.c&amp;btnI=lucky">git</a></td>
<td><a href="https://www.google.com/search?q=sound/soc/blackfin/bfin-eval-adau1373.c&amp;btnI=lucky">yes</a></td>
</tr>
</tbody>
</table>

##### Files

<table>
<thead>
<tr class="header">
<th>Function</th>
<th>File</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>driver</td>
<td><a href="https://www.google.com/search?q=sound/soc/blackfin/bfin-eval-adau1373.c&amp;btnI=lucky">sound/soc/blackfin/bfin-eval-adau1373.c</a></td>
</tr>
</tbody>
</table>

Kernel configuration
--------------------

```{=markdown}
```
Device Drivers  --->
[*] I2C support  --->
[*]   I2C Hardware Bus support  --->
***     I2C system bus drivers (mostly embedded / system-on-chip) ***
<*>       Blackfin TWI I2C support
(100)     Blackfin TWI I2C clock (kHz)

```
```
Enable ALSA SoC evaluation board driver:

```{=markdown}
```
Device Drivers  --->
<M> Sound card support  --->
<M>   Advanced Linux Sound Architecture  --->
<M>     ALSA for SoC audio support  --->
<M>       Support for the EVAL-ADAU1373 boards on Blackfin eval boards

```
```
Hardware configuration
----------------------

Connect the STAMP SPORT 0 port (P6) to the EVAL-ADAU1373 J23 and J28 headers.

Note that the SPORT has separate signals for the capture and playback clocks, while the ADAU1373 uses the same clock signals for both, so the EVAL-ADU1373 clock signal pins need to be connected to two STAMP pins each.

<table>
<thead>
<tr class="header">
<th>STAMP pin</th>
<th>EVAL-ADAU1373 pin</th>
<th>Function</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>P6-26 (SPORT 0 - PJ2_SCL)</td>
<td>J23-1</td>
<td>I2C SCL</td>
</tr>
<tr class="even">
<td>P6-24 (SPORT 0 - PJ3_SDA)</td>
<td>J23-3</td>
<td>I2C SDA</td>
</tr>
<tr class="odd">
<td>P6-6 (SPORT 0 - PJ9_TSCLK0), P6-16 (SPORT 0 - PJ6_RSCLK0)</td>
<td>J28-6 (A_BCLK)</td>
<td>BCLK</td>
</tr>
<tr class="even">
<td>P6-11 (SPORT 0 - PJ10_TFS0), P6-7 (SPORT 0 - PJ7_RFS0)</td>
<td>J28-8 (A_LRC)</td>
<td>LRCLK</td>
</tr>
<tr class="odd">
<td>P6-14 (SPORT 0 - PJ11_DT0PRI</td>
<td>J28-10 (A_DACDAT)</td>
<td>Playback data</td>
</tr>
<tr class="even">
<td>P6-8 (SPORT 0 - PJ8_DR0PRI)</td>
<td>J28-12 (A_ADCDAT)</td>
<td>Captrue data</td>
</tr>
<tr class="odd">
<td>P6-33</td>
<td>J28-1</td>
<td>GND</td>
</tr>
</tbody>
</table>

Driver testing
--------------

Load the driver and make sure the sound card is properly instantiated.

:::{NOTE} <!-- ATTRS: box="" bggreen\="" -->
:::{HINT} <!-- ATTRS: info\="" -->
This specifies any shell prompt running on the target
:::

```bash
root:/\> modprobe snd-bf5xx-i2s
root:/\> modprobe snd-soc-bf5xx-i2s
root:/\> modprobe snd-soc-adau1373
root:/\> modprobe snd-soc-bfin-eval-adau1373
dma rx:3 tx:4, err irq:45, regs:ffc00800
asoc: ADAU1373 \<-\> bf5xx-i2s mapping ok
```

:::


:::{NOTE} <!-- ATTRS: box="" bggreen\="" -->
:::{HINT} <!-- ATTRS: info\="" -->
This specifies any shell prompt running on the target
:::

```bash
root:/\> modprobe snd-pcm-oss
root:/\> tone
TONE: generating sine wave at 1000 Hz\...

root:/\> arecord -f cd | aplay
Recording WAVE \'stdin\' : Signed 16 bit Little Endian, Rate 44100 Hz, Stereo
Playing WAVE \'stdin\' : Signed 16 bit Little Endian, Rate 44100 Hz, Stereo
```

:::

