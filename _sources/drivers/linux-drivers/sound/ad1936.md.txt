---
wiki-source: https://wiki.analog.com/resources/tools-software/linux-drivers/sound/ad1936
title: ADAU1328: 2 ADC/8 DAC with PLL, 192 kHz, 24-Bit Codec
---

AD1936 Sound CODEC Linux Driver
===============================

# Supported devices

-   [AD1933](https://www.google.com/search?q=AD1933&btnI=lucky)
-   [AD1934](https://www.google.com/search?q=AD1934&btnI=lucky)
-   [AD1936](https://www.google.com/search?q=AD1936&btnI=lucky)
-   [AD1937](https://www.google.com/search?q=AD1937&btnI=lucky)
-   [AD1938](https://www.google.com/search?q=AD1938&btnI=lucky)
-   [AD1939](https://www.google.com/search?q=AD1939&btnI=lucky)
-   [ADAU1328](https://www.google.com/search?q=ADAU1328&btnI=lucky)

#### Evaluation Boards

-   [EVAL-AD1937AZ](https://www.google.com/search?q=EVAL-AD1937AZ&btnI=lucky)
-   [EVAL-AD1938AZ](https://www.google.com/search?q=EVAL-AD1938AZ&btnI=lucky)
-   [EVAL-AD1939AZ](https://www.google.com/search?q=EVAL-AD1939AZ&btnI=lucky)

Source Code
-----------

##### Status

<table>
<thead>
<tr class="header">
<th>Source</th>
<th>Mainline?</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><a href="https://www.google.com/search?q=sound/soc/codecs/ad193x.c&amp;btnI=lucky">git</a></td>
<td><a href="https://www.google.com/search?q=sound/soc/codecs/ad193x.c&amp;btnI=lucky">Yes</a></td>
</tr>
</tbody>
</table>

##### Files

<table>
<thead>
<tr class="header">
<th>Function</th>
<th>File</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>driver</td>
<td><a href="https://www.google.com/search?q=sound/soc/codecs/ad193x.c&amp;btnI=lucky">sound/soc/codecs/ad193x.c</a></td>
</tr>
<tr class="even">
<td>include</td>
<td><a href="https://www.google.com/search?q=sound/soc/codecs/ad193x.h&amp;btnI=lucky">sound/soc/codecs/ad193x.h</a></td>
</tr>
</tbody>
</table>

Example device initialization
-----------------------------

![](page>software/linux/docs/platform_and_bus_model#Declaring SPI slave devices&firstseconly&noeditbtn)

You need to set the modalias of your SPI info according to your codec. Valid values are "ad1935" and "ad1937", You'll also have to adjust bus_num and chip_select according to your board setup.

``` {.c}
static struct spi_board_info board_spi_board_info[] __initdata = {
    [--snip--]
    {
        .modalias = "ad1936",
        .max_speed_hz = 3125000,     /* max spi clock (SCK) speed in HZ */
        .bus_num = 0,
        .chip_select = 4, /* CS, change it for your board */
        .mode = SPI_MODE_3,
    },
    [--snip--]
};
```

``` {.c}
static int __init board_init(void)
{
    [--snip--]

    spi_register_board_info(board_spi_board_info, ARRAY_SIZE(board_spi_board_info));

    [--snip--]

    return 0;
}
arch_initcall(board_init);
```

#### ASoC DAPM Widgets

<table>
<thead>
<tr class="header">
<th>Name</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>DAC1OUT</td>
<td>DAC Channel1 Output</td>
</tr>
<tr class="even">
<td>DAC2OUT</td>
<td>DAC Channel2 Output</td>
</tr>
<tr class="odd">
<td>DAC3OUT</td>
<td>DAC Channel3 Output</td>
</tr>
<tr class="even">
<td>DAC4OUT</td>
<td>DAC Channel4 Output</td>
</tr>
<tr class="odd">
<td>ADC1IN</td>
<td>ADC Channel1 Input</td>
</tr>
<tr class="even">
<td>ADC2IN</td>
<td>ADC Channel2 Input</td>
</tr>
</tbody>
</table>

#### ALSA Controls

<table>
<thead>
<tr class="header">
<th>Name</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>ADC High Pass Filter Switch</td>
<td>Enable/Disable ADC high-pass filter</td>
</tr>
<tr class="even">
<td>Playback Deemphasis</td>
<td>Select playback de-emphasis. Possible Values: "None", "48kHz", "44.1kHz", "32kHz"</td>
</tr>
<tr class="odd">
<td>DAC1 Volume</td>
<td>DAC Channel 1 volume</td>
</tr>
<tr class="even">
<td>DAC2 Volume</td>
<td>DAC Channel 2 volume</td>
</tr>
<tr class="odd">
<td>DAC3 Volume</td>
<td>DAC Channel 3 volume</td>
</tr>
<tr class="even">
<td>DAC4 Volume</td>
<td>DAC Channel 4 volume</td>
</tr>
<tr class="odd">
<td>DAC1 Switch</td>
<td>Mute/Unmute DAC Channel 1</td>
</tr>
<tr class="even">
<td>DAC2 Switch</td>
<td>Mute/Unmute DAC Channel 2</td>
</tr>
<tr class="odd">
<td>DAC3 Switch</td>
<td>Mute/Unmute DAC Channel 3</td>
</tr>
<tr class="even">
<td>DAC4 Switch</td>
<td>Mute/Unmute DAC Channel 4</td>
</tr>
<tr class="odd">
<td>ADC1 Switch</td>
<td>Mute/Unmute ADC Channel1</td>
</tr>
<tr class="even">
<td>ADC2 Switch</td>
<td>Mute/Unmute ADC Channel2</td>
</tr>
</tbody>
</table>

#### DAI Configuration

<table>
<thead>
<tr class="header">
<th>DAI name</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>"ad193x-hifi"</td>
</tr>
</tbody>
</table>

##### Supported DAI formats

<table>
<thead>
<tr class="header">
<th>Name</th>
<th>Supported by driver</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>SND_SOC_DAIFMT_I2S</td>
<td>yes</td>
<td>I2S mode</td>
</tr>
<tr class="even">
<td>SND_SOC_DAIFMT_RIGHT_J</td>
<td>no</td>
<td>Right Justified mode</td>
</tr>
<tr class="odd">
<td>SND_SOC_DAIFMT_LEFT_J</td>
<td>no</td>
<td>Left Justified mode</td>
</tr>
<tr class="even">
<td>SND_SOC_DAIFMT_DSP_A</td>
<td>yes</td>
<td>data MSB after FRM LRC</td>
</tr>
<tr class="odd">
<td>SND_SOC_DAIFMT_DSP_B</td>
<td>no</td>
<td>data MSB during FRM LRC</td>
</tr>
<tr class="even">
<td>SND_SOC_DAIFMT_AC97</td>
<td>no</td>
<td>AC97 mode</td>
</tr>
<tr class="odd">
<td>SND_SOC_DAIFMT_PDM</td>
<td>no</td>
<td>Pulse density modulation</td>
</tr>
<tr class="even">
<td></td>
<td></td>
<td></td>
</tr>
<tr class="odd">
<td>SND_SOC_DAIFMT_NB_NF</td>
<td>yes</td>
<td>Normal bit- and frameclock</td>
</tr>
<tr class="even">
<td>SND_SOC_DAIFMT_NB_IF</td>
<td>yes</td>
<td>Normal bitclock, inverted frameclock</td>
</tr>
<tr class="odd">
<td>SND_SOC_DAIFMT_IB_NF</td>
<td>yes</td>
<td>Inverted frameclock, normal bitclock</td>
</tr>
<tr class="even">
<td>SND_SOC_DAIFMT_IB_IF</td>
<td>yes</td>
<td>Inverted bit- and frameclock</td>
</tr>
<tr class="odd">
<td></td>
<td></td>
<td></td>
</tr>
<tr class="even">
<td>SND_SOC_DAIFMT_CBM_CFM</td>
<td>yes</td>
<td>Codec bit- and frameclock master</td>
</tr>
<tr class="odd">
<td>SND_SOC_DAIFMT_CBS_CFM</td>
<td>yes</td>
<td>Codec bitclock slave, frameclock master</td>
</tr>
<tr class="even">
<td>SND_SOC_DAIFMT_CBM_CFS</td>
<td>yes</td>
<td>Codec bitclock master, frameclock slave</td>
</tr>
<tr class="odd">
<td>SND_SOC_DAIFMT_CBS_CFS</td>
<td>yes</td>
<td>Codec bit- and frameclock slave</td>
</tr>
</tbody>
</table>

##### Example DAI Configuration

``` {.c}
static int bf5xx_ad193x_hw_params(struct snd_pcm_substream *substream,
    struct snd_pcm_hw_params *params)
{
    struct snd_soc_pcm_runtime *rtd = substream->private_data;
    struct snd_soc_dai *cpu_dai = rtd->cpu_dai;
    struct snd_soc_dai *codec_dai = rtd->codec_dai;
    int ret;

    /* set cpu DAI configuration */
    ret = snd_soc_dai_set_fmt(cpu_dai, SND_SOC_DAIFMT_DSP_A |
        SND_SOC_DAIFMT_IB_IF | SND_SOC_DAIFMT_CBM_CFM);
    if (ret < 0)
        return ret;

    /* set codec DAI configuration */
    ret = snd_soc_dai_set_fmt(codec_dai, SND_SOC_DAIFMT_DSP_A |
        SND_SOC_DAIFMT_IB_IF | SND_SOC_DAIFMT_CBM_CFM);
    if (ret < 0)
        return ret;

    return 0;
}

static struct snd_soc_ops bf5xx_ad193x_ops = {
    .hw_params = bf5xx_ad193x_hw_params,
};

static struct snd_soc_dai_link bf5xx_ad193x_dai = {
    .name = "ad193x",
    .stream_name = "AD193X",
    .cpu_dai_name = "bfin-tdm.0",
    .codec_dai_name = "ad193x-hifi",
    .platform_name = "bfin-tdm-pcm-audio",
    .codec_name = "spi0.4",
    .ops = &bf5xx_ad193x_ops,
};
```

AD193X evaluation board driver
------------------------------

#### Adding Kernel Support - As a module

To add support for the built-in codec AD193X of BF5XX to the kernel build system, a few things must be enabled properly for things to work.The configuration is as following:

    Linux Kernel Configuration
      Device Drivers  ---> 
        Sound  ---> 
          <M> Sound card support
            Advanced Linux Sound Architecture  --->
              <M> Advanced Linux Sound Architecture
              < > Sequencer support
              <M> OSS Mixer API 
              <M> OSS PCM (digital audio) API
              <M>   ALSA for SoC audio support  --->
                  <M>   SoC I2S(TDM mode) Audio for the ADI BF5xx chip
                  <M>   SoC AD193X Audio support for BF5xx                      

Doing this will create modules (outside the kernel). The modules will be inserted automatically when it is needed. You can also build sound driver into kernel.
