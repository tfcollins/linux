---
wiki-source: https://wiki.analog.com/resources/tools-software/linux-drivers/iio-adc/ad7998
title: AD7991: 4-Channel, 12-Bit ADC with I2C Compatible Interface in 8-Lead SOT-23
---

# AD7998 IIO ADC Linux Driver

#### Supported Devices

-   [AD7991](https://analog.com/AD7991)
-   [AD7992](https://analog.com/AD7992)
-   [AD7993](https://analog.com/AD7993)
-   [AD7994](https://analog.com/AD7994)
-   [AD7995](https://analog.com/AD7995)
-   [AD7997](https://analog.com/AD7997)
-   [AD7998](https://analog.com/AD7998)
-   [AD7999](https://analog.com/AD7999)

#### Reference Circuits

-   [CN0288](https://analog.com/CN0288)
-   [CN0301](https://analog.com/CN0301)

#### Evaluation Boards

-   [EVAL-AD7991EBZ](https://analog.com/EVAL-AD7991EBZ)
-   [EVAL-AD7992EBZ](https://analog.com/EVAL-AD7992EBZ)
-   [EVAL-AD7993EBZ](https://analog.com/EVAL-AD7993EBZ)
-   [EVAL-AD7994EBZ](https://analog.com/EVAL-AD7994EBZ)
-   [EVAL-AD7995EBZ](https://analog.com/EVAL-AD7995EBZ)
-   [EVAL-AD7997EBZ](https://analog.com/EVAL-AD7997EBZ)
-   [EVAL-AD7998EBZ](https://analog.com/EVAL-AD7998EBZ)

#### Description

This is a Linux industrial I/O ([IIO](/software/linux/docs/iio/iio)) subsystem driver, targeting multi channel serial interface ADCs.
The industrial I/O subsystem provides a unified framework for drivers for many different types of converters and sensors using a number of different physical interfaces (i2c, spi, etc).
See [IIO](/software/linux/docs/iio/iio) for more information.

### Source Code

#### Status

<table>
<thead>
<tr class="header">
<th>Source</th>
<th>Mainlined?</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><a href="git.linux.org&gt;drivers/iio/adc/ad799x.c">git</a></td>
<td><a href="git.linux.org&gt;drivers/iio/adc/ad799x.c">Yes</a></td>
</tr>
</tbody>
</table>

#### Files

<table>
<thead>
<tr class="header">
<th>Function</th>
<th>File</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>driver</td>
<td><a href="git.linux.org&gt;drivers/iio/adc/ad799x.c">drivers/iio/adc/ad799x.c</a></td>
</tr>
</tbody>
</table>

### Example platform device initialization

<!-- CMDS: noheader firstseconly noeditbtn -->
```{include} software_linux_docs_platform_and_bus_model_SUB_Platform_Data.md
```

#### Specifying reference voltage via the regulator framework

:::{NOTE} <!-- ATTRS: tip="" -->

In case the AD799x on-chip reference is not used,
this driver requires specifying the reference voltage, by using the Linux regulator framework.

:::


Below example specifies a 2.5 Volt reference for the I2C device 0-0024 on I2C-Bus 0. (**0-0024**)

``` c
## if defined(CONFIG_REGULATOR_FIXED_VOLTAGE) || defined(CONFIG_REGULATOR_FIXED_VOLTAGE_MODULE)
static struct regulator_consumer_supply ad7998_consumer_supplies[] = {
    REGULATOR_SUPPLY("vref", "0-0024"),
};

static struct regulator_init_data board_avdd_reg_init_data = {
    .constraints    = {
        .name   = "2V5",
        .valid_ops_mask = REGULATOR_CHANGE_STATUS,
    },
    .consumer_supplies = ad7998_consumer_supplies,
    .num_consumer_supplies = ARRAY_SIZE(ad7998_consumer_supplies),
};

static struct fixed_voltage_config board_vref_pdata = {
    .supply_name    = "board-2V5",
    .microvolts = 2500000,
    .gpio       = -EINVAL,
    .enabled_at_boot = 0,
    .init_data  = &board_avdd_reg_init_data,
};
static struct platform_device brd_voltage_regulator = {
    .name       = "reg-fixed-voltage",
    .id     = -1,
    .num_resources  = 0,
    .dev        = {
        .platform_data  = &board_vref_pdata,
    },
};
## endif
```

``` c
static struct platform_device *board_devices[] __initdata = {
## if defined(CONFIG_REGULATOR_FIXED_VOLTAGE) || defined(CONFIG_REGULATOR_FIXED_VOLTAGE_MODULE)
    &brd_voltage_regulator
## endif
};
```

``` c
static int __init board_init(void)
{
    [--snip--]

    platform_add_devices(board_devices, ARRAY_SIZE(board_devices));

    [--snip--]

    return 0;
}
arch_initcall(board_init);
```

<!-- CMDS: firstseconly noeditbtn -->
```{include} software_linux_docs_platform_and_bus_model_SUB_Declaring_I2C_devices.md
```

Depending on the converter IC used, you may need to set the I2C_BOARD_INFO name accordingly, matching your part name.

``` c
static struct i2c_board_info __initdata board_i2c_board_info[] = {
## if defined(CONFIG_AD799X) || defined(CONFIG_AD799X_MODULE)
    {
        I2C_BOARD_INFO("ad7998", 0x24),
        .platform_data = &ad799x_pdata,
        .irq = IRQ_PG0,
    },
## endif
};
```

``` c
static int __init board_init(void)
{
    [--snip--]

    i2c_register_board_info(0, board_i2c_board_info,
                ARRAY_SIZE(board_i2c_board_info));
    [--snip--]

    return 0;
}
arch_initcall(board_init);
```

#### Devicetree

Required devicetree properties:

-   compatible: Needs to be "adi," followed by the name of the device. E.g. "adi,ad7798"
-   reg: The slave address used for the device
-   vcc-supply: Phandle to the supply regulator

```{=html}
<!-- -->
```
           adc_supply: fixedregulator {
                   compatible = "regulator-fixed";
                   regulator-name = "fixed-supply";
                   regulator-min-microvolt = <3300000>;
                   regulator-max-microvolt = <3300000>;
           };

           adc_vref: fixedregulator {
                   compatible = "regulator-fixed";
                   regulator-name = "fixed-supply";
                   regulator-min-microvolt = <2500000>;
                   regulator-max-microvolt = <2500000>;
           };
           
           i2c: i2c@e0007000 {
                   #address-cells = <1>;
                   #size-cells = <0>;
                   compatible = "xlnx,xps-iic-2.00.a";
                   ...

                   ad7798@24 {
                           compatible = "adi,ad7798";
                           reg = <0x24>;
                           vcc-supply = <&adc_supply>;
                           vref-supply = <&adc_vref>;
                   };
            };

### Adding Linux driver support

Configure kernel with "make menuconfig" (alternatively use "make xconfig" or
"make qconfig")

:::{NOTE} <!-- ATTRS: round="" help="" -->

The AD7998 Driver depends on **CONFIG_I2C**

:::


    Linux Kernel Configuration
        Device Drivers  --->
            [*] Staging drivers  --->
                <*>     Industrial I/O support --->
                    --- Industrial I/O support
                    -*-   Enable ring buffer support within IIO
                    -*-     Industrial I/O lock free software ring
                    -*-   Enable triggered sampling support

                          *** Analog to digital converters ***
                    [--snip--]

                    <*>   Analog Devices AD799x ADC driver
                    -*-     Analog Devices AD799x: use ring buffer

                    [--snip--]

### Hardware configuration

### Driver testing

<!-- CMDS: noheader firstseconly noeditbtn -->
```{include} software_linux_docs_iio_iio_snippets_SUB_iio_device_files.md
```

:::{NOTE} <!-- ATTRS: box="" bggreen="" -->
:::{HINT} <!-- ATTRS: info="" -->
This specifies any shell prompt running on the target
:::

```{code-block} bash
root:/> **cd /sys/bus/iio/devices/**
root:/sys/bus/iio/devices> ls
iio:device0 trigger0

root:/sys/bus/iio/devices> **cd device0**

root:/sys/devices/platform/i2c-bfin-twi.0/i2c-0/0-0024/iio:device0> **ls -l**
drwxr-xr-x 5 root root 0 Jan 1 00:00 buffer
drwxr-xr-x 2 root root 0 Jan 1 00:00 events
-r--r--r-- 1 root root 4096 Jan 1 00:00 in_voltage0_raw
-r--r--r-- 1 root root 4096 Jan 1 00:00 in_voltage1_raw
-r--r--r-- 1 root root 4096 Jan 1 00:00 in_voltage2_raw
-r--r--r-- 1 root root 4096 Jan 1 00:00 in_voltage3_raw
-r--r--r-- 1 root root 4096 Jan 1 00:00 in_voltage4_raw
-r--r--r-- 1 root root 4096 Jan 1 00:00 in_voltage5_raw
-r--r--r-- 1 root root 4096 Jan 1 00:00 in_voltage6_raw
-r--r--r-- 1 root root 4096 Jan 1 00:00 in_voltage7_raw
-r--r--r-- 1 root root 4096 Jan 1 00:00 in_voltage_scale
-r--r--r-- 1 root root 4096 Jan 1 00:00 name
lrwxrwxrwx 1 root root 0 Jan 1 00:00 subsystem -> ../../../../../../bus/iio
drwxr-xr-x 2 root root 0 Jan 1 00:00 trigger
-rw-r--r-- 1 root root 4096 Jan 1 00:00 uevent
```
:::


###### Show device name

:::{NOTE} <!-- ATTRS: box="" bggreen="" -->
:::{HINT} <!-- ATTRS: info="" -->
This specifies any shell prompt running on the target
:::

```{code-block} bash
root:/sys/devices/platform/i2c-bfin-twi.0/i2c-0/0-0024/iio:device0> **cat name**
ad7998
```
:::


###### Show scale

**Description:**
scale to be applied to in_voltage0_raw in order to obtain the measured voltage in millivolts.

:::{NOTE} <!-- ATTRS: box="" bggreen="" -->
:::{HINT} <!-- ATTRS: info="" -->
This specifies any shell prompt running on the target
:::

```{code-block} bash
root:/sys/devices/platform/i2c-bfin-twi.0/i2c-0/0-0024/iio:device0> **cat in_voltage_scale**
1.000
```
:::


###### Show channel 0 measurement

**Description:**
Raw unscaled voltage measurement on channel 0

:::{NOTE} <!-- ATTRS: box="" bggreen="" -->
:::{HINT} <!-- ATTRS: info="" -->
This specifies any shell prompt running on the target
:::

```{code-block} bash
root:/sys/devices/platform/i2c-bfin-twi.0/i2c-0/0-0024/iio:device0> **cat in_voltage0_raw**
1491
```
:::


**U** = *in_voltage0_raw * in_voltage_scale* = 1491 * 1.000 = **1491,00 *mV***

#### Trigger management

<!-- CMDS: noheader firstseconly noeditbtn -->
```{include} software_linux_docs_iio_iio_snippets_SUB_iio_devices_with_trigger_consumer_interface.md
```

##### Available standalone trigger drivers

<!-- CMDS: noheader firstseconly noeditbtn -->
```{include} software_linux_docs_iio_iio_snippets_SUB_Standalone_trigger_drivers.md
```

#### Buffer management

:::{NOTE} <!-- ATTRS: box="" bggreen="" -->
:::{HINT} <!-- ATTRS: info="" -->
This specifies any shell prompt running on the target
:::

```{code-block} bash
root:/sys/devices/platform/i2c-bfin-twi.0/i2c-0/0-0024/iio:device0/buffer> **ls**
**enable** **length**
root:/sys/devices/platform/i2c-bfin-twi.0/i2c-0/0-0024/iio:device0/buffer>
```
:::


<!-- CMDS: noheader firstseconly noeditbtn -->
```{include} software_linux_docs_iio_iio_snippets_SUB_Buffer_management.md
```

:::{NOTE} <!-- ATTRS: box="" bggreen="" -->
:::{HINT} <!-- ATTRS: info="" -->
This specifies any shell prompt running on the target
:::

```{code-block} bash
root:/sys/devices/platform/i2c-bfin-twi.0/i2c-0/0-0024/iio:device0/scan_elements> **ls**
in_voltage0_en in_voltage2_index in_voltage5_en in_voltage7_index
in_voltage0_index in_voltage3_en in_voltage5_index in_voltage_type
in_voltage1_en in_voltage3_index in_voltage6_en timestamp_en
in_voltage1_index in_voltage4_en in_voltage6_index timestamp_index
in_voltage2_en in_voltage4_index in_voltage7_en timestamp_type
root:/sys/devices/platform/i2c-bfin-twi.0/i2c-0/0-0024/iio:device0/scan_elements>
```
:::


<!-- CMDS: noheader firstseconly noeditbtn -->
```{include} software_linux_docs_iio_iio_snippets_SUB_Typical_ADC_scan_elements.md
```

### More Information

<!-- CMDS: noheader firstseconly noeditbtn -->
```{include} software_linux_docs_iio_iio_snippets_SUB_iio_pointers.md
```
