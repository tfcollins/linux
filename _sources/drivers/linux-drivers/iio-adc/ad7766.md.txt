---
wiki-source: https://wiki.analog.com/resources/tools-software/linux-drivers/iio-adc/ad7766
title: AD7767: 24-Bit, 8.5 mW, 109 dB, 128 kSPS ADC
---

# AD7766 24-Bit, 8.5 mW, 109 dB, 128 kSPS/64 kSPS/32 kSPS ADCs IIO Linux Driver

### Supported Devices

-   [AD7766](https://analog.com/AD7766)
-   [AD7766-1](https://analog.com/AD7766)
-   [AD7766-2](https://analog.com/AD7766)
-   [AD7767](https://analog.com/AD7767)
-   [AD7767-1](https://analog.com/AD7767)
-   [AD7767-2](https://analog.com/AD7767)

### Evaluation Boards

-   [EVAL-AD7766](https://analog.com/EVAL-AD7766)
-   [EVAL-AD7767](https://analog.com/EVAL-AD7767)

### Description

This is a Linux industrial I/O ([IIO](/software/linux/docs/iio/iio)) subsystem driver, targeting single channel serial interface ADCs.
The industrial I/O subsystem provides a unified framework for drivers for many different types of converters and sensors using a number of different physical interfaces (i2c, spi, etc).
See [IIO](/software/linux/docs/iio/iio) for more information.

## Source Code

### Status

<table>
<thead>
<tr class="header">
<th>Source</th>
<th>Mainlined?</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><a href="git.linux.org&gt;drivers/iio/adc/ad7766.c">git</a></td>
<td><a href="git.linux.org&gt;drivers/iio/adc/ad7766.c">Yes</a></td>
</tr>
</tbody>
</table>

### Files

<table>
<thead>
<tr class="header">
<th>Function</th>
<th>File</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>driver</td>
<td><a href="git.linux.org&gt;drivers/iio/adc/ad7766.c">drivers/iio/adc/ad7766.c</a></td>
</tr>
</tbody>
</table>

## Example platform device initialization

<!-- CMDS: noheader firstseconly noeditbtn -->
```{include} software_linux_docs_platform_and_bus_model_SUB_Platform_Data.md
```

### Specifying reference voltage via the regulator framework

:::{NOTE} <!-- ATTRS: tip="" -->

This driver supports also an alternative way of specifying the reference voltage, by using the Linux regulator framework.

:::


Below example specifies a 5 Volt reference for the SPI device 3 on SPI-Bus 0. (**spi0.3**)

``` c
static struct regulator_consumer_supply ad7766_consumer_supplies[] = {
    REGULATOR_SUPPLY("vref", "spi0.3"),
};

static struct regulator_init_data stamp_avdd_reg_init_data = {
    .constraints    = {
        .name   = "5V0",
        .valid_ops_mask = REGULATOR_CHANGE_STATUS,
    },
    .consumer_supplies = ad7766_consumer_supplies,
    .num_consumer_supplies = ARRAY_SIZE(ad7766_consumer_supplies),
};

static struct fixed_voltage_config stamp_vdd_pdata = {
    .supply_name    = "vref-5V0",
    .microvolts = 5000000,
    .gpio       = -EINVAL,
    .enabled_at_boot = 0,
    .init_data  = &stamp_avdd_reg_init_data,
};

static struct platform_device brd_voltage_regulator = {
    .name       = "reg-fixed-voltage",
    .id     = -1,
    .num_resources  = 0,
    .dev        = {
        .platform_data  = &stamp_vdd_pdata,
    },
};
```

``` c
static struct platform_device *board_devices[] __initdata = {
    &brd_voltage_regulator
};
```

``` c
static int __init board_init(void)
{
    [--snip--]

    platform_add_devices(board_devices, ARRAY_SIZE(board_devices));

    [--snip--]

    return 0;
}
arch_initcall(board_init);
```

<!-- CMDS: firstseconly noeditbtn -->
```{include} software_linux_docs_platform_and_bus_model_SUB_Declaring_SPI_slave_devices.md
```

Depending on the converter IC used, you may need to set the modalias accordingly, matching your part name.
It may also required to adjust max_speed_hz. Please consult the datasheet, for maximum spi clock supported by the device in question.

``` c
static struct spi_board_info board_spi_board_info[] __initdata = {
    {
        /* the modalias must be the same as spi device driver name */
        .modalias = "ad7766", /* Name of spi_driver for this device */
        .max_speed_hz = 1000000,     /* max spi clock (SCK) speed in HZ */
        .bus_num = 0, /* Framework bus number */
        .chip_select = 3, /* Framework chip select */
        .irq = IRQ_PF6,
        .mode = SPI_MODE_3,
    },
};
```

``` c
static int __init board_init(void)
{
    [--snip--]

    spi_register_board_info(board_spi_board_info, ARRAY_SIZE(board_spi_board_info));

    [--snip--]

    return 0;
}
arch_initcall(board_init);
```

## Adding Linux driver support

Configure kernel with "make menuconfig" (alternatively use "make xconfig" or
"make qconfig")

:::{NOTE} <!-- ATTRS: round="" help="" -->

The AD7766 Driver depends on **CONFIG_SPI_MASTER**

:::


    Linux Kernel Configuration
        Device Drivers  --->
            -*- Industrial I/O support  --->  
                    --- Industrial I/O support
                    -*-   Enable ring buffer support within IIO
                    -*-     Industrial I/O lock free software ring
                    -*-   Enable triggered sampling support

                          *** Analog to digital converters ***
                        [--snip--]
                            <*>   Analog Devices AD7766/AD7767 ADC driver
                        [--snip--]

## Driver testing

<!-- CMDS: noheader firstseconly noeditbtn -->
```{include} software_linux_docs_iio_iio_snippets_SUB_iio_device_files.md
```

:::{NOTE} <!-- ATTRS: box="" bggreen="" -->
:::{HINT} <!-- ATTRS: info="" -->
This specifies any shell prompt running on the target
:::

```{code-block} bash

> **cd /sys/bus/iio/devices/**

/sys/bus/iio/devices> ls
iio:device0
/sys/bus/iio/devices> **cd iio:device0**

/sys/bus/iio/devices/iio:device0> **ls -l**
drwxrwxrwx 2 root root 0 Jan 1 1970 buffer
-rw-rw-rw- 1 root root 4096 Jan 1 1970 in_voltage_scale
-rw-rw-rw- 1 root root 4096 Jan 1 1970 name
-rw-rw-rw- 1 root root 4096 Jan 1 1970 sampling_frequency
drwxrwxrwx 2 root root 0 Jan 1 1970 scan_elements
drwxrwxrwx 2 root root 0 Jan 1 1970 trigger

/sys/bus/iio/devices/iio:device0> **ls -l buffer**
-rw-rw-rw- 1 root root 4096 Jan 1 1970 enable
-rw-rw-rw- 1 root root 4096 Jan 1 1970 length
-rw-rw-rw- 1 root root 4096 Jan 1 1970 watermark

/sys/bus/iio/devices/iio:device0> **ls -l scan_elements**
-rw-rw-rw- 1 root root 4096 Jan 1 1970 in_timestamp_en
-rw-rw-rw- 1 root root 4096 Jan 1 1970 in_timestamp_index
-rw-rw-rw- 1 root root 4096 Jan 1 1970 in_timestamp_type
-rw-rw-rw- 1 root root 4096 Jan 1 1970 in_voltage0_en
-rw-rw-rw- 1 root root 4096 Jan 1 1970 in_voltage0_index
-rw-rw-rw- 1 root root 4096 Jan 1 1970 in_voltage0_type

/sys/bus/iio/devices/iio:device0> **ls -l trigger**
-rw-rw-rw- 1 root root 4096 Jan 1 1970 current_trigger
```
:::


##### Show device name

:::{NOTE} <!-- ATTRS: box="" bggreen="" -->
:::{HINT} <!-- ATTRS: info="" -->
This specifies any shell prompt running on the target
:::

```{code-block} bash
/sys/bus/iio/devices/iio:device0> **cat name**
ad7766
```
:::


##### Show scale

**Description:**
Scale to be applied to the captured sample data in order to obtain the measured voltage in millivolts.

:::{NOTE} <!-- ATTRS: box="" bggreen="" -->
:::{HINT} <!-- ATTRS: info="" -->
This specifies any shell prompt running on the target
:::

```{code-block} bash
/sys/bus/iio/devices/iio:device0> **cat in_voltage_scale**
0.000298023
```
:::


##### Show data output rate

**Description:**
Shows the data output rate of the converter in Hz.

:::{NOTE} <!-- ATTRS: box="" bggreen="" -->
:::{HINT} <!-- ATTRS: info="" -->
This specifies any shell prompt running on the target
:::

```{code-block} bash
/sys/bus/iio/devices/iio:device0> **cat sampling_frequency**
125000
```
:::


## More Information

<!-- CMDS: noheader firstseconly noeditbtn -->
```{include} software_linux_docs_iio_iio_snippets_SUB_iio_pointers.md
```
