---
wiki-source: https://wiki.analog.com/resources/tools-software/linux-drivers/iio-adc/adaq8092
title: ADAQ8092: 14-Bit, 105 MSPS, μModule
---

# ADAQ8092 14-Bit, 105 MSPS, μModule Linux device driver

The ADAQ8092 is a 14-bit, 105 MSPS, high-speed dual-channel data acquisition (DAQ) μModule solution. The device incorporates signal conditioning, an analog-to-digital (ADC) driver, a voltage reference, and an ADC in a single package via system in package (SiP) technology. μModule solutions simplify the development of high-speed data acquisition systems by transferring the design
burden, component selection, optimization, and layout from the designer to the device. The ADAQ8092 enables a 6× footprint reduction.

### Supported Devices

-   [ADAQ8092](https://analog.com/ADAQ8092)

### Evaluation Boards

-   [EVAL-ADAQ8092](https://analog.com/EVAL-ADAQ8092)

### Description

This is a Linux industrial I/O ([IIO](/software/linux/docs/iio/iio)) subsystem driver, targeting RF Transceivers.
The industrial I/O subsystem provides a unified framework for drivers for many different types of converters and sensors using a number of different physical interfaces (i2c, spi, etc).
See [IIO](/software/linux/docs/iio/iio) for more information.

## Source Code

### Status

<table>
<thead>
<tr class="header">
<th>Source</th>
<th>Mainlined?</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><a href="https://github.com/analogdevicesinc/linux/main?drivers/iio/adc/adaq8092.c">git</a></td>
<td><a href="https://github.com/analogdevicesinc/linux/main?drivers/iio/adc/adaq8092.c">No</a></td>
</tr>
</tbody>
</table>

### Files

<table>
<thead>
<tr class="header">
<th>Function</th>
<th>File</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>driver</td>
<td><a href="https://github.com/analogdevicesinc/linux/main?drivers/iio/adc/adaq8092.c">drivers/iio/adc/adaq8092.c</a></td>
</tr>
</tbody>
</table>

#### Related Device Drivers

<table>
<thead>
<tr class="header">
<th>Function</th>
<th>File</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>driver</td>
<td><a href="https://github.com/analogdevicesinc/linux/main?drivers/iio/adc/cf_axi_adc_core.c">drivers/iio/adc/cf_axi_adc_core.c</a></td>
</tr>
<tr class="even">
<td>include</td>
<td><a href="https://github.com/analogdevicesinc/linux/main?drivers/iio/adc/cf_axi_adc.h">drivers/iio/adc/cf_axi_adc.h</a></td>
</tr>
</tbody>
</table>

## Example Linux Device-Tree Initialization

The ADAQ8092 driver is a spi-bus driver and can currently only be instantiated via device tree.

Required devicetree properties:

-   compatible: Should always be "adaq8092"
-   reg: SPI slave select number

<table>
<thead>
<tr class="header">
<th>Function</th>
<th>File</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>EVAL-ADAQ8092 Device Tree</td>
<td><a href="https://github.com/analogdevicesinc/linux/main?arch/arm/boot/dts/zynq-zed-adv7511-adaq8092.dts">zynq-zed-adv7511-adaq8092.dts</a></td>
</tr>
</tbody>
</table>

## Enabling Linux driver support

Configure kernel with "make menuconfig" (alternatively use "make xconfig" or
"make qconfig")

:::{NOTE} <!-- ATTRS: round="" help="" -->

The ADAQ8092 driver depends on **SPI**

:::


## Adding Linux driver support

Configure kernel with "make menuconfig" (alternatively use "make xconfig" or
"make qconfig")

    Linux Kernel Configuration
        Device Drivers  --->
        <*>     Industrial I/O support --->
            --- Industrial I/O support
            -*-   Enable ring buffer support within IIO
            -*-     Industrial I/O lock free software ring
            -*-   Enable triggered sampling support

                  *** Analog to digital converters ***
            [--snip--]

            <*>   Analog Devices ADAQ8092 uModule Data Acquisition Module

            [--snip--]

## Hardware configuration

## Driver testing / API

<!-- CMDS: noheader firstseconly noeditbtn -->
```{include} software_linux_docs_iio_iio_snippets_SUB_iio_device_files.md
```

:::{NOTE} <!-- ATTRS: box="" bggreen="" -->
:::{HINT} <!-- ATTRS: info="" -->
This specifies any shell prompt running on the target
:::

```{code-block} bash
root:/> **cd /sys/bus/iio/devices/**
root:/sys/bus/iio/devices> ls
iio:device0 iio:device1

root:/sys/bus/iio/devices> **cd iio:device1**

root:/sys/bus/iio/devices/iio:device1# ls -l
drwxr-xr-x 5 root root 0 Jan 22 08:19 .
drwxr-xr-x 4 root root 0 Jan 22 08:19 ..
drwxr-xr-x 2 root root 0 Jan 22 08:19 buffer
-r--r--r-- 1 root root 4096 Jan 22 08:19 dev
-rw-r--r-- 1 root root 4096 Jan 22 08:19 sampling frequency
-rw-r--r-- 1 root root 4096 Jan 22 08:19 in_voltage0_label
-rw-r--r-- 1 root root 4096 Jan 22 08:19 in_voltage1_label
-rw-r--r-- 1 root root 4096 Jan 22 08:19 sampling frequency
-r--r--r-- 1 root root 4096 Jan 22 08:19 name
drwxr-xr-x 2 root root 0 Jan 22 08:19 power
drwxr-xr-x 2 root root 0 Jan 22 08:19 scan_elements
lrwxrwxrwx 1 root root 0 Jan 22 08:19 subsystem -> ../../../../../bus/iio
-rw-r--r-- 1 root root 4096 Jan 22 08:19 uevent

root:/sys/bus/iio/devices/iio:device1#
```
:::


### Show device name

:::{NOTE} <!-- ATTRS: box="" bggreen="" -->
:::{HINT} <!-- ATTRS: info="" -->
This specifies any shell prompt running on the target
:::

```{code-block} bash
root:/sys/bus/iio/devices/iio:device1> **cat name**
**adaq8092**
```
:::


### ADC sampling frequency (sampling_frequency)

Read only attribute which returns the ADC sampling rate in Hz.

:::{NOTE} <!-- ATTRS: box="" bggreen="" -->
:::{HINT} <!-- ATTRS: info="" -->
This specifies any shell prompt running on the target
:::

```{code-block} bash
root@analog:/sys/bus/iio/devices/iio:device1# **cat sampling_frequency**
**105000000**
root@analog:/sys/bus/iio/devices/iio:device1# **echo 200000000 > sampling_frequency**
-bash: echo: write error: Invalid argument
```
:::


## More Information

<!-- CMDS: noheader firstseconly noeditbtn -->
```{include} software_linux_docs_iio_iio_snippets_SUB_iio_pointers.md
```


## Devicetree Maps

- [zynq-zed-adv7511-adaq8092.dts.md](#zynq-zed-adv7511-adaq8092.dts)
- [adi-dual-ad9208.dtsi.md](#adi-dual-ad9208.dtsi)


