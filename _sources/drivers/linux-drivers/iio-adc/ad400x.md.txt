---
wiki-source: https://wiki.analog.com/resources/tools-software/linux-drivers/iio-adc/ad400x
title: ADAQ4003: 18-Bit 2 MSPS Î¼Module Data Acquisition System in BGA
---

# AD4003/AD4007/AD4011/AD4020/ADAQ4001/ADAQ4003 Linux Driver

### Supported Devices

-   [AD4000](adi>AD4000)
-   [AD4001](adi>AD4001)
-   [AD4002](adi>AD4002)
-   [AD4003](adi>AD4003)
-   [AD4004](adi>AD4004)
-   [AD4005](adi>AD4005)
-   [AD4006](adi>AD4006)
-   [AD4007](adi>AD4007)
-   [AD4008](adi>AD4008)
-   [AD4010](adi>AD4010)
-   [AD4011](adi>AD4011)
-   [AD4020](adi>AD4020)
-   [AD4021](adi>AD4021)
-   [AD4022](adi>AD4022)
-   [ADAQ4003](adi>ADAQ4003)

### Evaluation Boards

-   [EVAL-AD400x-FMCZ](adi>EVAL-AD400x-FMCZ)
-   [EVAL-ADAQ40xx](adi>EVAL-ADAQ40xx)

### Description

Analog Devices [AD4000](adi>AD4000) and the above listed devices are high accuracy, high speed, low power SAR ADCs.

This is the Linux industrial I/O ([IIO](/software/linux/docs/iio/iio)) subsystem driver, targeting single channel SPI interface [AD4000](adi>AD4000) and similar ADC devices. The industrial I/O subsystem provides a unified framework for drivers for many different types of converters and sensors using a number of different physical interfaces (I2C, SPI, etc). See [IIO](/software/linux/docs/iio/iio) for more information.

See the [Evaluating AD400X and ADAQ400X devices](/resources/eval/ad400x-eval-board) user guide for instructions on how to setup and evaluate devices supported by the ad400x Linux driver.

### Status

<table>
<thead>
<tr class="header">
<th>Source</th>
<th>Mainlined?</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><a href="linux.github&gt;main/drivers/iio/adc/ad400x.c">git</a></td>
<td>[No]</td>
</tr>
</tbody>
</table>

### Files

<table>
<thead>
<tr class="header">
<th>Function</th>
<th>File</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>driver</td>
<td><a href="linux.github&gt;main?drivers/iio/adc/ad400x.c">drivers/iio/adc/ad400x.c</a></td>
</tr>
<tr class="even">
<td>devicetree bindings</td>
<td><a href="linux.github&gt;main?Documentation/devicetree/bindings/iio/adc/adi,ad400x.yaml">Documentation/devicetree/bindings/iio/adc/adi,ad400x.yaml</a></td>
</tr>
<tr class="odd">
<td>ZedBoard example devicetree</td>
<td><a href="linux.github&gt;main?arch/arm/boot/dts/zynq-zed-adv7511-ad4020.dts">arch/arm/boot/dts/zynq-zed-adv7511-ad4020.dts</a></td>
</tr>
<tr class="even">
<td>CoraZ7 example devicetree</td>
<td><a href="linux.github&gt;main?arch/arm/boot/dts/zynq-coraz7s-adaq4003.dts">arch/arm/boot/dts/zynq-coraz7s-adaq4003.dts</a></td>
</tr>
</tbody>
</table>

## Driver setup

Since AD4003/4007/4011/4020 are high speed analog-to-digital converters with speeds up to 2 MSPS, additional components are required to achieve high performance. In this scenario, the following HDL components are required:

-   [SPI Engine](/resources/fpga/peripherals/spi_engine)
-   [High-Speed DMA Controller Peripheral](/resources/fpga/docs/axi_dmac)

The device will interface with these components and follow the device tree bindings.

:::{NOTE} <!-- ATTRS: box="" bggreen="" -->
:::{HINT} <!-- ATTRS: info="" -->
This specifies any shell prompt running on the target
:::

```bash
properties:

    compatible:
      enum:
        - adi,ad4000
        - adi,ad4001
        - adi,ad4002
        - adi,ad4003
        - adi,ad4004
        - adi,ad4005
        - adi,ad4006
        - adi,ad4007
        - adi,ad4008
        - adi,ad4010
        - adi,ad4011
        - adi,ad4020
        - adi,ad4021
        - adi,ad4022
        - adi,adaq4003

    reg: true
    spi-max-frequency: true

    dmas:
      description: |
        DMA specifier, consisting of a phandle to DMA controller node.
      maxItems: 1

    dma-names:
      const: rx

    clocks:
      maxItems: 1

    clock-names:
      const: ref_clk
      description: AD400X reference clock name.

    pwms:
      description: |
        PWM used as trigger source for the SPI engine, also represents the
        acquisition rate for the samples.
      maxItems: 1

    pwm-names:
      const: cnv

    vref-supply:
      description: Phandle to the regulator for ADC reference voltage.

    '#address-cells':
      const: 1

    '#size-cells':
      const: 0

patternProperties:

    "^channel@([0-1])$":
      $ref: adc.yaml
      type: object
      description: Represents the external channel connected to the ADC.

      properties:
        reg:
          maxItems: 1

        diff-channels: true

      required:
        - reg

      additionalProperties: false

required:

1.  compatible
2.  reg
3.  dmas
4.  dma-names
5.  vref-supply

allOf:

1.  $ref: /schemas/spi/spi-peripheral-props.yaml#

```{=html}
<!-- -->
```
1.  if:

```{=html}
<!-- -->
```
        properties:
          compatible:
            contains:
              enum:
                - adi,adaq4003

      then:
        required:
          - compatible
          - reg
          - dmas
          - dma-names
          - clocks
          - clock-names
          - pwms
          - pwm-names
          - vref-supply

unevaluatedProperties: false

examples:

1.  |

```{=html}
<!-- -->
```
      spi {
          #address-cells = <1>;
          #size-cells = <0>;
          /* Example for a AD400X devices */
          adc@0 {
              compatible = "adi,ad4020";
              reg = <0>;
              spi-max-frequency = <71000000>;
              vref-supply = <&vref>;

              dmas = <&rx_dma 0>;
              dma-names = "rx";

              #address-cells = <1>;
              #size-cells = <0>;

              channel@0 {
                  reg = <0>;
                  diff-channels = <0 1>;
              };
          };
      };
    - |
      spi {
          #address-cells = <1>;
          #size-cells = <0>;

          /* Example for a ADAQ400X devices */
          adc@0 {
              compatible = "adi,adaq4003";
              reg = <0>;
              spi-max-frequency = <80000000>;
              dmas = <&rx_dma 0>;
              dma-names = "rx";
              clocks = <&spi_clk>;
              clock-names = "ref_clk";
              pwms = <&adc_trigger 0 0>;
              pwm-names = "cnv";
              vref-supply = <&vref>;

              #address-cells = <1>;
              #size-cells = <0>;

              channel@0 {
                  reg = <0>;
                  diff-channels = <0 1>;
              };
          };
      };

```
:::


See the [Evaluating AD400X and ADAQ400X devices](/resources/eval/ad400x-eval-board) user guide for examples of device trees used with devices supported by the ad400x Linux driver.

## Adding Linux driver support

### Enabling the driver

Configure kernel with "make menuconfig" (alternatively use "make xconfig" or
"make qconfig")

:::{NOTE} <!-- ATTRS: round="" help="" -->

The AD400x driver depends on **CONFIG_SPI_MASTER**

:::


    Linux Kernel Configuration
        Device Drivers  --->
            ...
            <*>     Industrial I/O support --->
                --- Industrial I/O support
                ...
                Analog to digital converters  ---> 
                    ...
                    <*>   Analog Devices AD400X ADC Driver
                    ...
                ...
            ...

## Driver testing

![iio_snippets#iio device files&noheader&firstseconly&noeditbtn](/page>software/linux/docs/iio/iio_snippets#iio device files&noheader&firstseconly&noeditbtn)

:::{NOTE} <!-- ATTRS: top="" tip="" round="" box="" 60%="" -->
**TIP:**
An example program which uses the interface can be found here:

-   [IIO Oscilloscope](/resources/tools-software/linux-software/iio_oscilloscope)


:::

:::{NOTE} <!-- ATTRS: box="" bggreen="" -->
:::{HINT} <!-- ATTRS: info="" -->
This specifies any shell prompt running on the target
:::

```bash
root@analog:~# ls -l /sys/bus/iio/devices/
total 0
lrwxrwxrwx 1 root root 0 Apr 2 21:42 iio:device0 -> ../../../devices/soc0/axi/f8007100.adc/iio:device0
lrwxrwxrwx 1 root root 0 Apr 2 21:43 iio:device1 -> ../../../devices/soc0/fpga-axi@0/44a00000.spi/spi_master/spi0/spi0.0/iio:device1
lrwxrwxrwx 1 root root 0 Apr 2 21:42 iio_sysfs_trigger -> ../../../devices/iio_sysfs_trigger

root@analog:~# ls -l /sys/bus/iio/devices/iio:device1/
total 0
drwxr-xr-x 2 root root 0 Apr 2 21:43 buffer
drwxr-xr-x 2 root root 0 Apr 2 21:43 buffer0
-r--r--r-- 1 root root 4096 Apr 2 21:43 dev
-rw-r--r-- 1 root root 4096 Apr 2 21:43 in_voltage0_offset
-rw-r--r-- 1 root root 4096 Apr 2 21:43 in_voltage0_raw
-rw-r--r-- 1 root root 4096 Apr 2 21:43 in_voltage0_scale
-r--r--r-- 1 root root 4096 Apr 2 21:43 name
lrwxrwxrwx 1 root root 0 Apr 2 21:43 of_node -> ../../../../../../../../firmware/devicetree/base/fpga-axi@0/spi@44a00000/adc@0
drwxr-xr-x 2 root root 0 Apr 2 21:43 power
-rw-r--r-- 1 root root 4096 Apr 2 21:43 sampling_frequency
drwxr-xr-x 2 root root 0 Apr 2 21:43 scan_elements
lrwxrwxrwx 1 root root 0 Apr 2 21:43 subsystem -> ../../../../../../../../bus/iio
-rw-r--r-- 1 root root 4096 Apr 2 21:43 uevent
```
:::


##### Show device name

:::{NOTE} <!-- ATTRS: box="" bggreen="" -->
:::{HINT} <!-- ATTRS: info="" -->
This specifies any shell prompt running on the target
:::

```bash
root@analog:~# cat /sys/bus/iio/devices/iio:device1/name
adaq4003
```
:::


##### Show channel scale

**Description:**
Scale to be applied to in_voltagex_raw in order to obtain the measured voltage in millivolts

:::{NOTE} <!-- ATTRS: box="" bggreen="" -->
:::{HINT} <!-- ATTRS: info="" -->
This specifies any shell prompt running on the target
:::

```bash
root@analog:~# cat /sys/bus/iio/devices/iio:device1/in_voltage0_scale
0.019073486
```
:::


##### Configure sampling rate

**[Description:]{.underline}** /sys/bus/iio/devices/iio:deviceX/sampling_frequency
Configures the input sampling rate.

:::{NOTE} <!-- ATTRS: box="" bggreen="" -->
:::{HINT} <!-- ATTRS: info="" -->
This specifies any shell prompt running on the target
:::

```bash
root@analog:~# cat /sys/bus/iio/devices/iio:device1/sampling_frequency
2000000
```
:::


:::{NOTE} <!-- ATTRS: box="" bggreen="" -->
:::{HINT} <!-- ATTRS: info="" -->
This specifies any shell prompt running on the target
:::

```bash
root@analog:~# **echo 1000000 > /sys/bus/iio/devices/iio:device1/sampling_frequency**
root@analog:~# cat /sys/bus/iio/devices/iio:device1/sampling_frequency
1000000
```
:::


### Buffer management

:::{NOTE} <!-- ATTRS: box="" bggreen="" -->
:::{HINT} <!-- ATTRS: info="" -->
This specifies any shell prompt running on the target
:::

```bash
root@analog:~# ls -l /sys/bus/iio/devices/iio:device1/buffer/
total 0
-r--r--r-- 1 root root 4096 Apr 3 08:11 data_available
-r--r--r-- 1 root root 4096 Apr 3 08:11 direction
-rw-r--r-- 1 root root 4096 Apr 3 08:11 enable
-rw-r--r-- 1 root root 4096 Apr 3 08:11 length
-r--r--r-- 1 root root 4096 Apr 3 08:11 length_align_bytes
-r--r--r-- 1 root root 4096 Apr 3 08:11 watermark
```
:::


![iio_snippets#Buffer management&noheader&firstseconly&noeditbtn](/page>software/linux/docs/iio/iio_snippets#Buffer management&noheader&firstseconly&noeditbtn)

:::{NOTE} <!-- ATTRS: box="" bggreen="" -->
:::{HINT} <!-- ATTRS: info="" -->
This specifies any shell prompt running on the target
:::

```bash
root@analog:~# ls -l /sys/bus/iio/devices/iio:device1/scan_elements/
total 0
-rw-r--r-- 1 root root 4096 Apr 3 08:11 in_voltage0_en
-r--r--r-- 1 root root 4096 Apr 3 08:11 in_voltage0_index
-r--r--r-- 1 root root 4096 Apr 3 08:11 in_voltage0_type
```
:::


![iio_snippets#Typical ADC scan elements&noheader&firstseconly&noeditbtn](/page>software/linux/docs/iio/iio_snippets#Typical ADC scan elements&noheader&firstseconly&noeditbtn)

:::{NOTE} <!-- ATTRS: box="" bggreen="" -->
:::{HINT} <!-- ATTRS: info="" -->
This specifies any shell prompt running on the target
:::

```bash
root@analog:/sys/bus/iio/devices/iio:device1/scan_elements# grep "" *
in_voltage0_en:0
in_voltage0_index:0
in_voltage0_type:le:s18/32>>0
```
:::


### Buffer Example

When the buffer is enabled, the ad400x driver prepares a read transfer and configures the [SPI Engine Offload](/resources/fpga/peripherals/spi_engine/offload) module to repeat that transfer each time the offload module is triggered. Then, the ad400x driver sets a PWM device to trigger the offload module at the rate specified by the `sampling_frequency` attribute. With that, ADC readings are gathered continuously while the buffer remains enabled.

:::{NOTE} <!-- ATTRS: box="" bggreen="" -->
:::{HINT} <!-- ATTRS: info="" -->
This specifies any shell prompt running on the target - Example command sequence
:::

```bash
root@analog:~# echo 1 > /sys/bus/iio/devices/iio:device1/scan_elements/in_voltage0_en
root@analog:~# cat /sys/bus/iio/devices/iio:device1/scan_elements/in_voltage0_en
1
root@analog:~# echo 1 > /sys/bus/iio/devices/iio:device1/buffer/enable
root@analog:~# cat /sys/bus/iio/devices/iio:device1/buffer/data_available
32768
```
:::


#### Data interpretation

Each buffer entry contains one sample. The amount of bits and their meaning will vary according to ADC precision and output code pattern (whether output code is twos complement or not). Buffer raw data may be retrieved by reading the character device associated with the ADC device.

:::{NOTE} <!-- ATTRS: box="" bggreen="" -->
:::{HINT} <!-- ATTRS: info="" -->
This specifies any shell prompt running on the target
:::

```bash
root@analog:~# hexdump -n 512 -e ' 32 "%d " "n"' /dev/iio:device1
4864 4889 4730 4716 4695 4678 4667 4659 4662 4676 4706 4738 4770 4789 4786 4785 4775 4763 4752 4737 4723 4703 4686 4673 4666 4672 4688 4715 4762 4799 4820 4821
4816 4807 4788 4773 4757 4737 4718 4694 4676 4664 4668 4692 4727 4777 4814 4837 4836 4829 4822 4808 4796 4771 4748 4728 4707 4685 4664 4654 4651 4659 4675 4709
4757 4801 4823 4826 4812 4800 4789 4770 4749 4724 4700 4677 4653 4644 4633 4639 4659 4695 4738 4777 4798 4799 4794 4785 4772 4755 4735 4712 4692 4668 4652 4646
4641 4648 4674 4709 4753 4793 4817 4818 4808 4797 4780 4764 4748 4724 4699 4674 4656 4639 4627 4633 4644 4677 4716 4765 4794 4804 4801 4791 4778 4763 4744 4721
```
:::


Remove the `-n` parameter to keep reading the buffer continuously. To stop capture, disable the buffer by writing 0 to `/sys/bus/iio/devices/iio:device1/buffer/enable`.

## More Information

![iio_snippets#iio pointers&noheader&firstseconly&noeditbtn](/page>software/linux/docs/iio/iio_snippets#iio pointers&noheader&firstseconly&noeditbtn)
