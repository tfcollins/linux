---
wiki-source: https://wiki.analog.com/resources/tools-software/linux-drivers/iio-adc/ad7780
title: AD7781: 20-Bit, Pin-Programmable, Ultralow Power Sigma-Delta ADC
---

AD7780 IIO Low Power Sigma-Delta ADC Linux Driver
=================================================

Supported Devices
-----------------

-   [AD7170](https://www.google.com/search?q=AD7170&btnI=lucky)
-   [AD7171](https://www.google.com/search?q=AD7171&btnI=lucky)
-   [AD7780](https://www.google.com/search?q=AD7780&btnI=lucky)
-   [AD7781](https://www.google.com/search?q=AD7781&btnI=lucky)

Reference Circuits
------------------

-   [CN0107](https://www.google.com/search?q=CN0107&btnI=lucky)
-   [CN0108](https://www.google.com/search?q=CN0108&btnI=lucky)
-   [CN0188](https://www.google.com/search?q=CN0188&btnI=lucky)
-   [CN0218](https://www.google.com/search?q=CN0218&btnI=lucky)
-   [CN0240](https://www.google.com/search?q=CN0240&btnI=lucky)

Evaluation Boards
-----------------

-   [EVAL-AD7170EBZ](https://www.google.com/search?q=EVAL-AD7170EBZ&btnI=lucky)
-   [EVAL-AD7171EBZ](https://www.google.com/search?q=EVAL-AD7171EBZ&btnI=lucky)
-   [EVAL-AD7780EBZ](https://www.google.com/search?q=EVAL-AD7780EBZ&btnI=lucky)
-   [EVAL-AD7781EBZ](https://www.google.com/search?q=EVAL-AD7781EBZ&btnI=lucky)

Description
-----------

This is a Linux industrial I/O ([IIO](/software/linux/docs/iio/iio)) subsystem driver, targeting single channel serial interface ADCs.
The industrial I/O subsystem provides a unified framework for drivers for many different types of converters and sensors using a number of different physical interfaces (i2c, spi, etc).
See [IIO](/software/linux/docs/iio/iio) for more information.

Source Code
===========

Status
------

<table>
<thead>
<tr class="header">
<th>Source</th>
<th>Mainlined?</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><a href="https://www.google.com/search?q=drivers/staging/iio/adc/ad7780.c&amp;btnI=lucky">git</a></td>
<td><a href="https://www.google.com/search?q=drivers/staging/iio/adc/ad7780.c&amp;btnI=lucky">Yes</a></td>
</tr>
</tbody>
</table>

Files
-----

<table>
<thead>
<tr class="header">
<th>Function</th>
<th>File</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>driver</td>
<td><a href="https://www.google.com/search?q=drivers/staging/iio/adc/ad7780.c&amp;btnI=lucky">drivers/staging/iio/adc/ad7780.c</a></td>
</tr>
<tr class="even">
<td>include</td>
<td><a href="https://www.google.com/search?q=drivers/staging/iio/adc/ad7780.h&amp;btnI=lucky">drivers/staging/iio/adc/ad7780.h</a></td>
</tr>
</tbody>
</table>

Example platform device initialization
======================================

![](page>software/linux/docs/platform_and_bus_model#Platform Data&noheader&firstseconly&noeditbtn)

The reference voltage may vary between boards and models. The platform\_data for the device\'s \"struct device\" holds this information.

\<source trunk/drivers/staging/iio/adc/ad7780.h:ad7780\_platform\_data{} c linux-kernel\>

``` {.c}
static struct ad7780_platform_data __initdata ad7780_pdata = {
    .vref_mv    = 2500,
    .gpio_pdrst = GPIO_PF10,
};
```

:::{NOTE} <!-- ATTRS: round="" help\="" -->

The AD7780 doesn\'t feature a dedicated SPI chip select, in addition it
features a dual use data out ready **DOUT/RDY** output.
In order to avoid contentions on the SPI bus, it\'s therefore necessary
to use spi bus locking combined with a dedicated GPIO to control the
power down reset signal **PDRST** of the AD7780.\
\
The AD7780 DOUT/RDY output typically connected to SPI MISO must also
be wired to an interrupt capable GPIO.

:::


Specifying reference voltage via the regulator framework
--------------------------------------------------------

:::{NOTE} <!-- ATTRS: tip\="" -->

This driver supports also an alternative way of specifying the reference voltage, by using the Linux regulator framework.

:::


Below example specifies a 3.3 Volt reference for the SPI device 3 on SPI-Bus 0. (**spi0.3**)

``` {.c}
# if defined(CONFIG_REGULATOR_FIXED_VOLTAGE) || defined(CONFIG_REGULATOR_FIXED_VOLTAGE_MODULE)
static struct regulator_consumer_supply ad7780_consumer_supplies[] = {
    REGULATOR_SUPPLY("vcc", "spi0.3"),
};

static struct regulator_init_data stamp_avdd_reg_init_data = {
    .constraints    = {
        .name   = "3V3",
        .valid_ops_mask = REGULATOR_CHANGE_STATUS,
    },
    .consumer_supplies = ad7780_consumer_supplies,
    .num_consumer_supplies = ARRAY_SIZE(ad7780_consumer_supplies),
};

static struct fixed_voltage_config stamp_vdd_pdata = {
    .supply_name    = "board-3V3",
    .microvolts = 3300000,
    .gpio       = -EINVAL,
    .enabled_at_boot = 0,
    .init_data  = &stamp_avdd_reg_init_data,
};
static struct platform_device brd_voltage_regulator = {
    .name       = "reg-fixed-voltage",
    .id     = -1,
    .num_resources  = 0,
    .dev        = {
        .platform_data  = &stamp_vdd_pdata,
    },
};
## endif
```

``` {.c}
static struct platform_device *board_devices[] __initdata = {
# if defined(CONFIG_REGULATOR_FIXED_VOLTAGE) || defined(CONFIG_REGULATOR_FIXED_VOLTAGE_MODULE)
    &brd_voltage_regulator
## endif
};
```

``` {.c}
static int __init board_init(void)
{
    [--snip--]

    platform_add_devices(board_devices, ARRAY_SIZE(board_devices));

    [--snip--]

    return 0;
}
arch_initcall(board_init);
```

![](page>software/linux/docs/platform_and_bus_model#Declaring SPI slave devices&firstseconly&noeditbtn)

Depending on the converter IC used, you may need to set the modalias accordingly, matching your part name.
It may also required to adjust max\_speed\_hz. Please consult the datasheet, for maximum spi clock supported by the device in question.

``` {.c}
static struct spi_board_info board_spi_board_info[] __initdata = {
## if defined(CONFIG_AD7780) || \
    defined(CONFIG_AD7780_MODULE)
    {
        /* the modalias must be the same as spi device driver name */
        .modalias = "ad7780", /* Name of spi_driver for this device */
        .max_speed_hz = 1000000,     /* max spi clock (SCK) speed in HZ */
        .bus_num = 0, /* Framework bus number */
        .chip_select = 3, /* Framework chip select */
        .platform_data = &ad7780_pdata,
        .irq = IRQ_PF6,
        .mode = SPI_MODE_0,
    },
## endif
};
```

``` {.c}
static int __init board_init(void)
{
    [--snip--]

    spi_register_board_info(board_spi_board_info, ARRAY_SIZE(board_spi_board_info));

    [--snip--]

    return 0;
}
arch_initcall(board_init);
```

Adding Linux driver support
===========================

Configure kernel with \"make menuconfig\" (alternatively use \"make xconfig\" or
\"make qconfig\")

:::{NOTE} <!-- ATTRS: round="" help\="" -->

The AD7780 Driver depends on **CONFIG\_SPI**

:::


```{=markdown}
```
Linux Kernel Configuration
    Device Drivers  --->
        [*] Staging drivers  --->
            <*>     Industrial I/O support --->
                --- Industrial I/O support
                -*-   Enable ring buffer support within IIO
                -*-     Industrial I/O lock free software ring
                -*-   Enable triggered sampling support

                      *** Analog to digital converters ***
                [--snip--]

                <*>   Analog Devices AD7780 AD7781 ADC driver

                [--snip--]


```
```
Hardware configuration
======================

Driver testing
==============

![iio\_snippets\#iio device files&noheader&firstseconly&noeditbtn](/page>software/linux/docs/iio/iio_snippets#iio device files&noheader&firstseconly&noeditbtn)

:::{NOTE} <!-- ATTRS: box="" bggreen\="" -->
:::{HINT} <!-- ATTRS: info\="" -->
This specifies any shell prompt running on the target
:::

```bash
root:/\> **cd /sys/bus/iio/devices/**
root:/sys/bus/iio/devices\> ls
device0
root:/sys/bus/iio/devices\> **cd device0**

root:/sys/devices/platform/bfin-spi.0/spi0.3/device0\> **ls -l**
-r\--r\--r\-- 1 root root 4096 Jan 3 12:41 in\_voltage0\_raw
-r\--r\--r\-- 1 root root 4096 Jan 3 12:41 in\_scale
-r\--r\--r\-- 1 root root 4096 Jan 3 12:41 name
lrwxrwxrwx 1 root root 0 Jan 3 12:41 subsystem -\> ../../../../../bus/iio
-rw-r\--r\-- 1 root root 4096 Jan 3 12:41 uevent
```
:::


##### Show device name

:::{NOTE} <!-- ATTRS: box="" bggreen\="" -->
:::{HINT} <!-- ATTRS: info\="" -->
This specifies any shell prompt running on the target
:::

```bash
root:/sys/devices/platform/bfin-spi.0/spi0.3/device0\> **cat name**
ad7780
```
:::


##### Show scale

**Description:**\
scale to be applied to in\_voltage0\_raw in order to obtain the measured voltage in millivolts.

:::{NOTE} <!-- ATTRS: box="" bggreen\="" -->
:::{HINT} <!-- ATTRS: info\="" -->
This specifies any shell prompt running on the target
:::

```bash
root:/sys/devices/platform/bfin-spi.0/spi0.3/device0\> **cat in\_scale**
0.00029
```
:::


##### Show channel 0 measurement

**Description:**\
Raw unscaled voltage measurement on channel 0

:::{NOTE} <!-- ATTRS: box="" bggreen\="" -->
:::{HINT} <!-- ATTRS: info\="" -->
This specifies any shell prompt running on the target
:::

```bash
root:/sys/devices/platform/bfin-spi.0/spi0.3/device0\> **cat in0\_raw**
-1
```
:::


**U** = *in\_voltage0\_raw \* in\_scale* = -1 \* 0.00029 = **-0.00029 *mV***

More Information
================

![iio\_snippets\#iio pointers&noheader&firstseconly&noeditbtn](/page>software/linux/docs/iio/iio_snippets#iio pointers&noheader&firstseconly&noeditbtn)
