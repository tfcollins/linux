---
wiki-source: https://wiki.analog.com/resources/tools-software/linux-drivers/iio-adc/ad7476a
title: LTC2314-14: 14-Bit, 4.5Msps Serial Sampling ADC in TSOT
---

# AD7476A IIO Single Channel Serial ADC Linux Driver

#### Supported Devices

-   [AD7091R](adi>AD7091R)
-   [AD7273](adi>AD7273)
-   [AD7274](adi>AD7274)
-   [AD7276](adi>AD7276)
-   [AD7277](adi>AD7277)
-   [AD7278](adi>AD7278)
-   [AD7466](adi>AD7466)
-   [AD7467](adi>AD7467)
-   [AD7468](adi>AD7468)
-   [AD7475](adi>AD7475)
-   [AD7476](adi>AD7476)
-   [AD7476A](adi>AD7476A)
-   [AD7477](adi>AD7477)
-   [AD7477A](adi>AD7477A)
-   [AD7478](adi>AD7478)
-   [AD7478A](adi>AD7478A)
-   [AD7495](adi>AD7495)
-   [AD7680](adi>AD7680)
-   [AD7683](adi>AD7683)
-   [AD7684](adi>AD7684)
-   [AD7685](adi>AD7685)
-   [AD7686](adi>AD7686)
-   [AD7687](adi>AD7687)
-   [AD7688](adi>AD7688)
-   [AD7690](adi>AD7690)
-   [AD7691](adi>AD7691)
-   [AD7693](adi>AD7693)
-   [AD7694](adi>AD7694)
-   [AD7910](adi>AD7910)
-   [AD7920](adi>AD7920)
-   [AD7940](adi>AD7940)
-   [AD7942](adi>AD7942)
-   [AD7946](adi>AD7946)
-   [AD7980](adi>AD7980)
-   [AD7982](adi>AD7982)
-   [AD7984](adi>AD7984)
-   [AD7985](adi>AD7985)
-   [AD7988-1](adi>AD7988-1)
-   [AD7988-5](adi>AD7988-5)
-   [LTC2314-14](adi>LTC2314-14)

#### Reference Circuits

-   [CN0104](adi>CN0104)
-   [CN0130](adi>CN0130)
-   [CN0178](adi>CN0178)
-   [CN0180](adi>CN0180)
-   [CN0194](adi>CN0194)
-   [CN0213](adi>CN0213)
-   [CN0225](adi>CN0225)
-   [CN0237](adi>CN0237)
-   [CN0241](adi>CN0241)
-   [CN0247](adi>CN0247)
-   [CN0255](adi>CN0255)
-   [CN0260](adi>CN0260)
-   [CN0261](adi>CN0261)
-   [CN0269](adi>CN0269)
-   [CN0305](adi>CN0305)
-   [CN0306](adi>CN0306)
-   [CN0335](adi>CN0335)
-   [CN0336](adi>CN0336)
-   [CN0337](adi>CN0337)
-   [CN0350](adi>CN0350)
-   [CN0366](adi>CN0366)

#### Evaluation Boards

-   [EVAL-AD7091RSDZ](adi>EVAL-AD7091RSDZ)
-   [EVAL-AD7276SDZ](adi>EVAL-AD7276SDZ)
-   [EVAL-AD7466](adi>EVAL-AD7466)
-   [EVAL-AD7476A](adi>EVAL-AD7476A)
-   [EVAL-AD7477](adi>EVAL-AD7477)
-   [EVAL-AD7910](adi>EVAL-AD7910)
-   [EVAL-AD7920](adi>EVAL-AD7920)
-   [EVAL-AD7942](adi>EVAL-AD7942)
-   [EVAL-AD7683SDZ](adi>EVAL-AD7683SDZ)
-   [EVAL-AD7684SDZ](adi>EVAL-AD7684SDZ)
-   [EVAL-AD7685SDZ](adi>EVAL-AD7685SDZ)
-   [EVAL-AD7686SDZ](adi>EVAL-AD7686SDZ)
-   [EVAL-AD7687SDZ](adi>EVAL-AD7687SDZ)
-   [EVAL-AD7688SDZ](adi>EVAL-AD7688SDZ)
-   [EVAL-AD7690SDZ](adi>EVAL-AD7690SDZ)
-   [EVAL-AD7691SDZ](adi>EVAL-AD7691SDZ)
-   [EVAL-AD7693SDZ](adi>EVAL-AD7693SDZ)
-   [EVAL-AD7694SDZ](adi>EVAL-AD7694SDZ)
-   [EVAL-AD7942SDZ](adi>EVAL-AD7942SDZ)
-   [EVAL-AD7946SDZ](adi>EVAL-AD7946SDZ)
-   [EVAL-AD7980SDZ](adi>EVAL-AD7980SDZ)
-   [EVAL-AD7982SDZ](adi>EVAL-AD7982SDZ)
-   [EVAL-AD7984SDZ](adi>EVAL-AD7984SDZ)
-   [EVAL-AD7985EBZ](adi>EVAL-AD7985EBZ)
-   [EVAL-AD7988-5SDZ](adi>EVAL-AD7988-5SDZ)

#### Description

This is a Linux industrial I/O ([IIO](/software/linux/docs/iio/iio)) subsystem driver, targeting single channel serial interface ADCs.
The industrial I/O subsystem provides a unified framework for drivers for many different types of converters and sensors using a number of different physical interfaces (i2c, spi, etc).
See [IIO](/software/linux/docs/iio/iio) for more information.

### Source Code

#### Status

<table>
<thead>
<tr class="header">
<th>Source</th>
<th>Mainlined?</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><a href="git.linux.org&gt;drivers/iio/adc/ad7476.c">git</a></td>
<td><a href="git.linux.org&gt;drivers/iio/adc/ad7476.c">Yes</a></td>
</tr>
</tbody>
</table>

#### Files

<table>
<thead>
<tr class="header">
<th>Function</th>
<th>File</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>driver</td>
<td><a href="git.linux.org&gt;drivers/iio/adc/ad7476.c">drivers/iio/adc/ad7476.c</a></td>
</tr>
</tbody>
</table>

### Example platform device initialization

#### Specifying reference voltage via the regulator framework

Below example specifies a 3.3 Volt reference for the SPI device 3 on SPI-Bus 0. (**spi0.3**)

``` c
## if defined(CONFIG_REGULATOR_FIXED_VOLTAGE) || defined(CONFIG_REGULATOR_FIXED_VOLTAGE_MODULE)
static struct regulator_consumer_supply ad7476_consumer_supplies[] = {
    REGULATOR_SUPPLY("vcc", "spi0.3"),
};

static struct regulator_init_data stamp_avdd_reg_init_data = {
    .constraints    = {
        .name   = "3V3",
        .valid_ops_mask = REGULATOR_CHANGE_STATUS,
    },
    .consumer_supplies = ad7476_consumer_supplies,
    .num_consumer_supplies = ARRAY_SIZE(ad7476_consumer_supplies),
};

static struct fixed_voltage_config stamp_vdd_pdata = {
    .supply_name    = "board-3V3",
    .microvolts = 3300000,
    .gpio       = -EINVAL,
    .enabled_at_boot = 0,
    .init_data  = &stamp_avdd_reg_init_data,
};
static struct platform_device brd_voltage_regulator = {
    .name       = "reg-fixed-voltage",
    .id     = -1,
    .num_resources  = 0,
    .dev        = {
        .platform_data  = &stamp_vdd_pdata,
    },
};
## endif
```

``` c
static struct platform_device *board_devices[] __initdata = {
## if defined(CONFIG_REGULATOR_FIXED_VOLTAGE) || defined(CONFIG_REGULATOR_FIXED_VOLTAGE_MODULE)
    &brd_voltage_regulator
## endif
};
```

``` c
static int __init board_init(void)
{
    [--snip--]

    platform_add_devices(board_devices, ARRAY_SIZE(board_devices));

    [--snip--]

    return 0;
}
arch_initcall(board_init);
```

![](page>software/linux/docs/platform_and_bus_model#Declaring SPI slave devices&firstseconly&noeditbtn)

Depending on the converter IC used, you may need to set the modalias accordingly, matching your part name.
It may also required to adjust max_speed_hz. Please consult the datasheet, for maximum spi clock supported by the device in question.

``` c
static struct spi_board_info board_spi_board_info[] __initdata = {
## if defined(CONFIG_AD7476) || 
    defined(CONFIG_AD7476_MODULE)
    {
        /* the modalias must be the same as spi device driver name */
        .modalias = "ad7476", /* Name of spi_driver for this device */
        .max_speed_hz = 1000000,     /* max spi clock (SCK) speed in HZ */
        .bus_num = 0, /* Framework bus number */
        .chip_select = 3, /* Framework chip select */
        .mode = SPI_MODE_3,
    },
## endif
};
```

``` c
static int __init board_init(void)
{
    [--snip--]

    spi_register_board_info(board_spi_board_info, ARRAY_SIZE(board_spi_board_info));

    [--snip--]

    return 0;
}
arch_initcall(board_init);
```

#### Devicetree

Required devicetree properties:

-   compatible: Needs to be "adi," followed by the name of the device. E.g. "adi,ad7476a"
-   reg: The chipselect number used for the device
-   spi-max-frequency: Maximum SPI clock frequency.
-   spi-cpha: Needs to be set for the correct SPI mode
-   spi-cpol: Needs to be set for the correct SPI mode
-   vcc-supply: Phandle to the supply regulator

```{=html}
<!-- -->
```
           adc_supply: fixedregulator {
                   compatible = "regulator-fixed";
                   regulator-name = "fixed-supply";
                   regulator-min-microvolt = <3300000>;
                   regulator-max-microvolt = <3300000>;
           };

           spi: spi@e0007000 {
                   #address-cells = <1>;
                   #size-cells = <0>;
                   compatible = "xlnx,ps7-spi-1.00.a";
                   ...

                   ad7476@0 {
                           compatible = "adi,ad7476a";
                           reg = <0>;
                           spi-max-frequency = <1000000>;
                           spi-cpha;
                           spi-cpol;
                           vcc-supply = <&adc_supply>;
                   };
            };

### Adding Linux driver support

Configure kernel with "make menuconfig" (alternatively use "make xconfig" or
"make qconfig")

:::{NOTE} <!-- ATTRS: round="" help="" -->

The AD7476 Driver depends on **CONFIG_SPI**

:::


    Linux Kernel Configuration
        Device Drivers  --->
            ...
            <*>     Industrial I/O support --->
                --- Industrial I/O support
                ...
                Analog to digital converters  ---> 
                    ...
                    <*>  Analog Devices AD7476 and similar 1-channel ADCs driver
                    ...
                ...
            ...

### Hardware configuration

### Driver testing

![iio_snippets#iio device files&noheader&firstseconly&noeditbtn](/page>software/linux/docs/iio/iio_snippets#iio device files&noheader&firstseconly&noeditbtn)

:::{NOTE} <!-- ATTRS: box="" bggreen="" -->
:::{HINT} <!-- ATTRS: info="" -->
This specifies any shell prompt running on the target
:::

```bash
root:/> **cd /sys/bus/iio/devices/**
root:/sys/bus/iio/devices> ls
device0 device0:buffer0:access0 trigger0
device0:buffer0 device0:buffer0:event0

root:/sys/bus/iio/devices> **cd device0**

root:/sys/devices/platform/bfin-spi.0/spi0.3/device0> **ls -l**
drwxr-xr-x 5 root root 0 Jan 1 00:00 buffer
-r--r--r-- 1 root root 4096 Jan 1 00:00 in_voltage0_raw
-r--r--r-- 1 root root 4096 Jan 1 00:00 in_voltage_scale
-r--r--r-- 1 root root 4096 Jan 1 00:00 name
lrwxrwxrwx 1 root root 0 Jan 1 00:00 subsystem -> ../../../../../bus/iio
drwxr-xr-x 2 root root 0 Jan 1 00:00 trigger
-rw-r--r-- 1 root root 4096 Jan 1 00:00 uevent
```
:::


###### Show device name

:::{NOTE} <!-- ATTRS: box="" bggreen="" -->
:::{HINT} <!-- ATTRS: info="" -->
This specifies any shell prompt running on the target
:::

```bash
root:/sys/devices/platform/bfin-spi.0/spi0.3/device0> **cat name**
ad7476
```
:::


###### Show scale

**Description:**
scale to be applied to in_voltage0_raw in order to obtain the measured voltage in millivolts.

:::{NOTE} <!-- ATTRS: box="" bggreen="" -->
:::{HINT} <!-- ATTRS: info="" -->
This specifies any shell prompt running on the target
:::

```bash
root:/sys/devices/platform/bfin-spi.0/spi0.3/device0> **cat in_voltage_scale**
0.805
```
:::


###### Show channel 0 measurement

**Description:**
Raw unscaled voltage measurement on channel 0

:::{NOTE} <!-- ATTRS: box="" bggreen="" -->
:::{HINT} <!-- ATTRS: info="" -->
This specifies any shell prompt running on the target
:::

```bash
root:/sys/devices/platform/bfin-spi.0/spi0.3/device0> **cat in_voltage0_raw**
2001
```
:::


**U** = *in_voltage0_raw * in_voltage_scale* = 2001 * 0.805 = **1610,805 *mV***

#### Trigger management

![iio_snippets#iio devices with trigger consumer interface&noheader&firstseconly&noeditbtn](/page>software/linux/docs/iio/iio_snippets#iio devices with trigger consumer interface&noheader&firstseconly&noeditbtn)

##### Available standalone trigger drivers

![iio_snippets#Standalone trigger drivers&noheader&firstseconly&noeditbtn](/page>software/linux/docs/iio/iio_snippets#Standalone trigger drivers&noheader&firstseconly&noeditbtn)

#### Buffer management

:::{NOTE} <!-- ATTRS: box="" bggreen="" -->
:::{HINT} <!-- ATTRS: info="" -->
This specifies any shell prompt running on the target
:::

```bash
root:/sys/devices/platform/bfin-spi.0/spi0.3/device0/device0:buffer0> ls
**bytes_per_datum** **enable** subsystem
device0:buffer0:access0 **length** uevent
device0:buffer0:event0 **scan_elements**
root:/sys/devices/platform/bfin-spi.0/spi0.3/device0/device0:buffer0>
```
:::


![iio_snippets#Buffer management&noheader&firstseconly&noeditbtn](/page>software/linux/docs/iio/iio_snippets#Buffer management&noheader&firstseconly&noeditbtn)

:::{NOTE} <!-- ATTRS: box="" bggreen="" -->
:::{HINT} <!-- ATTRS: info="" -->
This specifies any shell prompt running on the target
:::

```bash
root:/sys/devices/platform/bfin-spi.0/spi0.3/device0/device0:buffer0/scan_elements> ls
in0_en in_type timestamp_index
in0_index timestamp_en timestamp_type
root:/sys/devices/platform/bfin-spi.0/spi0.3/device0/device0:buffer0/scan_elements>
```
:::


![iio_snippets#Typical ADC scan elements&noheader&firstseconly&noeditbtn](/page>software/linux/docs/iio/iio_snippets#Typical ADC scan elements&noheader&firstseconly&noeditbtn)

### More Information

![iio_snippets#iio pointers&noheader&firstseconly&noeditbtn](/page>software/linux/docs/iio/iio_snippets#iio pointers&noheader&firstseconly&noeditbtn)
