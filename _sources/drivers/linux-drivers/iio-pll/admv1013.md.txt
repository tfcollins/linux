---
wiki-source: https://wiki.analog.com/resources/tools-software/linux-drivers/iio-pll/admv1013
title: ADMV1013: 24 GHz to 44 GHz, Wideband, Microwave Upconverter
source: /home/runner/work/linux/linux/drivers/iio/frequency/admv1013.c
compatibles: adi,admv1013, admv1013
---
# ADMV1013 24 GHz to 44 GHz, Wideband, Microwave Upconverter

### Supported Devices

-   [ADMV1013](https://analog.com/ADMV1013)

### Evaluation Boards

-   [EVAL-ADMV1013](https://analog.com/EVAL-ADMV1013)

### Description

This is a Linux industrial I/O ([IIO](/software/linux/docs/iio/iio)) subsystem driver, targeting serial interface Microwave converters.
The industrial I/O subsystem provides a unified framework for drivers for many different types of converters and sensors using a number of different physical interfaces (i2c, spi, etc).
See [IIO](/software/linux/docs/iio/iio) for more information.

## Source Code

### Status

<table>
<thead>
<tr class="header">
<th>Source</th>
<th>Mainlined?</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><a href="https://github.com/analogdevicesinc/linux/main?drivers/iio/frequency/admv1013.c">git</a></td>
<td><a href="git.linux.org&gt;drivers/iio/frequency/admv1013.c">WIP</a></td>
</tr>
</tbody>
</table>

### Files

<table>
<thead>
<tr class="header">
<th>Function</th>
<th>File</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>driver</td>
<td><a href="https://github.com/analogdevicesinc/linux/main?drivers/iio/frequency/admv1013.c">drivers/iio/frequency/admv1013.c</a></td>
</tr>
<tr class="even">
<td>Documentation</td>
<td><a href="git.linux.org&gt;Documentation/ABI/testing/sysfs-bus-iio">Documentation/ABI/testing/sysfs-bus-iio</a></td>
</tr>
</tbody>
</table>

<!-- CMDS: firstseconly noeditbtn -->
```{include} software_linux_docs_platform_and_bus_model_SUB_Declaring_SPI_slave_devices.md
```

#### properties

**compatible:**

-   enum:
    -   adi,admv1013

**reg:**

-   maxItems: 1

**spi-max-frequency:**

-   minimum: 1000000

**clocks:**

-   description: Definition of the external clock (see clock/clock-bindings.txt)
-   minItems: 1

**clock-names:**

-   description: Must be "lo_in"
-   maxItems: 1

**clock-output-names:**

-   maxItems: 1

**clock-scales:**

-   description: The Common Clock Framework max rate is limited by MAX of unsigned long. For ADMV1013 device this is a deficiency. If specified, this property allows arbitrary scales. The first element in the array should be the multiplier and the second element should be the divider.
-   $ref: /schemas/types.yaml#/definitions/uint32-array
-   minimum: 1

**vcm-supply:**

-   description: analog voltage regulator (see regulator/regulator.txt)

**adi,parity-en:**

-   description: Enable Parity for Write execution.
-   type: boolean

**adi,vga-pd:**

-   description: Power Down the VGA Circuit.
-   type: boolean

**adi,mixer-pd:**

-   description: Power Down the Mixer Circuit.
-   type: boolean

**adi,quad-pd:**

-   description: Power Down the Quad.
-   type: boolean

**adi,bg-pd:**

-   description: Power Down the Transmitter Band Gap.
-   type: boolean

**adi,mixer-if-en:**

-   description: Enable the IF Mode.
-   type: boolean

**adi,det-en:**

-   description: Enable the Envelope Detector.
-   type: boolean

**adi,quad-se-mode:**

-   description: Switch Differential/SE Modes.
-   $ref: /schemas/types.yaml#/definitions/uint32
-   enum: [6, 9, 12]

**'#address-cells':**

-   const: 1

**'#size-cells':**

-   const: 0

**'#clock-cells':**

-   const: 0

**required:**

-   compatible
-   reg
-   clocks
-   clock-names
-   vcm-supply

#### Example

``` c
spi {
      #address-cells = <1>;
      #size-cells = <0>;
      admv1013@0{
        compatible = "adi,admv1013";
        reg = <0>;
        spi-max-frequency = <1000000>;
        clocks = <&admv1013_lo>;
        clock-scales = <1 5>;
        clock-names = "lo_in";
        vcm-supply = <&vcm>;
        adi,quad-se-mode = <12>;
        adi,parity-en;
        adi,mixer-if-en;
        adi,det-en;
      };
    };
```

## Adding Linux driver support

Configure kernel with "make menuconfig" (alternatively use "make xconfig" or
"make qconfig")

:::{NOTE} <!-- ATTRS: round="" help="" -->

The ADMV1013 Driver depends on **CONFIG_SPI**

:::


    Linux Kernel Configuration
        Device Drivers  --->
            <*>     Industrial I/O support --->
                --- Industrial I/O support
                    Frequency  --->
                        <*> Analog Devices ADMV1013 Microwave Upconverter

## Hardware configuration

<!-- CMDS: noheader firstseconly noeditbtn -->
```{include} software_linux_docs_iio_iio_snippets_SUB_iio_device_files.md
```

:::{NOTE} <!-- ATTRS: box="" bggreen="" -->
:::{HINT} <!-- ATTRS: info="" -->
This specifies any shell prompt running on the target
:::

```{code-block} bash
root:/> **cd /sys/bus/iio/devices/**
root:/sys/bus/iio/devices> ls
iio:device0
root:/sys/bus/iio/devices> **iio:device0**

root:/> **ls -l**
-r--r--r-- 1 root root 4096 May 6 12:20 dev
-r--r--r-- 1 root root 4096 May 6 12:20 name
-rw-r--r-- 1 root root 4096 May 6 13:01 out_altvoltage0_i_offset
-rw-r--r-- 1 root root 4096 May 6 13:01 out_altvoltage0_q_offset
-rw-r--r-- 1 root root 4096 May 6 13:01 out_altvoltage0_i_phase
-rw-r--r-- 1 root root 4096 May 6 13:01 out_altvoltage0_q_phase
lrwxrwxrwx 1 root root 0 May 6 12:20 subsystem -> ../../../../../../../../bus/iio
-rw-r--r-- 1 root root 4096 May 6 12:20 uevent
```
:::


##### Show device name

:::{NOTE} <!-- ATTRS: box="" bggreen="" -->
:::{HINT} <!-- ATTRS: info="" -->
This specifies any shell prompt running on the target
:::

```{code-block} bash
root:/> **cd /sys/bus/iio/devices/iio:device0/**
root:/> **cat name**
admv1013
```
:::


##### Set ChannelY Offset value

/sys/bus/iio/devices/iio:deviceX/out_altvoltageY_Z_offset
Offset value. If shared across all channels,
<type>_offset is used.

:::{NOTE} <!-- ATTRS: box="" bggreen="" -->
:::{HINT} <!-- ATTRS: info="" -->
This specifies any shell prompt running on the target
:::

```{code-block} bash
root:/> **cat out_altvoltage0_i_offset**
0 0

root:/> **echo 1.1 > out_altvoltage0_i_offset**
root:/> **cat out_altvoltage0_offset**
1 1
```
:::


##### Set ChannelY Phase value

/sys/bus/iio/devices/iio:deviceX/out_altvoltageY_Z_phase
Phase value. If shared across all channels,
<type>_phase is used.

:::{NOTE} <!-- ATTRS: box="" bggreen="" -->
:::{HINT} <!-- ATTRS: info="" -->
This specifies any shell prompt running on the target
:::

```{code-block} bash
root:/> **cat out_altvoltage0_i_phase**
0

root:/> **echo 1 > out_altvoltage0_i_phase**
root:/> **cat out_altvoltage0_phase**
1
```
:::


## More Information

<!-- CMDS: noheader firstseconly noeditbtn -->
```{include} software_linux_docs_iio_iio_snippets_SUB_iio_pointers.md
```
