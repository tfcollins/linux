---
wiki-source: https://wiki.analog.com/resources/tools-software/linux-drivers/misc/dpot
title: ADN2860: 3-Channel, Dual 512- and Single 128-Position IÂ²C Digital Potentiometer
---

Digital Potentiometer Linux Driver
==================================

# Supported Devices

-   [AD5160](https://www.google.com/search?q=AD5160&btnI=lucky)
-   [AD5161](https://www.google.com/search?q=AD5161&btnI=lucky)
-   [AD5165](https://www.google.com/search?q=AD5165&btnI=lucky)
-   [AD5170](https://www.google.com/search?q=AD5170&btnI=lucky)
-   [AD5171](https://www.google.com/search?q=AD5171&btnI=lucky)
-   [AD5172](https://www.google.com/search?q=AD5172&btnI=lucky)
-   [AD5201](https://www.google.com/search?q=AD5201&btnI=lucky)
-   [AD5203](https://www.google.com/search?q=AD5203&btnI=lucky)
-   [AD5204](https://www.google.com/search?q=AD5204&btnI=lucky)
-   [AD5206](https://www.google.com/search?q=AD5206&btnI=lucky)
-   [AD5207](https://www.google.com/search?q=AD5207&btnI=lucky)
-   [AD5231](https://www.google.com/search?q=AD5231&btnI=lucky)
-   [AD5232](https://www.google.com/search?q=AD5232&btnI=lucky)
-   [AD5233](https://www.google.com/search?q=AD5233&btnI=lucky)
-   [AD5235](https://www.google.com/search?q=AD5235&btnI=lucky)
-   [AD5242](https://www.google.com/search?q=AD5242&btnI=lucky)
-   [AD5243](https://www.google.com/search?q=AD5243&btnI=lucky)
-   [AD5245](https://www.google.com/search?q=AD5245&btnI=lucky)
-   [AD5246](https://www.google.com/search?q=AD5246&btnI=lucky)
-   [AD5247](https://www.google.com/search?q=AD5247&btnI=lucky)
-   [AD5248](https://www.google.com/search?q=AD5248&btnI=lucky)
-   [AD5251](https://www.google.com/search?q=AD5251&btnI=lucky)
-   [AD5252](https://www.google.com/search?q=AD5252&btnI=lucky)
-   [AD5253](https://www.google.com/search?q=AD5253&btnI=lucky)
-   [AD5254](https://www.google.com/search?q=AD5254&btnI=lucky)
-   [AD5255](https://www.google.com/search?q=AD5255&btnI=lucky)
-   [AD5258](https://www.google.com/search?q=AD5258&btnI=lucky)
-   [AD5259](https://www.google.com/search?q=AD5259&btnI=lucky)
-   [AD5260](https://www.google.com/search?q=AD5260&btnI=lucky)
-   [AD5262](https://www.google.com/search?q=AD5262&btnI=lucky)
-   [AD5270](https://www.google.com/search?q=AD5270&btnI=lucky)
-   [AD5271](https://www.google.com/search?q=AD5271&btnI=lucky)
-   [AD5272](https://www.google.com/search?q=AD5272&btnI=lucky)
-   [AD5273](https://www.google.com/search?q=AD5273&btnI=lucky)
-   [AD5274](https://www.google.com/search?q=AD5274&btnI=lucky)
-   [AD5280](https://www.google.com/search?q=AD5280&btnI=lucky)
-   [AD5282](https://www.google.com/search?q=AD5282&btnI=lucky)
-   [AD5290](https://www.google.com/search?q=AD5290&btnI=lucky)
-   [AD5291](https://www.google.com/search?q=AD5291&btnI=lucky)
-   [AD5292](https://www.google.com/search?q=AD5292&btnI=lucky)
-   [AD5293](https://www.google.com/search?q=AD5293&btnI=lucky)
-   [AD7376](https://www.google.com/search?q=AD7376&btnI=lucky)
-   [AD8400](https://www.google.com/search?q=AD8400&btnI=lucky)
-   [AD8402](https://www.google.com/search?q=AD8402&btnI=lucky)
-   [AD8403](https://www.google.com/search?q=AD8403&btnI=lucky)
-   [ADN2850](https://www.google.com/search?q=ADN2850&btnI=lucky)
-   [ADN2860](https://www.google.com/search?q=ADN2860&btnI=lucky)

#### Reference Circuits

-   [CN0287](https://www.google.com/search?q=CN0287&btnI=lucky)
-   [CN0357](https://www.google.com/search?q=CN0357&btnI=lucky)

#### Evaluation Boards

-   [EVAL-AD5160EBZ](https://www.google.com/search?q=EVAL-AD5160EBZ&btnI=lucky)
-   [EVAL-AD5161EBZ](https://www.google.com/search?q=EVAL-AD5161EBZ&btnI=lucky)
-   [EVAL-AD5165EBZ](https://www.google.com/search?q=EVAL-AD5165EBZ&btnI=lucky)
-   [EVAL-AD5171DBZ](https://www.google.com/search?q=EVAL-AD5171DBZ&btnI=lucky)
-   [EVAL-AD5172SDZ](https://www.google.com/search?q=EVAL-AD5172SDZ&btnI=lucky)
-   [EVAL-AD5232SDZ](https://www.google.com/search?q=EVAL-AD5232SDZ&btnI=lucky)
-   [EVAL-AD5235SDZ](https://www.google.com/search?q=EVAL-AD5235SDZ&btnI=lucky)
-   [EVAL-AD5242EBZ](https://www.google.com/search?q=EVAL-AD5242EBZ&btnI=lucky)
-   [EVAL-AD5243SDZ](https://www.google.com/search?q=EVAL-AD5243SDZ&btnI=lucky)
-   [EVAL-AD5245EBZ](https://www.google.com/search?q=EVAL-AD5245EBZ&btnI=lucky)
-   [EVAL-AD5246DBZ](https://www.google.com/search?q=EVAL-AD5246DBZ&btnI=lucky)
-   [EVAL-AD5247DBZ](https://www.google.com/search?q=EVAL-AD5247DBZ&btnI=lucky)
-   [EVAL-AD5252SDZ](https://www.google.com/search?q=EVAL-AD5252SDZ&btnI=lucky)
-   [EVAL-AD5254SDZ](https://www.google.com/search?q=EVAL-AD5254SDZ&btnI=lucky)
-   [EVAL-AD5258DBZ](https://www.google.com/search?q=EVAL-AD5258DBZ&btnI=lucky)
-   [EVAL-AD5259DBZ](https://www.google.com/search?q=EVAL-AD5259DBZ&btnI=lucky)
-   [EVAL-AD5262EBZ](https://www.google.com/search?q=EVAL-AD5262EBZ&btnI=lucky)
-   [EVAL-AD5270SDZ](https://www.google.com/search?q=EVAL-AD5270SDZ&btnI=lucky)
-   [EVAL-AD5272SDZ](https://www.google.com/search?q=EVAL-AD5272SDZ&btnI=lucky)
-   [EVAL-AD5273DBZ](https://www.google.com/search?q=EVAL-AD5273DBZ&btnI=lucky)
-   [EVAL-AD5282EBZ](https://www.google.com/search?q=EVAL-AD5282EBZ&btnI=lucky)
-   [EVAL-AD5290EBZ](https://www.google.com/search?q=EVAL-AD5290EBZ&btnI=lucky)
-   [EVAL-AD5292EBZ](https://www.google.com/search?q=EVAL-AD5292EBZ&btnI=lucky)
-   [EVAL-AD7376EBZ](https://www.google.com/search?q=EVAL-AD7376EBZ&btnI=lucky)
-   [EVAL-AD8403SDZ](https://www.google.com/search?q=EVAL-AD8403SDZ&btnI=lucky)
-   [EVAL-ADN2850SDZ](https://www.google.com/search?q=EVAL-ADN2850SDZ&btnI=lucky)
-   PMOD-DPOT

<source trunk/drivers/misc/ad525x_dpot.c:/DEVID/-/Documentation/ c linux-kernel>

#### Description

The ad525x_dpot driver exports a simple sysfs interface. This allows you to
work with the immediate resistance settings as well as update the saved startup
settings. Access to the factory programmed tolerance is also provided, but
interpretation of this settings is required by the end application according to
the specific part in use.

###### Files

Each dpot device will have a set of **eeprom**, **rdac**, and **tolerance** files. How
many depends on the actual part you have, as will the range of allowed values.

The **eeprom** files are used to program the startup value of the device.

The **rdac** files are used to program the immediate value of the device.

The **tolerance** files are the read-only factory programmed tolerance settings
and may vary greatly on a part-by-part basis. For exact interpretation of
this field, please consult the datasheet for your part. This is presented
as a hex file for easier parsing.

Source Code
-----------

#### Status

<table>
<thead>
<tr class="header">
<th>Source</th>
<th>Mainlined?</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><a href="https://www.google.com/search?q=drivers/misc/ad525x_dpot.c&amp;btnI=lucky">git</a></td>
<td><a href="https://www.google.com/search?q=drivers/misc/ad525x_dpot.c&amp;btnI=lucky">Yes</a></td>
</tr>
</tbody>
</table>

#### Files

<table>
<thead>
<tr class="header">
<th>Function</th>
<th>File</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>driver</td>
<td><a href="https://www.google.com/search?q=drivers/misc/ad525x_dpot.c&amp;btnI=lucky">drivers/misc/ad525x_dpot.c</a></td>
</tr>
<tr class="even">
<td>i2c bus support</td>
<td><a href="https://www.google.com/search?q=drivers/misc/ad525x_dpot-i2c.c&amp;btnI=lucky">drivers/misc/ad525x_dpot-i2c.c</a></td>
</tr>
<tr class="odd">
<td>spi bus support</td>
<td><a href="https://www.google.com/search?q=drivers/misc/ad525x_dpot-spi.c&amp;btnI=lucky">drivers/misc/ad525x_dpot-spi.c</a></td>
</tr>
<tr class="even">
<td>include</td>
<td><a href="https://www.google.com/search?q=drivers/misc/ad525x_dpot.h&amp;btnI=lucky">drivers/misc/ad525x_dpot.h</a></td>
</tr>
</tbody>
</table>

Example platform device initialization
--------------------------------------

![](page>software/linux/docs/platform_and_bus_model#Platform Data&noheader&firstseconly&noeditbtn)

#### Example Platform / Board file (I2C Interface)

![](page>software/linux/docs/platform_and_bus_model#Declaring I2C devices&firstseconly&noeditbtn)

``` {.C}
static struct i2c_board_info __initdata bfin_i2c_board_info[] = {
## if defined(CONFIG_AD525X_DPOT) || defined(CONFIG_AD525X_DPOT_MODULE)
    {
        I2C_BOARD_INFO("ad5245", 0x2c),
    },
    {
        I2C_BOARD_INFO("ad5245", 0x2d),
    },
## endif
}
```

#### Example Platform / Board file (SPI Interface)

![](page>software/linux/docs/platform_and_bus_model#Declaring SPI slave devices&firstseconly&noeditbtn)

``` {.C}
static struct spi_board_info bfin_spi_board_info[] __initdata = {
## if defined(CONFIG_AD525X_DPOT) || defined(CONFIG_AD525X_DPOT_MODULE)
    {
        .modalias = "ad5291",
        .max_speed_hz = 5000000,     /* max spi clock (SCK) speed in HZ */
        .bus_num = 0,
        .chip_select = 1,
    },
## endif
};
```

:::{NOTE} <!-- ATTRS: tip="" -->


[**Old Method**]{.underline}

``` {.C}
static struct spi_board_info bfin_spi_board_info[] __initdata = {
## if defined(CONFIG_AD525X_DPOT) || defined(CONFIG_AD525X_DPOT_MODULE)
    {
        .modalias = "ad_dpot",
        .platform_data = "ad5291",
        .max_speed_hz = 5000000,     /* max spi clock (SCK) speed in HZ */
        .bus_num = 0,
        .chip_select = 1,
    },
## endif
};
```


:::


Adding Linux driver support
---------------------------

Configure kernel with "make menuconfig" (alternatively use "make xconfig" or
"make qconfig")

:::{NOTE} <!-- ATTRS: round="" help="" -->

The ad525x_dpot driver depends on **CONFIG_SPI** or **CONFIG_I2C**

:::


    Device Drivers  --->
      [*] Misc devices  --->
        <*>   Analog Devices Digital Potentiometers
        <*>     support I2C bus connection
        <*>     support SPI bus connection

Hardware configuration
----------------------

![PmodDPOT, ADSP-BF537 EZKIZ](/resources/tools-software/linux-drivers/misc/pmoddpot_lr.png){width="600"}

Driver testing
--------------

Locate the device in your sysfs tree. This is probably easiest by going into
the common i2c directory and locating the device by the i2c slave address.

```bash

      # ls /sys/bus/i2c/devices/
      0-0022  0-0027  0-002f

```
So assuming the device in question is on the first i2c bus and has the slave
address of 0x2f, we descend (unrelated sysfs entries have been trimmed).

```bash

      # ls /sys/bus/i2c/devices/0-002f/
      eeprom0 rdac0 tolerance0

```
You can use simple reads/writes to access these files:

```bash

      # cd /sys/bus/i2c/devices/0-002f/

      # cat eeprom0
      0
      # echo 10 > eeprom0
      # cat eeprom0
      10

      # cat rdac0
      5
      # echo 3 > rdac0
      # cat rdac0
      3

```

More Information
----------------
