====== SSM2518 Sound CODEC Linux Driver ======

===== Supported Devices =====

  * [[adi>SSM2518]]

===== Reference Circuits =====

  * [[adi>CN0296]]

===== Evaluation Boards =====

  * [[adi>EVAL-SSM2518Z]]
  * [[digilent>PMOD-AMP3]]

====== Source Code ======

==== Status ====

^ Source ^ Mainlined? ^
| [[git.linux.org>sound/soc/codecs/ssm2518.c|git]] | [[git.linux.org>sound/soc/codecs/ssm2518.c|Yes]] |

==== Files ====

^ Function ^ File ^
| driver  | [[git.linux.org>sound/soc/codecs/ssm2518.c|sound/soc/codecs/ssm2518.c]] |
| include | [[git.linux.org>sound/soc/codecs/ssm2518.h|sound/soc/codecs/ssm2518.h]] |


====== Example device initialization ======

{{page>software/linux/docs/platform_and_bus_model#Platform Data&noheader&firstseconly&noeditbtn}}

{{page>software/linux/docs/platform_and_bus_model#Declaring I2C devices&firstseconly&noeditbtn}}

The I2C address of the SSM2518 depends on the setting of the ADDR pin

^ ADDR ^ I2C Address ^
| 0 | 0x34 |
| 1 | 0x36 |

<code c>
static struct i2c_board_info __initdata bfin_i2c_board_info[] = {

	[--snip--]
	{
		I2C_BOARD_INFO("ssm2518", 0x34),
	},
	[--snip--]
}

</code>

<code c>
static int __init stamp_init(void)
{
	[--snip--]
	i2c_register_board_info(0, bfin_i2c_board_info,
				ARRAY_SIZE(bfin_i2c_board_info));
	[--snip--]

	return 0;
}
arch_initcall(board_init);
</code>

===== Devicetree =====

<code>
i2s: i2c@41600000 {
	compatible = "...;
	...

	#size-cells = <0>;
	#address-cells = <1>;
            
	ssm2518: ssm2518@34 {
		compatible = "adi,ssm2518";
		reg = <0x34>;
		gpios = <&gpio 5 0>;
	};
};
</code>

===== ASoC DAPM Widgets =====

^ Name ^ Description ^
| OUTL | Output for Left Channel |
| OUTR | Output for Right Channel |

===== ALSA Controls =====

^ Name ^ Description ^
| Playback De-emphasis Switch | Enable/Disable de-emphasis |
| Master Playback Volume | DAC Volume Control |
| Master Playback Switch | Unmutes/Mutes the DAC output |
| Amp Low Power Mode Switch | Enables/Disables the lower power mode of the Amplifier | 
| DAC Low Power Mode Switch | Enables/Disables the lower power mode of the DAC |
| DRC Switch | Enable/Disable Dynamic Range Control |
| DRC Limiter Switch | Enable/Disable the DRC Limiter function |
| DRC Compressor Switch | Enable/Disable the DRC Compressor function |
| DRC Expander Switch | Enable/Disable the DRC Expander function |
| DRC Noise Gate Switch | Enable/Disable the DRC Noise Gate function |
| DRC Limiter Threshold Volume | DRC Limiter Threshold Setting. Relative to input |
| DRC Compressor Lower Threshold Volume | DRC Compressor Lower Threshold Setting. Relative to input |
| DRC Expander Upper Threshold Volume | DRC Expander Upper Threshold Setting. Relative to input |
| DRC Noise Gate Threshold Volume | DRC Noise Gate Threshold Setting. Relative to input |
| DRC Upper Output Threshold Volume | DRC Limiter Threshold Setting. Relative to input |
| DRC Lower Output Threshold Volume | DRC Minimum Output Signal Amplitude Setting. This is the minimum output level produced by the DRC and is used to indicate the expander lower threshold, or output signal level when the input rises beyond the noise gate threshold |
| DRC Post Volume | Post-DRC Gain Adjust Setting. This can be used to add additional gain after the DRC function to compensate for the overall reduction of system gain due to the DRC |
| DRC Peak Detector Attack Time | DRC Peak Detector Attack Time |
| DRC Peak Detector Release Time | DRC Peak Detector Release Time |
| DRC Attack Time | DRC Attack Time. Used to smooth the gain curve at the thresholds (knees) of each DRC function |
| DRC Decay Time | DRC Decay Time. Used to smooth the gain curve at the thresholds (knees) of each DRC function |
| DRC Hold Time | DRC Normal Operation Hold Time. Used to prevent the gain curve calculation from increasing too quickly |
| DRC Noise Gate Hold Time | DRC Noise Gate Hold Time. Used to prevent the DRC from entering noise gate too quickly 
| DRC RMS Averaging Time | DRC RMS Detector Averaging Time. This is the averaging time for the rms level that is compared to the DRC thresholds |
===== DAI configuration =====

The codec driver registers one DAI named **"ssm2518-hifi"**.

==== Supported DAI formats ====

^ Name ^ Supported by driver ^ Description ^
| SND_SOC_DAIFMT_I2S     | yes | I2S mode |
| SND_SOC_DAIFMT_RIGHT_J | yes | Right Justified mode |
| SND_SOC_DAIFMT_LEFT_J  | yes | Left Justified mode  |
| SND_SOC_DAIFMT_DSP_A   | yes | data MSB after FRM LRC |
| SND_SOC_DAIFMT_DSP_B   | yes | data MSB during FRM LRC  |
| SND_SOC_DAIFMT_AC97    | no  | AC97 mode |
| SND_SOC_DAIFMT_PDM     | no  | Pulse density modulation |
| | |
| SND_SOC_DAIFMT_NB_NF | yes  | Normal bit- and frameclock |
| SND_SOC_DAIFMT_NB_IF | yes | Normal bitclock, inverted frameclock |
| SND_SOC_DAIFMT_IB_NF | yes | Inverted frameclock, normal bitclock |
| SND_SOC_DAIFMT_IB_IF | yes | Inverted bit- and frameclock |
| | |
| SND_SOC_DAIFMT_CBM_CFM | no  | Codec bit- and frameclock master |
| SND_SOC_DAIFMT_CBS_CFM | no  | Codec bitclock slave, frameclock master |
| SND_SOC_DAIFMT_CBM_CFS | no  | Codec bitclock master, frameclock slave |
| SND_SOC_DAIFMT_CBS_CFS | yes | Codec bit- and frameclock slave |

==== Supported SYSCLK rates ====

The CODECs system clock can be configured for various input rates. When configuring the codec system clock use SSM2518_SYSCLK for the clock id.

The following list contains the supported system clock rates and their resulting sample-rates.
^ SYSCLK ^ Supported sample-rates ^
| 2048000, 4096000, 8192000, 8192000, 3200000, 6400000, 12800000 | 8kHz, 16kHz, 32kHz |
| 2822000, 5644800, 11289600, 16934400, 22579200, 33868800, 4410000, 8820000, 17640000 | 11.025kHz, 22.05kHz, 44.1kHz |
| 3072000, 6144000, 38864000, 4800000, 9600000, 19200000 | 12kHz, 24kHz, 48kHz, 96kHz |
| 12288000, 16384000, 24576000 | 8kHz, 12kHz, 16kHz, 24kHz, 32kHz, 48kHz, 96kHz |

==== SYSCLK configuration ====

To configure the devices sysclk the ''snd_soc_codec_set_sysclk()'' function can be used. It needs to be called at least once before playback starts. The ''clk_id'' parameter must always be ''SSM2518_SYSCLK'' and the ''dir'' parameter must always be ''SND_SOC_CLOCK_IN''. The ''freq'' can be set to any of the frequencies above. The system clock can either be taken from the external MCLK or the BCLK. In case the system clock is taken from the BCLK the BCLK needs to be applied to the MCLK pin and the BLCK can be left unconnected. To use the MCLK as the system clock source the ''source'' parameter should to be set to ''SSM2518_SYSCLK_SRC_MCLK'', to use the BCLK it should be set to ''SSM2518_SYSCLK_SRC_BCLK''

<code c>
#define SSM2518_SYSCLK 0 

enum ssm2518_sysclk_src {
    SSM2518_SYSCLK_SRC_MCLK = 0,
    SSM2518_SYSCLK_SRC_BCLK = 1,
};
</code>

<note important>Starting with Kernel v4.18 ''snd_soc_codec_set_sysclk'' interface was removed. Instead ''snd_soc_component_set_sysclk'' should be used</note>

==== TDM configuration ====

If you want to use the SSM2518 in TDM mode you can configure it using snd_soc_dai_set_tdm_slot() from you ASoC board driver.

The following restrictions apply to the parameters of snd_soc_dai_set_tdm_slot().

  * **tx_mask** must have exactly two bits set. The most upper bit will be the slot of right channel, the most lower bit will be the slot left channel. E.g. 0x3 means the left channel will be at slot 0 and the right channel will be at slot 1 in the TDM stream.
  * **rx_mask** must be 0. 
  * **slots** must be either 1, 2, 4, 8 or 16
  * **width** must be either 16, 24, 32

Example:
<code c>
static int ssm2518_link_init(struct snd_soc_pcm_runtime *rtd)
{
    int ret;

    ret = snd_soc_dai_set_tdm_slot(rtd->codec_dai, 0x0c, 0x00, 8, 32);
    if (ret < 0)
        return ret;

    return 0;
}

static struct snd_soc_dai_link ssm2518_dai_link = {
    ...,
    .init = ssm2518_link_init,
};
</code>
==== Example DAI configuration ====

<code c>
#include "../codecs/ssm2518.h"

static int pmod_amp3_init(struct snd_soc_pcm_runtime *rtd)
{
    return snd_soc_codec_set_sysclk(rtd->codec, SSM2518_SYSCLK,
                SSM2518_SYSCLK_SRC_MCLK, 12288000, SND_SOC_CLOCK_IN);
}

static const struct snd_soc_dapm_widget pmod_amp3_widgets[] = {
    SND_SOC_DAPM_SPK("Speaker Out", NULL),
};

static const struct snd_soc_dapm_route pmod_amp3_routes[] = {
    { "Speaker Out", NULL, "OUTL" },
    { "Speaker Out", NULL, "OUTR" },
};

static struct snd_soc_dai_link pmod_amp3_dai_link = {
    .name = "ssm2518",
    .stream_name = "ssm2518",
    .codec_dai_name = "ssm2518-hifi",
    .dai_fmt = SND_SOC_DAIFMT_I2S |
            SND_SOC_DAIFMT_NB_NF |
            SND_SOC_DAIFMT_CBS_CFS,
    .init = pmod_amp3_init,
};

static struct snd_soc_card pmod_amp3_card = {
    .name = "PMOD AMP3 SSM2518",
    .owner = THIS_MODULE,
    .dai_link = &pmod_amp3_dai_link,
    .num_links = 1,
    .dapm_widgets = pmod_amp3_widgets,
    .num_dapm_widgets = ARRAY_SIZE(pmod_amp3_widgets),
    .dapm_routes = pmod_amp3_routes,
    .num_dapm_routes = ARRAY_SIZE(pmod_amp3_routes),
    .fully_routed = true,
};
</code>

===== More information =====

{{page>resources/tools-software/linux-drivers/need_help#need help&noheader&firstseconly&noeditbtn}}