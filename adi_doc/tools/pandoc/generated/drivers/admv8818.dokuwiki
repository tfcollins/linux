====== ADMV8818 2GHz to 18GHz, Digitally Tunable High-Pass and Low-PASS Filter Linux Driver ======

===== Supported Devices =====

  * [[adi>ADMV8818]]

===== Supported Boards =====                                                                                                                                                                  
This driver supports the\\                                                                                                                                                                    
  * [[adi>EVAL-ADMV8818]]

===== Description =====

The ADMV8818-EP is a fully monolithic microwave integrated circuit (MMIC) that features a digitally selectable frequency of operation. The device features four independently controlled high-pass filters (HPFs) and four independently controlled low-pass filters (LPFs) that span the 2 GHz to 18 GHz frequency range.

The flexible architecture of the ADMV8818-EP allows the 3 dB cutoff frequency (f3dB) of the high-pass and low-pass filters to be controlled independently to generate up to 4 GHz of bandwidth. The digital logic control on each filter is 4 bits wide (16 states) and controls the on-chip reactive elements to adjust the f3dB. The typical insertion loss is 9 dB, and the wideband rejection is 35 dB, which is ideally suited for minimizing system harmonics.

This tunable filter can be used as a smaller alternative to large switched filter banks and cavity tuned filters, and this device provides a dynamically adjustable solution in advanced communications applications.

====== Source Code ======

===== Status =====

^  Source  ^  Mainlined?  ^
| [[linux.github>master?drivers/iio/filter/admv8818.c | drivers/iio/filter/admv8818.c ]] | [[git.linux.org>drivers/iio/filter/admv8818.c |YES]] |

===== Files =====

^ Function ^ File ^
| driver  | [[linux.github>master?drivers/iio/filter/admv8818.c | drivers/iio/filter/admv8818.c]] |
| Documentation | [[linux.github>master?Documentation/devicetree/bindings/iio/filter/adi,admv8818.yaml | adi,admv8818.yaml]] |
| ABI documentation| [[linux.github>master?Documentation/ABI/testing/sysfs-bus-iio-filter-admv8818 | sysfs-bus-iio-filter-admv8818]] |

Example device tree

^ Function ^ File ^
| dts  | [[linux.github>rpi-5.10.y?arch/arm/boot/dts/overlays/rpi-admv8818-overlay.dts | rpi-admv8818-overlay.dts]] |

====== Example platform device initialization ======

The ADF4371 driver is a SPI bus driver and can be instantiated via device tree.

**Required properties:**
  * **compatible**: Should always be one of these:
    * "adi,admv8818"
  * **reg**: SPI chip select number.
  * **clocks**: a list of phandle, one for each entry in clock-names.
  * **clock-names**: Must include the following entry: "rf_in"

**Optional properties:**
  * **clock-scales**: The Common Clock Framework max rate is limited by MAX of unsigned long. For ADF4371/ADF4372 devices this is a deficiency. If specified, this property allows arbitrary scales. The first element in the array should be the multiplier and the second element should be the divider.
  * **adi,bw-hz:**: Allows the user to increase the Bandpass Filter (BPF) bandwidth in Hz. Normally when invoked by the clk notifier, the driver sets the HPF cutoff close below the frequency and the LPF cutoff close above the frequency, and thus creating a BPF.

<code>
Example:

    spi {
      #address-cells = <1>;
      #size-cells = <0>;
      admv8818@0 {
        compatible = "adi,admv8818";
        reg = <0>;
        spi-max-frequency = <10000000>;
        clocks = <&admv8818_rfin>;
        clock-scales = <1 5>;
        clock-names = "rf_in";
        adi,bw-hz = /bits/ 64 <600000000>;
      };
    };
</code>

====== Enabling Linux driver support ======

Configure kernel with "make menuconfig" (alternatively use "make xconfig" or
"make qconfig")

<WRAP round help>
The ADMV8818 driver depends on **SPI** and selects **REGMAP_SPI**
</WRAP>

====== Adding Linux driver support ======

Configure kernel with "make menuconfig" (alternatively use "make xconfig" or
"make qconfig")

<code>
Linux Kernel Configuration
	Device Drivers  --->
	<*>     Industrial I/O support --->
	    --- Industrial I/O support
	             Filters --->
                             <*> Analog Devices ADMV8818 High-Pass and Low-Pass Filter
</code>

====== Hardware configuration ======

====== Driver testing ======

{{page>software:linux:docs:iio:iio_snippets#iio device files&noheader&firstseconly&noeditbtn}}

<WRAP box bggreen><wrap info>This specifies any shell prompt running on the target</wrap>
<xterm>
analog:/sys/bus/iio/devices/iio:device0# **cd /sys/bus/iio/devices/**
root@analog:/sys/bus/iio/devices# **ls**
iio:device0
root@analog:/sys/bus/iio/devices#

root@analog:/sys/bus/iio/devices# **cd iio\:device0**
root@analog:/sys/bus/iio/devices/iio:device0# ls -l
total 0
-r--r--r-- 1 root root 4096 Mar 24 08:38 dev
-r--r--r-- 1 root root 4096 Mar 24 08:38 name
lrwxrwxrwx 1 root root    0 Mar 24 08:38 of_node -> ../../../../../../../../firmware/devicetree/base/soc/spi@7e204000/admv8818@0
-rw-r--r-- 1 root root 4096 Mar 24 08:38 out_altvoltage0_filter_band_pass_bandwidth_3db_frequency
-rw-r--r-- 1 root root 4096 Mar 24 08:38 out_altvoltage0_filter_band_pass_center_frequency
-rw-r--r-- 1 root root 4096 Mar 24 08:38 out_altvoltage0_filter_high_pass_3db_frequency
-rw-r--r-- 1 root root 4096 Mar 24 08:38 out_altvoltage0_filter_low_pass_3db_frequency
-rw-r--r-- 1 root root 4096 Mar 24 08:38 out_altvoltage0_mode
-r--r--r-- 1 root root 4096 Mar 24 08:38 out_altvoltage0_mode_available
-rw-r--r-- 1 root root 4096 Mar 24 08:38 out_altvoltage0_scale
drwxr-xr-x 2 root root    0 Mar 24 08:38 power
lrwxrwxrwx 1 root root    0 Mar 24 08:38 subsystem -> ../../../../../../../../bus/iio
-rw-r--r-- 1 root root 4096 Mar 24 08:38 uevent
root@analog:/sys/bus/iio/devices/iio:device0#
</xterm></WRAP>

===== Show device name =====

<WRAP box bggreen><wrap info>This specifies any shell prompt running on the target</wrap>
<xterm>
root@analog:/sys/bus/iio/devices/iio:device0# **cat name**
**admv8818**
</xterm></WRAP>

===== Read channel bandwidth frequency =====

<WRAP box bggreen><wrap info>This specifies any shell prompt running on the target</wrap>
<xterm>
root@analog:/sys/bus/iio/devices/iio:device0# **cat out_altvoltage0_filter_band_pass_bandwidth_3db_frequency**
**750**
</xterm></WRAP>

===== Set channel bandwidth frequency =====

<WRAP box bggreen><wrap info>This specifies any shell prompt running on the target</wrap>
<xterm>
root@analog:/sys/bus/iio/devices/iio:device0# **echo 500 > out_altvoltage0_filter_band_pass_bandwidth_3db_frequency**
root@analog:/sys/bus/iio/devices/iio:device0# **cat out_altvoltage0_filter_band_pass_bandwidth_3db_frequency**
**734**
</xterm></WRAP>

===== Read channel center frequency =====

<WRAP box bggreen><wrap info>This specifies any shell prompt running on the target</wrap>
<xterm>
root@analog:/sys/bus/iio/devices/iio:device0# **cat out_altvoltage0_filter_band_pass_center_frequency**
**5055**
</xterm></WRAP>

===== Set channel center frequency =====

<WRAP box bggreen><wrap info>This specifies any shell prompt running on the target</wrap>
<xterm>
root@analog:/sys/bus/iio/devices/iio:device0# **echo 4000 > out_altvoltage0_filter_band_pass_bandwidth_3db_frequency**
root@analog:/sys/bus/iio/devices/iio:device0# **cat out_altvoltage0_filter_band_pass_center_frequency**
**4023**
</xterm></WRAP>

===== Read low pass 3db frequency =====

<WRAP box bggreen><wrap info>This specifies any shell prompt running on the target</wrap>
<xterm>
root@analog:/sys/bus/iio/devices/iio:device0# **cat out_altvoltage0_filter_low_pass_3db_frequency**
**5430**
</xterm></WRAP>

===== Set channel low pass 3db frequency =====

<WRAP box bggreen><wrap info>This specifies any shell prompt running on the target</wrap>
<xterm>
root@analog:/sys/bus/iio/devices/iio:device0# **echo 8000 > out_altvoltage0_filter_low_pass_3db_frequency**
root@analog:/sys/bus/iio/devices/iio:device0# **cat out_altvoltage0_filter_low_pass_3db_frequency**
**8200**
</xterm></WRAP>

===== Read high pass 3db frequency =====

<WRAP box bggreen><wrap info>This specifies any shell prompt running on the target</wrap>
<xterm>
root@analog:/sys/bus/iio/devices/iio:device0# **cat out_altvoltage0_filter_high_pass_3db_frequency**
**4680**
</xterm></WRAP>

===== Set channel high pass 3db frequency =====

<WRAP box bggreen><wrap info>This specifies any shell prompt running on the target</wrap>
<xterm>
root@analog:/sys/bus/iio/devices/iio:device0# **echo 6000 > out_altvoltage0_filter_high_pass_3db_frequency**
root@analog:/sys/bus/iio/devices/iio:device0# **cat out_altvoltage0_filter_high_pass_3db_frequency**
**5960**
</xterm></WRAP>

===== Read scale =====

<WRAP box bggreen><wrap info>This specifies any shell prompt running on the target</wrap>
<xterm>
root@analog:/sys/bus/iio/devices/iio:device0# **cat out_altvoltage0_scale**
**1000000**
</xterm></WRAP>

===== Set channel scale =====

<WRAP box bggreen><wrap info>This specifies any shell prompt running on the target</wrap>
<xterm>
root@analog:/sys/bus/iio/devices/iio:device0# **echo 10000000 > out_altvoltage0_scale**
root@analog:/sys/bus/iio/devices/iio:device0# **cat out_altvoltage0_scale**
**10000000**
</xterm></WRAP>

===== Filter mode =====

The mode allows the user to access enable/disable/register/unregister the clock rate notifier. Valid values that can be written:

<WRAP box bggreen><wrap info>This specifies any shell prompt running on the target</wrap>
<xterm>
root@analog:/sys/bus/iio/devices/iio:device0# **cat out_altvoltage0_mode_available**
auto manual bypass
root@analog:/sys/bus/iio/devices/iio:device0# **cat out_altvoltage0_mode**
auto
root@analog:/sys/bus/iio/devices/iio:device0# **echo bypass > out_altvoltage0_mode**
root@analog:/sys/bus/iio/devices/iio:device0# **cat out_altvoltage0_mode**
bypass
</xterm></WRAP>
====== More Information ======

{{page>software:linux:docs:iio:iio_snippets#iio pointers&noheader&firstseconly&noeditbtn}}
