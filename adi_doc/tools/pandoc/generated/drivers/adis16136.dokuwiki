====== ADIS16136 IIO Inertial Measurement Unit Linux Driver ======

===== Supported Devices =====

  * [[adi>ADIS16133]]
  * [[adi>ADIS16135]]
  * [[adi>ADIS16136]]
  * [[adi>ADIS16137]] (Linux v4.3+)
===== Evaluation Boards =====

  * [[adi>EVAL-ADIS16IMU1|ADIS16IMU1/PCBZ]]

===== Description =====

This is a Linux industrial I/O ([[software:linux:docs:iio:iio|IIO]]) subsystem driver, targeting serial interface Inertial Measurement Units (IMU).
The industrial I/O subsystem provides a unified framework for drivers for many different types of converters and sensors using a number of different physical interfaces (i2c, spi, etc).
See [[software:linux:docs:iio:iio|IIO]] for more information.

====== Source Code ======

===== Status =====

^ Source ^ Mainlined? ^
| [[git.linux.org>drivers/iio/gyro/adis16136.c|git]] | [[git.linux.org>drivers/iio/gyro/adis16136.c|Yes]] |

===== Files =====

^ Function ^ File ^
| driver | [[git.linux.org>drivers/iio/gyro/adis16136.c]] |

{{page>software/linux/docs/platform_and_bus_model#Declaring SPI slave devices&firstseconly&noeditbtn}}

Depending on the converter IC used, you may need to set the modalias accordingly, matching your part name.
It may also required to adjust max_speed_hz. Please consult the datasheet, for maximum spi clock supported by the device in question.

<code c>
static struct spi_board_info board_spi_board_info[] __initdata = {
	{
		.modalias = "adis16136",
		.max_speed_hz = 2000000,     /* max spi clock (SCK) speed in HZ */
		.bus_num = 0,
		.chip_select = 1, /* CS, change it for your board */
		.mode = SPI_MODE_3,
		.irq = IRQ_PF5,
	},
};
</code>

<code c>
static int __init board_init(void)
{
	[--snip--]

	spi_register_board_info(board_spi_board_info, ARRAY_SIZE(board_spi_board_info));

	[--snip--]

	return 0;
}
arch_initcall(board_init);
</code>

====== Adding Linux driver support ======

Configure kernel with "make menuconfig" (alternatively use "make xconfig" or
"make qconfig")

<WRAP round help>
The ADIS16136 driver depends on **CONFIG_SPI_MASTER**
</WRAP>

<code>
Linux Kernel Configuration
    Device Drivers  --->
        ...
        <*>     Industrial I/O support --->
            --- Industrial I/O support
            ...
            Digital gyroscope sensors  ---> 
                ...
                <*>  Analog devices ADIS16136 and similar gyroscopes driver
                ...
            ...
        ...
</code>

====== Hardware configuration ======


====== Driver testing ======

{{page>software:linux:docs:iio:iio_snippets#iio device files&noheader&firstseconly&noeditbtn}}

<WRAP box bggreen><wrap info>This specifies any shell prompt running on the target</wrap>
<xterm>
root:/> **cd /sys/bus/iio/devices/**
root:/sys/bus/iio/devices> **ls**
iio:device0  trigger0

root:/sys/bus/iio/devices> **cd iio:device0**
root:/sys/devices/platform/bfin-spi.0/spi0.1/iio:device0> **ls -l**
drwxr-xr-x    2 root     root             0 Jan  1 01:03 buffer
-r--r--r--    1 root     root          4096 Jan  1 01:03 dev
-rw-r--r--    1 root     root          4096 Jan  1 01:03 in_anglvel_scale
-rw-r--r--    1 root     root          4096 Jan  1 01:03 in_anglvel_x_calibbias
-rw-r--r--    1 root     root          4096 Jan  1 01:03 in_anglvel_x_filter_low_pass_3db_frequency
-rw-r--r--    1 root     root          4096 Jan  1 01:03 in_anglvel_x_raw
-rw-r--r--    1 root     root          4096 Jan  1 01:03 in_temp0_offset
-rw-r--r--    1 root     root          4096 Jan  1 01:03 in_temp0_raw
-rw-r--r--    1 root     root          4096 Jan  1 01:03 in_temp0_scale
-r--r--r--    1 root     root          4096 Jan  1 01:03 name
drwxr-xr-x    2 root     root             0 Jan  1 01:03 power
-rw-r--r--    1 root     root          4096 Jan  1 01:03 sampling_frequency
drwxr-xr-x    2 root     root             0 Jan  1 01:03 scan_elements
lrwxrwxrwx    1 root     root             0 Jan  1 01:03 subsystem -> ../../../../../../../bus/iio
drwxr-xr-x    2 root     root             0 Jan  1 01:03 trigger
-rw-r--r--    1 root     root          4096 Jan  1 01:03 uevent
root:/sys/devices/platform/bfin-spi.0/spi0.1/iio:device0>
</xterm></WRAP>

===== ADIS16136 device attributes =====

For a detailed description please see:
[[git.linux.org>Documentation/ABI/testing/sysfs-bus-iio]]

^ Gyroscope related device files ^ Description ^
| in_anglvel_filter_low_pass_3db_frequency | Bandwidth for the gyroscope channel. |
| in_anglvel_scale | Scale for the gyroscope channels. |
| in_anglvel_x_calibbias | Calibration offset for the gyroscope channel. |
| in_anglvel_x_raw | Raw gyroscope channel value. |
^ Temperature sensor related files ^ Description ^
| in_temp0_offset | Offset for temperature sensor channel. |
| in_temp0_raw | Raw temperature channel value. |
| in_temp0_scale | Scale for the temperature sensor channel. |
^ Miscellaneous device files ^ Description ^
| name | Name of the IIO device. |
| sampling_frequency | Currently selected sample rate. |

==== Show device name ====

The ''name'' file contains the name of the device. This will match the product id. E.g. ''adis16136'' for the adis16136.

<WRAP box bggreen><wrap info>This specifies any shell prompt running on the target</wrap>
<xterm>
root:/sys/devices/platform/bfin-spi.0/spi0.1/iio:device0> **cat name**
adis16136
</xterm></WRAP>

==== Set sampling frequency ====

The sampling frequency of the device can be set by writing the desired value to the ''sampling_frequency'' file. The driver will automatically round up to the nearest supported sampling frequency.

**Example:**
<WRAP box bggreen><wrap info>This specifies any shell prompt running on the target</wrap>
<xterm>
root:/sys/devices/platform/bfin-spi.0/spi0.1/iio:device0> **cat sampling_frequency**
1024
root:/sys/devices/platform/bfin-spi.0/spi0.1/iio:device0> **echo 500 > sampling_frequency**
root:/sys/devices/platform/bfin-spi.0/spi0.1/iio:device0> **cat sampling_frequency**
504
</xterm></WRAP>

==== Show channel value ====

A channel value can be read from its ''_raw'' attribute. The value returned by the ''_raw'' attribute is the raw value as reported by the device. To get the processed value of the channel in a standardized unit add the channels ''_offset'' attribute to the ''_raw'' value and multiply the result by ''_scale'' attribute. If no ''_offset'' attribute is present assume 0 for the offset.

''processed value = (raw + offset) * scale''

The units by the IIO framework are:
  * Angular velocity: Rad per second
  * Temperature: milli-degree Celsius

**Example:**
<WRAP box bggreen><wrap info>This specifies any shell prompt running on the target</wrap>
<xterm>
root:/sys/devices/platform/bfin-spi.0/spi0.1/iio:device0> **cat in_anglvel_x_raw**
898102272
root:/sys/devices/platform/bfin-spi.0/spi0.1/iio:device0> **cat in_anglvel_scale**
0.000000278
</xterm></WRAP>

''Z-axis acceleration = in_anglvel_x_raw * in_anglvel_scale = TBD = TBD rad per second''

==== Set channel bandwidth ====

The channel bandwidth can be set by writing the desired value to the channels ''in_anglvel_filter_low_pass_3db_frequency'' attribute. The driver will automatically round up to the nearest supported bandwidth.

Note that the low pass filter frequency depends on the sampling frequency, so changing the sampling frequency will scale the low pass filter frequency accordingly. E.g. reducing the sampling frequency by a factor of two will also reduce the bandwidth by a factor of two.

**Example:**
<WRAP box bggreen><wrap info>This specifies any shell prompt running on the target</wrap>
<xterm>
root:/sys/devices/platform/bfin-spi.0/spi0.1/iio:device0> **cat in_anglvel_filter_low_pass_3db_frequency**
512
root:/sys/devices/platform/bfin-spi.0/spi0.1/iio:device0> **echo 10 > in_anglvel_filter_low_pass_3db_frequency**
root:/sys/devices/platform/bfin-spi.0/spi0.1/iio:device0> **cat in_anglvel_filter_low_pass_3db_frequency**
10
</xterm></WRAP>
===== Trigger management =====

<WRAP round help>
This driver only supports it's own default trigger source **adis16136-dev0**
</WRAP>

<WRAP box bggreen><wrap info>This specifies any shell prompt running on the target</wrap>
<xterm>
root:/sys/devices/platform/bfin-spi.0/spi0.1/iio:device0> **cat trigger/current_trigger**
adis16136-dev0
</xterm></WRAP>

<WRAP round help>For the adis16133 and adis16135 the trigger will be called adis16133-dev0 and adis16135-dev0 respectively.</WRAP>
===== Buffer management =====

<WRAP box bggreen><wrap info>This specifies any shell prompt running on the target</wrap>
<xterm>
root:/sys/devices/platform/bfin-spi.0/spi0.1/iio:device0/buffer> **ls**
**enable**           **length**
</xterm></WRAP>

{{page>software:linux:docs:iio:iio_snippets#Buffer management&noheader&firstseconly&noeditbtn}}

<WRAP box bggreen><wrap info>This specifies any shell prompt running on the target</wrap>
<xterm>
root:/sys/devices/platform/bfin-spi.0/spi0.1/iio:device0/scan_elements> **ls**
in_anglvel_x_en     in_temp0_en         in_timestamp_en
in_anglvel_x_index  in_temp0_index      in_timestamp_index
in_anglvel_x_type   in_temp0_type       in_timestamp_type
root:/sys/devices/platform/bfin-spi.0/spi0.1/iio:device0/scan_elements>
</xterm></WRAP>

{{page>software:linux:docs:iio:iio_snippets#Typical ADC scan elements&noheader&firstseconly&noeditbtn}}

====== More Information ======

{{page>software:linux:docs:iio:iio_snippets#iio pointers&noheader&firstseconly&noeditbtn}}

===== IMU Evaluation Board User Guides =====

  * [[:resources:eval:user-guides:inertial-mems:gyroscopes:adis1613x|ADIS1613x Evaluation on the EVAL-ADIS]]