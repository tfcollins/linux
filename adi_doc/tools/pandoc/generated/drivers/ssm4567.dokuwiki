====== SSM4567 Audio Amplifier Linux Driver ======

===== Supported Devices =====

  * [[adi>SSM4567]]

===== Evaluation Boards =====

  * [[adi>EVAL-SSM4567Z]]
====== Source Code ======

==== Status ====

^ Source ^ Mainlined? ^
| [[linux.github>ssm4329?sound/soc/codecs/ssm4567.c|git]] | [[git.linux.org>sound/soc/codecs/ssm4567.c|yes]] |

==== Files ====

^ Function ^ File ^
| driver  | [[linux.github>asoc-ssm4329?sound/soc/codecs/ssm4567.c|sound/soc/codecs/ssm4567.c]] |
| include | [[linux.github>asoc-ssm4329?sound/soc/codecs/ssm4567.h|sound/soc/codecs/ssm4567.h]] |


====== Example device initialization ======

{{page>software/linux/docs/platform_and_bus_model#Platform Data&noheader&firstseconly&noeditbtn}}

{{page>software/linux/docs/platform_and_bus_model#Declaring I2C devices&firstseconly&noeditbtn}}

The I2C address of the SSM4567 depends on the setting of the ADDR pin.

^ ADDR ^ I2C Address ^
| 0 | 0x34 |
| 1 | 0x35 |

<code c>
static struct i2c_board_info __initdata bfin_i2c_board_info[] = {

	[--snip--]
	{
		I2C_BOARD_INFO("ssm4567", 0x34),
	},
	[--snip--]
}

</code>

<code c>
static int __init stamp_init(void)
{
	[--snip--]
	i2c_register_board_info(0, bfin_i2c_board_info,
				ARRAY_SIZE(bfin_i2c_board_info));
	[--snip--]

	return 0;
}
arch_initcall(board_init);
</code>

===== Devicetree =====

<code>
i2s: i2c@41600000 {
	compatible = "...;
	...

	#size-cells = <0>;
	#address-cells = <1>;
            
	ssm4567: ssm4567@34 {
		compatible = "adi,ssm4567";
		reg = <0x34>;
	};
};
</code>

===== ASoC DAPM Widgets =====

^ Name ^ Description ^
| OUT | Class-D Amplifier Output |

===== ALSA Controls =====

^ Name ^ Description ^
| DAC High Pass Filter Switch | Enables/Disables the high-pass filter for the DAC | 
| DAC Low Power Switch | Enables/Disables low-power mode of the DAC |
| Master Playback Volume | Digital output volume control.  |
| Low-EMI Switch | Enables/Disables low EMI mode. |
| Limiter Mode | Mode the output limiter is using. |
| Limiter Attack Rate | Attack rate of the output limiter. |
| Limiter Release Rate | Release rate of the output limiter. |
| Limiter Attack Threshold | Attack threshold for the output limiter.  |
| Amplifier Boost Switch | Enables/Disables the output amplifier booster |



===== DAI configuration =====

The amplifier driver registers one DAIs, one for each serial port. The DAI is named **"ssm4567-hifi"**

==== Supported DAI formats ====

^ Name ^ Supported by driver ^ Description ^
| SND_SOC_DAIFMT_I2S     | yes | I2S mode |
| SND_SOC_DAIFMT_RIGHT_J | no  | Right Justified mode |
| SND_SOC_DAIFMT_LEFT_J  | yes | Left Justified mode  |
| SND_SOC_DAIFMT_DSP_A   | yes | data MSB after FRM LRC |
| SND_SOC_DAIFMT_DSP_B   | yes | data MSB during FRM LRC  |
| SND_SOC_DAIFMT_AC97    | no  | AC97 mode |
| SND_SOC_DAIFMT_PDM     | yes | Pulse density modulation |
| | |
| SND_SOC_DAIFMT_NB_NF | yes  | Normal bit- and frameclock |
| SND_SOC_DAIFMT_NB_IF | yes | Normal bitclock, inverted frameclock |
| SND_SOC_DAIFMT_IB_NF | yes | Inverted frameclock, normal bitclock |
| SND_SOC_DAIFMT_IB_IF | yes | Inverted bit- and frameclock |
| | |
| SND_SOC_DAIFMT_CBM_CFM | no  | Codec bit- and frameclock master |
| SND_SOC_DAIFMT_CBS_CFM | no  | Codec bitclock slave, frameclock master |
| SND_SOC_DAIFMT_CBM_CFS | no  | Codec bitclock master, frameclock slave |
| SND_SOC_DAIFMT_CBS_CFS | yes | Codec bit- and frameclock slave |

==== TDM configuration ====

If you want to use the SSM4567 in TDM mode you can configure it using snd_soc_dai_set_tdm_slot() from you ASoC board driver.

The following restrictions apply to the parameters of snd_soc_dai_set_tdm_slot().

  * **tx_mask** specifies the output channel mapping for the serial port. This must either be 0, or the same as rx_mask.
  * **rx_mask** specifies the input channel mapping for the serial port. There must be exactly one bit set in this mask which selects the slot that is used.
  * **slots** should be between 1 and 8
  * **width** must be either 32, 48, 64

Example:
<code c>
static int ssm4567_link_init(struct snd_soc_pcm_runtime *rtd)
{
    int ret;

    ret = snd_soc_dai_set_tdm_slot(rtd->codec_dai, 0x01, 0x01, 8, 32);
    if (ret < 0)
        return ret;

    return 0;
}

static struct snd_soc_dai_link ssm4567_dai_link = {
    ...,
    .init = ssm4567_link_init,
};
</code>
==== Example DAI configuration ====

<code c>
static const struct snd_soc_dapm_widget ssm4567_zed_widgets[] = {
	SND_SOC_DAPM_SPK("Speaker", NULL),
};

static const struct snd_soc_dapm_route ssm4567_zed_routes[] = {
	{ "Speaker", NULL, "OUT" },
};

static struct snd_soc_dai_link ssm4567_zed_dai_link = {
    .name = "ssm4567",
    .stream_name = "ssm4567",
    .codec_dai_name = "ssm4567-hifi",
    .dai_fmt = SND_SOC_DAIFMT_DSP_A |
            SND_SOC_DAIFMT_NB_NF |
            SND_SOC_DAIFMT_CBS_CFS,
    .init = ssm4567_zed_init,
};

static struct snd_soc_card ssm4567_zed_card = {
    .name = "ZED SSM4567",
    .owner = THIS_MODULE,
    .dai_link = &zed_ssm4567_dai_link,
    .num_links = 1,
    .dapm_widgets = zed_ssm4567_widgets,
    .num_dapm_widgets = ARRAY_SIZE(zed_ssm4567_widgets),
    .dapm_routes = zed_ssm4567_routes,
    .num_dapm_routes = ARRAY_SIZE(zed_ssm4567_routes),
    .fully_routed = true,
};
</code>

==== Multi SSM4567 Example configuration ====

This example shows how to setup a ASoC board driver for a system with two SSM4567, one driving the left speaker and the other driving the right speaker. In this example the left SSM4567 is at I2C address 0x34 (ADDR=0) and the right SSM4567 is at I2S address 0x35 (ADDR=1).

Note support for multiple CODECs on a single DAI link requires Linux v3.17 or higher.

<code c>
static int ssm4567_link_init(struct snd_soc_pcm_runtime *rtd)
{
	int ret;

	/* Slot 0 for left */
	ret = snd_soc_dai_set_tdm_slot(rtd->codec_dais[0], 0x01, 0x01, 2, 32);
	if (ret < 0)
		return ret;

	/* Slot 2 for right */
	ret = snd_soc_dai_set_tdm_slot(rtd->codec_dais[1], 0x02, 0x02, 2, 32);
	if (ret < 0)
		return ret;

	return 0;
}

static const struct snd_soc_dapm_widget ssm4567_zed_widgets[] = {
	SND_SOC_DAPM_SPK("Left Speaker", NULL),
	SND_SOC_DAPM_SPK("Right Speaker", NULL),
};

static const struct snd_soc_dapm_route ssm4567_zed_routes[] = {
	{ "Left Speaker", NULL, "Left OUT" },
	{ "Right Speaker", NULL, "Right OUT" },
};

static const snd_soc_dai_link_component ssm4567_zed_codec_components[] = {
	{ /* Left */
		.name = "ssm4567.0-0034",
		.codec_dai_name = "ssm4567-hifi",
	},
	{ /* Right */
		.name = "ssm4567.0-0035",
		.codec_dai_name = "ssm4567-hifi",
	},

};

/* Assign prefix to avoid name conflicts */
static const struct snd_soc_codec_conf ssm4567_zed_codec_conf[] = {
	{
		.dev_name = "ssm4567.0-0034",
		.name_prefix = "Left",
	},
	{
		.dev_name = "ssm4567.0-0035",
		.name_prefix = "Right",
	},
};

static struct snd_soc_dai_link ssm4567_zed_dai_link = {
	.name = "ssm4567",
	.stream_name = "ssm4567",

	.codecs = ssm4567_zed_codec_components,
	.num_codecs = ARRAY_SIZE(ssm4567_zed_codec_components),
	.codec_conf = ssm4567_zed_codec_conf,
	.num_configs = ARRAY_SIZE(ssm4567_zed_codec_conf),

	.dai_fmt = SND_SOC_DAIFMT_DSP_A |
		SND_SOC_DAIFMT_NB_NF |
		SND_SOC_DAIFMT_CBS_CFS,
	.init = ssm4567_link_init,
};

static struct snd_soc_card ssm4567_zed_card = {
    .name = "ZED SSM4567",
    .owner = THIS_MODULE,
    .dai_link = &zed_ssm4567_dai_link,
    .num_links = 1,
    .dapm_widgets = zed_ssm4567_widgets,
    .num_dapm_widgets = ARRAY_SIZE(zed_ssm4567_widgets),
    .dapm_routes = zed_ssm4567_routes,
    .num_dapm_routes = ARRAY_SIZE(zed_ssm4567_routes),
    .fully_routed = true,
};
</code>
===== More information =====

  *  [[SSM4329|SSM4329 Linux Driver]]

{{page>resources/tools-software/linux-drivers/need_help#need help&noheader&firstseconly&noeditbtn}}