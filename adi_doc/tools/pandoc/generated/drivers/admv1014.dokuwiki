====== ADMV1014 24 GHz to 44 GHz, Wideband, Microwave Downconverter ======

===== Supported Devices =====

  * [[adi>ADMV1014]]

===== Evaluation Boards =====

  * [[adi>EVAL-ADMV1014]]

===== Description =====

This is a Linux industrial I/O ([[software:linux:docs:iio:iio|IIO]]) subsystem driver, targeting serial interface Microwave converters.
The industrial I/O subsystem provides a unified framework for drivers for many different types of converters and sensors using a number of different physical interfaces (i2c, spi, etc).
See [[software:linux:docs:iio:iio|IIO]] for more information.

====== Source Code ======

===== Status =====

^ Source ^ Mainlined? ^
| [[linux.github>master?drivers/iio/frequency/admv1014.c|git]] | [[git.linux.org>drivers/iio/frequency/admv1014.c|WIP]] |
===== Files =====

^ Function ^ File ^
| driver  | [[ linux.github>master?drivers/iio/frequency/admv1014.c |  drivers/iio/frequency/admv1014.c]] |
| Documentation | [[git.linux.org>Documentation/ABI/testing/sysfs-bus-iio]] | 

{{page>software/linux/docs/platform_and_bus_model#Declaring SPI slave devices&firstseconly&noeditbtn}}

==== properties ====

**compatible:**
  * enum:
    * adi,admv1014

**reg:**
  * maxItems: 1

**spi-max-frequency:**
  * minimum: 1000000

**clocks:**
  * description: Definition of the external clock (see clock/clock-bindings.txt)
  * minItems: 1

**clock-names:**
  * description: Must be "lo_in"
  * maxItems: 1

**clock-output-names:**
  * maxItems: 1

**clock-scales:**
  * description: The Common Clock Framework max rate is limited by MAX of unsigned long. For ADMV1014 device this is a deficiency. If specified, this property allows arbitrary scales. The first element in the array should be the multiplier and the second element should be the divider.
  * $ref: /schemas/types.yaml#/definitions/uint32-array
  * minimum: 1

**vcm-supply:**
  * description: analog voltage regulator (see regulator/regulator.txt)

**adi,parity-en:**
  * description: Enable Parity for Write execution.
  * type: boolean

**adi,ibias-pd:**
  * description: Power Down the Rx IBIAS.
  * type: boolean

**adi,if-amp-pd:**
  * description: Power Down the IF Amp.
  * type: boolean

**adi,quad-bg-pd:**
  * description: Power Down the Quadrupler Band Gap.
  * type: boolean

**adi,bb-amp-pd:**
  * description: Power Down the Baseband Amp.
  * type: boolean

**adi,quad-ibias-pd:**
  * description: Power Down the Quadrupler Bias Current.
  * type: boolean

**adi,det-en:**
  * description: Digital Rx Detector Enable.
  * type: boolean

**adi,bg-pd:**
  * description: Power Down the Rx BG.
  * type: boolean

**adi,p1db-comp:**
  * description: Turn on bits to optimize P1dB.
  * $ref: /schemas/types.yaml#/definitions/uint32
  * enum: [0, 3]

**adi,quad-se-mode:**
  * description: Switch Differential/SE Modes.
  * $ref: /schemas/types.yaml#/definitions/uint32
  * enum: [6, 9, 12]

**adi,det-prog:**
  * description: Digital Rx Detector Program.
  * $ref: /schemas/types.yaml#/definitions/uint32
  * enum: [1, 2, 4, 8, 16, 32, 64]

**adi,adi,bb-amp-gain-ctrl:**
  * description: Baseband Amp Gain control.
  * $ref: /schemas/types.yaml#/definitions/uint32
  * enum: [0, 1, 2, 3]

**'#address-cells':**
  * const: 1

**'#size-cells':**
  * const: 0

**'#clock-cells':**
  * const: 0

**required:**
  * compatible
  * reg
  * clocks
  * clock-names
  * vcm-supply

==== Example ====

<code c>
spi {
      #address-cells = <1>;
      #size-cells = <0>;
      admv1014@0{
        compatible = "adi,admv1014";
        reg = <0>;
        spi-max-frequency = <1000000>;
        clocks = <&admv1014_lo>;
        clock-names = "lo_in";
        clock-scales = <1 5>;
        vcm-supply = <&vcm>;
        adi,quad-se-mode = <12>;
        adi,parity-en;
        adi,det-en;
        adi,p1db-comp = <3>;
        adi,det-prog = <0>;
        adi,bb-amp-gain-ctrl = <0>;
      };
    };
</code>

====== Adding Linux driver support ======

Configure kernel with "make menuconfig" (alternatively use "make xconfig" or
"make qconfig")

<WRAP round help>
The ADMV1014 Driver depends on **CONFIG_SPI**
</WRAP>

<code>
Linux Kernel Configuration
	Device Drivers  --->
		<*>     Industrial I/O support --->
		    --- Industrial I/O support
				Frequency  --->
					<*> Analog Devices ADMV1014 Microwave Downconverter
</code>

====== Hardware configuration ======
{{page>software:linux:docs:iio:iio_snippets#iio device files&noheader&firstseconly&noeditbtn}}

<WRAP box bggreen><wrap info>This specifies any shell prompt running on the target</wrap>
<xterm>
root:/> **cd /sys/bus/iio/devices/**
root:/sys/bus/iio/devices> ls
iio:device0
root:/sys/bus/iio/devices> **iio:device0**

root:/> **ls -l**
-r--r--r-- 1 root root 4096 May  6 12:20 dev
-r--r--r-- 1 root root 4096 May  6 12:20 name
-rw-r--r-- 1 root root 4096 May  6 13:00 out_altvoltage0_i_hardwaregain
-rw-r--r-- 1 root root 4096 May  6 13:00 out_altvoltage0_q_hardwaregain
-rw-r--r-- 1 root root 4096 May  6 13:01 out_altvoltage0_i_offset
-rw-r--r-- 1 root root 4096 May  6 13:01 out_altvoltage0_q_offset
-rw-r--r-- 1 root root 4096 May  6 13:01 out_altvoltage0_i_phase
-rw-r--r-- 1 root root 4096 May  6 13:01 out_altvoltage0_q_phase
lrwxrwxrwx 1 root root    0 May  6 12:20 subsystem -> ../../../../../../../../bus/iio
-rw-r--r-- 1 root root 4096 May  6 12:20 uevent
</xterm></WRAP>

=== Show device name ===

<WRAP box bggreen><wrap info>This specifies any shell prompt running on the target</wrap>
<xterm>
root:/> **cd /sys/bus/iio/devices/iio\:device0/**
root:/> **cat name**
admv1014
</xterm></WRAP>

=== Set ChannelY Gain ===

/sys/bus/iio/devices/iio:deviceX/out_altvoltageY_Z_hardwaregain\\

Gain factor. If shared across all channels,
<type>_hardwaregain is used.

<WRAP box bggreen><wrap info>This specifies any shell prompt running on the target</wrap>
<xterm>

root:/> **cat out_altvoltage0_i_hardwaregain**
0 0

root:/> **echo 1.1 > out_altvoltage0_i_hardwaregain**
root:/> **cat out_altvoltage0_hardwaregain**
1 1
</xterm></WRAP>

=== Set ChannelY Offset value===

/sys/bus/iio/devices/iio:deviceX/out_altvoltageY_Z_offset\\

Offset value. If shared across all channels,
<type>_offset is used.

<WRAP box bggreen><wrap info>This specifies any shell prompt running on the target</wrap>
<xterm>
root:/> **cat out_altvoltage0_i_offset**
0

root:/> **echo 1 > out_altvoltage0_i_offset**
root:/> **cat out_altvoltage0_offset**
1
</xterm></WRAP>

=== Set ChannelY Phase value===

/sys/bus/iio/devices/iio:deviceX/out_altvoltageY_Z_phase\\

Phase value. If shared across all channels,
<type>_phase is used.

<WRAP box bggreen><wrap info>This specifies any shell prompt running on the target</wrap>
<xterm>
root:/> **cat out_altvoltage0_i_phase**
0

root:/> **echo 1 > out_altvoltage0_i_phase**
root:/> **cat out_altvoltage0_phase**
1
</xterm></WRAP>

====== More Information ======

{{page>software:linux:docs:iio:iio_snippets#iio pointers&noheader&firstseconly&noeditbtn}}