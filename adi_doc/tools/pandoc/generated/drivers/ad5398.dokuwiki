===== AD5398 Regulator Current Sink DAC Linux Driver =====

===== Supported Devices =====

  * [[adi>AD5398]]
  * [[adi>AD5821]]

===== Evaluation Boards =====

  * [[adi>EVAL-AD5821EBZ]]
===== Description =====

AD5398 and AD5821 is a single 10-bit DAC with 120mA output current sink capability. I2C bus is connected to enable/disable output and set the proper output current value. This driver adapts to voltage and current regulator framework in Linux kernel.

====== Source Code ======

===== Status =====

^ Source ^ Mainlined?  ^
| [[git.linux.org>drivers/regulator/ad5398.c|git]] | [[git.linux.org>drivers/regulator/ad5398.c|Yes]] |
===== Files =====

^ Function ^ File ^
| driver  | [[git.linux.org>drivers/regulator/ad5398.c]]  |


====== Adding Linux driver support ======

Configure kernel with "make menuconfig" (alternatively use "make xconfig" or
"make qconfig")

<WRAP round help>
The AD5398/AD5821 Driver depends on  **CONFIG_I2C**
</WRAP>

Select voltage and current regulator framework support and enable AD5398/AD5821 driver. Don't forget to select virtual regulator consumer and userspace regulator consumer as module. Because AD5398 driver is loaded after I2C bus finish initialization at kernel booting, built-in consumers may be loaded earlier and find supply in AD5398 driver is not available.

<code>
Linux Kernel Configuration
	Device Drivers  --->
		[*] Voltage and Current Regulator Support  --->
		<M>   Virtual regulator consumer support
		<M>   Userspace regulator consumer support
		<*>   Analog Devices AD5398/AD5821 regulators
</code>

==== Customize Device Parameters ====
The platform info defined in bf537-stamp board file is for ad5398 and ad5821 only. If you want to customize this driver for other compatible current regulator DAC, you should revise the platform information accordingly.

  * Define device supply name exported by the driver.
<source trunk/arch/blackfin/mach-bf537/boards/stamp.c:ad5398_consumer{} c linux-kernel>
  * Define supply value range.
<source trunk/arch/blackfin/mach-bf537/boards/stamp.c:ad5398_regulator_data{} c linux-kernel>
  * Define supply name in platform_data for the virtual consumer to match and use.
<source trunk/arch/blackfin/mach-bf537/boards/stamp.c:ad5398_virt_consumer_device{} c linux-kernel>
  * Define supply name for the user space consumer to match and use.
<source trunk/arch/blackfin/mach-bf537/boards/stamp.c:ad5398_bulk_data{} c linux-kernel>
<source trunk/arch/blackfin/mach-bf537/boards/stamp.c:ad5398_userspace_comsumer_data{} c linux-kernel>
<source trunk/arch/blackfin/mach-bf537/boards/stamp.c:ad5398_userspace_consumer_device{} c linux-kernel>

==== Driver Testing ====

Check regulator driver initialization information at kernel booting.

<WRAP box bggreen><wrap info>This specifies any shell prompt running on the target</wrap>
<xterm>
regulator: core version 0.5
i2c /dev entries driver
regulator: isink: 0 <--> 120 mA
ad5398 0-000c: ad5398 regulator driver loaded
i2c-bfin-twi i2c-bfin-twi.0: Blackfin BF5xx on-chip I2C TWI Contoller, regs_base@ffc01400
</xterm></WRAP>

Check if AD5398 is probed properly.


<WRAP box bggreen><wrap info>This specifies any shell prompt running on the target</wrap>
<xterm>
root:/> ls -l sys/class/regulator/regulator.0/
lrwxrwxrwx    1 root     root            0 Jan  1 19:47 device -> ../../../0-000c
-r--r--r--    1 root     root         4096 Jan  1 19:47 max_microamps
-r--r--r--    1 root     root         4096 Jan  1 19:47 microamps
-r--r--r--    1 root     root         4096 Jan  1 19:47 min_microamps
-r--r--r--    1 root     root         4096 Jan  1 19:47 name
-r--r--r--    1 root     root         4096 Jan  1 19:47 num_users
drwxr-xr-x    2 root     root            0 Jan  1 19:47 power
-r--r--r--    1 root     root         4096 Jan  1 19:47 requested_microamps
-r--r--r--    1 root     root         4096 Jan  1 19:47 state
lrwxrwxrwx    1 root     root            0 Jan  1 19:47 subsystem -> ../../../../../../../class/regulator
-r--r--r--    1 root     root         4096 Jan  1 19:47 suspend_disk_state
-r--r--r--    1 root     root         4096 Jan  1 19:47 suspend_mem_state
-r--r--r--    1 root     root         4096 Jan  1 19:47 suspend_standby_state
-r--r--r--    1 root     root         4096 Jan  1 19:47 type
-rw-r--r--    1 root     root         4096 Jan  1 19:47 uevent
root:/> cat sys/class/regulator/regulator.0/max_microamps
120000
root:/> cat sys/class/regulator/regulator.0/min_microamps
0
root:/> cat sys/class/regulator/regulator.0/name
current range
root:/> cat sys/class/regulator/regulator.0/type
current
root:/> cat sys/class/regulator/regulator.0/state
disabled
</xterm></WRAP>

Insert virtual consumer driver module and check usability.

<WRAP box bggreen><wrap info>This specifies any shell prompt running on the target</wrap>
<xterm>
root:/> modprobe virtual
root:/> ls -l sys/devices/platform/reg-virt-consumer.0/
lrwxrwxrwx    1 root     root            0 Jan  1 21:23 driver -> ../../../bus/platform/drivers/reg-virt-consumer
-rw-rw-rw-    1 root     root         4096 Jan  1 21:23 max_microamps
-rw-rw-rw-    1 root     root         4096 Jan  1 21:23 max_microvolts
-r--r--r--    1 root     root         4096 Jan  1 21:23 microamps_requested_current
-rw-rw-rw-    1 root     root         4096 Jan  1 21:23 min_microamps
-rw-rw-rw-    1 root     root         4096 Jan  1 21:23 min_microvolts
-r--r--r--    1 root     root         4096 Jan  1 21:23 modalias
-rw-rw-rw-    1 root     root         4096 Jan  1 21:23 mode
drwxr-xr-x    2 root     root            0 Jan  1 21:23 power
lrwxrwxrwx    1 root     root            0 Jan  1 21:23 subsystem -> ../../../bus/platform
-rw-r--r--    1 root     root         4096 Jan  1 21:23 uevent
root:/> cat sys/devices/platform/reg-virt-consumer.0/max_microamps
120000
root:/> cat sys/devices/platform/reg-virt-consumer.0/min_microamps
0
root:/> echo 50000 > sys/devices/platform/reg-virt-consumer.0/min_microamps
root:/> cat sys/devices/platform/reg-virt-consumer.0/min_microamps
50000
root:/> cat sys/devices/platform/reg-virt-consumer.0/max_microamps
120000
</xterm></WRAP>

Insert user space consumer driver module and check usability.

<WRAP box bggreen><wrap info>This specifies any shell prompt running on the target</wrap>
<xterm>
root:/> modprobe userspace-consumer
root:/> ls -l sys/devices/platform/reg-userspace-consumer.0/
lrwxrwxrwx    1 root     root            0 Jan  1 21:26 driver -> ../../../bus/platform/drivers/reg-userspace-consumer
-r--r--r--    1 root     root         4096 Jan  1 21:26 microamps_requested_current
-r--r--r--    1 root     root         4096 Jan  1 21:26 modalias
-r--r--r--    1 root     root         4096 Jan  1 21:26 name
drwxr-xr-x    2 root     root            0 Jan  1 21:26 power
-rw-r--r--    1 root     root         4096 Jan  1 21:26 state
lrwxrwxrwx    1 root     root            0 Jan  1 21:26 subsystem -> ../../../bus/platform
-rw-r--r--    1 root     root         4096 Jan  1 21:26 uevent
root:/> cat sys/devices/platform/reg-userspace-consumer.0/name
ad5398
root:/> cat sys/devices/platform/reg-userspace-consumer.0/state
disabled
root:/> echo enabled > sys/devices/platform/reg-userspace-consumer.0/state
root:/> cat sys/devices/platform/reg-userspace-consumer.0/state
enabled
</xterm></WRAP>

<WRAP tip>To control ADC to output a given current, you only need to set the value to sysfs entry min_microamps in virtual consumer platform device. The driver adjusts the output according to the min current value received.</WRAP>
